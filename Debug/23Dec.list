
23Dec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08007138  08007138  00017138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e4  080074e4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080074e4  080074e4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074e4  080074e4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080074ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000024c  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cfff  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e0d  00000000  00000000  0002d246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a70  00000000  00000000  0002f058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000815  00000000  00000000  0002fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002108b  00000000  00000000  000302dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f425  00000000  00000000  00051368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c36ca  00000000  00000000  0006078d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003a44  00000000  00000000  00123e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003e  00000000  00000000  0012789c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007120 	.word	0x08007120

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007120 	.word	0x08007120

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
 void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bc0:	1d39      	adds	r1, r7, #4
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <__io_putchar+0x20>)
 8000bca:	f003 f977 	bl	8003ebc <HAL_UART_Transmit>
  return ch;
 8000bce:	687b      	ldr	r3, [r7, #4]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000244 	.word	0x20000244

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 fb7a 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f810 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f000 f8de 	bl	8000da8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bec:	f000 f8ac 	bl	8000d48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bf0:	f000 f86a 	bl	8000cc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8000bf4:	bf00      	nop
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <main+0x28>)
 8000bf8:	f000 f941 	bl	8000e7e <MPU6050_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d0f9      	beq.n	8000bf6 <main+0x1a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <main+0x26>
 8000c04:	200001f0 	.word	0x200001f0

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0a6      	sub	sp, #152	; 0x98
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c12:	2228      	movs	r2, #40	; 0x28
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 fb2f 	bl	800527a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2258      	movs	r2, #88	; 0x58
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 fb21 	bl	800527a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c40:	2310      	movs	r3, #16
 8000c42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c54:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fc32 	bl	80024d0 <HAL_RCC_OscConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c72:	f000 f8ff 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c86:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c90:	2102      	movs	r1, #2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fc70 	bl	8003578 <HAL_RCC_ClockConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c9e:	f000 f8e9 	bl	8000e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000ca2:	2322      	movs	r3, #34	; 0x22
 8000ca4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fe97 	bl	80039e4 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000cbc:	f000 f8da 	bl	8000e74 <Error_Handler>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3798      	adds	r7, #152	; 0x98
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval */
void MX_I2C1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cce:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <MX_I2C1_Init+0x78>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <MX_I2C1_Init+0x7c>)
 8000cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d02:	480e      	ldr	r0, [pc, #56]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000d04:	f000 fdd6 	bl	80018b4 <HAL_I2C_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d0e:	f000 f8b1 	bl	8000e74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000d16:	f001 fb43 	bl	80023a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d20:	f000 f8a8 	bl	8000e74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d24:	2100      	movs	r1, #0
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000d28:	f001 fb85 	bl	8002436 <HAL_I2CEx_ConfigDigitalFilter>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f000 f89f 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200001f0 	.word	0x200001f0
 8000d40:	40005400 	.word	0x40005400
 8000d44:	2000090e 	.word	0x2000090e

08000d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <MX_USART2_UART_Init+0x5c>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d54:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d8c:	f003 f848 	bl	8003e20 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f000 f86d 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000244 	.word	0x20000244
 8000da4:	40004400 	.word	0x40004400

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a2a      	ldr	r2, [pc, #168]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a24      	ldr	r2, [pc, #144]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	6153      	str	r3, [r2, #20]
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2120      	movs	r1, #32
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f000 fd2d 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <MX_GPIO_Init+0xc8>)
 8000e42:	f000 fb95 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e46:	2320      	movs	r3, #32
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f000 fb86 	bl	8001570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000800 	.word	0x48000800

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>

08000e7e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b088      	sub	sp, #32
 8000e82:	af04      	add	r7, sp, #16
 8000e84:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	f107 030f 	add.w	r3, r7, #15
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2301      	movs	r3, #1
 8000e96:	2275      	movs	r2, #117	; 0x75
 8000e98:	21d0      	movs	r1, #208	; 0xd0
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 feae 	bl	8001bfc <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b68      	cmp	r3, #104	; 0x68
 8000ea4:	d13d      	bne.n	8000f22 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000eaa:	2364      	movs	r3, #100	; 0x64
 8000eac:	9302      	str	r3, [sp, #8]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	f107 030e 	add.w	r3, r7, #14
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	226b      	movs	r2, #107	; 0x6b
 8000ebc:	21d0      	movs	r1, #208	; 0xd0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 fd88 	bl	80019d4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	f107 030e 	add.w	r3, r7, #14
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	2219      	movs	r2, #25
 8000eda:	21d0      	movs	r1, #208	; 0xd0
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 fd79 	bl	80019d4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000ee6:	2364      	movs	r3, #100	; 0x64
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	f107 030e 	add.w	r3, r7, #14
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	221c      	movs	r2, #28
 8000ef8:	21d0      	movs	r1, #208	; 0xd0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 fd6a 	bl	80019d4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	9302      	str	r3, [sp, #8]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f107 030e 	add.w	r3, r7, #14
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	221b      	movs	r2, #27
 8000f16:	21d0      	movs	r1, #208	; 0xd0
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 fd5b 	bl	80019d4 <HAL_I2C_Mem_Write>
        return 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <MPU6050_Init+0xa6>
    }
    return 1;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x44>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x44>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_MspInit+0x44>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	61d3      	str	r3, [r2, #28]
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_MspInit+0x44>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f62:	2007      	movs	r0, #7
 8000f64:	f000 fad0 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_I2C_MspInit+0x7c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d128      	bne.n	8000fe8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	2312      	movs	r3, #18
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <HAL_I2C_MspInit+0x84>)
 8000fcc:	f000 fad0 	bl	8001570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fda:	61d3      	str	r3, [r2, #28]
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000400 	.word	0x48000400

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a17      	ldr	r2, [pc, #92]	; (8001078 <HAL_UART_MspInit+0x7c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d128      	bne.n	8001070 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0x80>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <HAL_UART_MspInit+0x80>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_UART_MspInit+0x80>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0x80>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_UART_MspInit+0x80>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_UART_MspInit+0x80>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104e:	230c      	movs	r3, #12
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105e:	2307      	movs	r3, #7
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f000 fa80 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <NMI_Handler+0x4>

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 f94a 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return 1;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <_kill>:

int _kill(int pid, int sig)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ee:	f004 f917 	bl	8005320 <__errno>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2216      	movs	r2, #22
 80010f6:	601a      	str	r2, [r3, #0]
  return -1;
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_exit>:

void _exit (int status)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ffe7 	bl	80010e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001116:	e7fe      	b.n	8001116 <_exit+0x12>

08001118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e00a      	b.n	8001140 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800112a:	f3af 8000 	nop.w
 800112e:	4601      	mov	r1, r0
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbf0      	blt.n	800112a <_read+0x12>
  }

  return len;
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e009      	b.n	8001178 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fd23 	bl	8000bb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf1      	blt.n	8001164 <_write+0x12>
  }
  return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_close>:

int _close(int file)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b2:	605a      	str	r2, [r3, #4]
  return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_isatty>:

int _isatty(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <_sbrk+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <_sbrk+0x60>)
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <_sbrk+0x64>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <_sbrk+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001224:	f004 f87c 	bl	8005320 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	220c      	movs	r2, #12
 800122c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e009      	b.n	8001248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <_sbrk+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20010000 	.word	0x20010000
 8001254:	00000400 	.word	0x00000400
 8001258:	200002cc 	.word	0x200002cc
 800125c:	20000420 	.word	0x20000420

08001260 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff ffea 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	; (80012c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LoopForever+0xe>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	; (80012d0 <LoopForever+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f004 f83b 	bl	800532c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b6:	f7ff fc91 	bl	8000bdc <main>

080012ba <LoopForever>:

LoopForever:
    b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80012c8:	080074ec 	.word	0x080074ec
  ldr r2, =_sbss
 80012cc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80012d0:	20000420 	.word	0x20000420

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f90d 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fe1a 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f917 	bl	8001556 <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f8ed 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	200002d0 	.word	0x200002d0

0800138c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200002d0 	.word	0x200002d0

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff47 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff5c 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffb0 	bl	80014c4 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	e160      	b.n	8001842 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8152 	beq.w	800183c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d005      	beq.n	80015b0 <HAL_GPIO_Init+0x40>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d130      	bne.n	8001612 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e6:	2201      	movs	r2, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	f003 0201 	and.w	r2, r3, #1
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b03      	cmp	r3, #3
 800161c:	d017      	beq.n	800164e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d123      	bne.n	80016a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	6939      	ldr	r1, [r7, #16]
 800169e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0203 	and.w	r2, r3, #3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80ac 	beq.w	800183c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e4:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <HAL_GPIO_Init+0x2f0>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a5d      	ldr	r2, [pc, #372]	; (8001860 <HAL_GPIO_Init+0x2f0>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <HAL_GPIO_Init+0x2f0>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016fc:	4a59      	ldr	r2, [pc, #356]	; (8001864 <HAL_GPIO_Init+0x2f4>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001726:	d025      	beq.n	8001774 <HAL_GPIO_Init+0x204>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <HAL_GPIO_Init+0x2f8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d01f      	beq.n	8001770 <HAL_GPIO_Init+0x200>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a4e      	ldr	r2, [pc, #312]	; (800186c <HAL_GPIO_Init+0x2fc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d019      	beq.n	800176c <HAL_GPIO_Init+0x1fc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a4d      	ldr	r2, [pc, #308]	; (8001870 <HAL_GPIO_Init+0x300>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d013      	beq.n	8001768 <HAL_GPIO_Init+0x1f8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a4c      	ldr	r2, [pc, #304]	; (8001874 <HAL_GPIO_Init+0x304>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00d      	beq.n	8001764 <HAL_GPIO_Init+0x1f4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a4b      	ldr	r2, [pc, #300]	; (8001878 <HAL_GPIO_Init+0x308>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d007      	beq.n	8001760 <HAL_GPIO_Init+0x1f0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a4a      	ldr	r2, [pc, #296]	; (800187c <HAL_GPIO_Init+0x30c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d101      	bne.n	800175c <HAL_GPIO_Init+0x1ec>
 8001758:	2306      	movs	r3, #6
 800175a:	e00c      	b.n	8001776 <HAL_GPIO_Init+0x206>
 800175c:	2307      	movs	r3, #7
 800175e:	e00a      	b.n	8001776 <HAL_GPIO_Init+0x206>
 8001760:	2305      	movs	r3, #5
 8001762:	e008      	b.n	8001776 <HAL_GPIO_Init+0x206>
 8001764:	2304      	movs	r3, #4
 8001766:	e006      	b.n	8001776 <HAL_GPIO_Init+0x206>
 8001768:	2303      	movs	r3, #3
 800176a:	e004      	b.n	8001776 <HAL_GPIO_Init+0x206>
 800176c:	2302      	movs	r3, #2
 800176e:	e002      	b.n	8001776 <HAL_GPIO_Init+0x206>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_GPIO_Init+0x206>
 8001774:	2300      	movs	r3, #0
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	f002 0203 	and.w	r2, r2, #3
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	4093      	lsls	r3, r2
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001786:	4937      	ldr	r1, [pc, #220]	; (8001864 <HAL_GPIO_Init+0x2f4>)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001794:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <HAL_GPIO_Init+0x310>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017b8:	4a31      	ldr	r2, [pc, #196]	; (8001880 <HAL_GPIO_Init+0x310>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017be:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_GPIO_Init+0x310>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017e2:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_GPIO_Init+0x310>)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_GPIO_Init+0x310>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800180c:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <HAL_GPIO_Init+0x310>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_GPIO_Init+0x310>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_GPIO_Init+0x310>)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	f47f ae97 	bne.w	8001580 <HAL_GPIO_Init+0x10>
  }
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	371c      	adds	r7, #28
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	48000400 	.word	0x48000400
 800186c:	48000800 	.word	0x48000800
 8001870:	48000c00 	.word	0x48000c00
 8001874:	48001000 	.word	0x48001000
 8001878:	48001400 	.word	0x48001400
 800187c:	48001800 	.word	0x48001800
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e081      	b.n	80019ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fb4a 	bl	8000f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2224      	movs	r2, #36	; 0x24
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001904:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001914:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d107      	bne.n	800192e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	e006      	b.n	800193c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800193a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d104      	bne.n	800194e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800194c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800195c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001960:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001970:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69d9      	ldr	r1, [r3, #28]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1a      	ldr	r2, [r3, #32]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2220      	movs	r2, #32
 80019b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	4608      	mov	r0, r1
 80019de:	4611      	mov	r1, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	4603      	mov	r3, r0
 80019e4:	817b      	strh	r3, [r7, #10]
 80019e6:	460b      	mov	r3, r1
 80019e8:	813b      	strh	r3, [r7, #8]
 80019ea:	4613      	mov	r3, r2
 80019ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	f040 80f9 	bne.w	8001bee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_I2C_Mem_Write+0x34>
 8001a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0ed      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_I2C_Mem_Write+0x4e>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e0e6      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x21c>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a2a:	f7ff fcaf 	bl	800138c <HAL_GetTick>
 8001a2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2319      	movs	r3, #25
 8001a36:	2201      	movs	r2, #1
 8001a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fac3 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0d1      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2221      	movs	r2, #33	; 0x21
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2240      	movs	r2, #64	; 0x40
 8001a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a3a      	ldr	r2, [r7, #32]
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a74:	88f8      	ldrh	r0, [r7, #6]
 8001a76:	893a      	ldrh	r2, [r7, #8]
 8001a78:	8979      	ldrh	r1, [r7, #10]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	4603      	mov	r3, r0
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f9d3 	bl	8001e30 <I2C_RequestMemoryWrite>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0a9      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d90e      	bls.n	8001ac4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	22ff      	movs	r2, #255	; 0xff
 8001aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	8979      	ldrh	r1, [r7, #10]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fc3d 	bl	800233c <I2C_TransferConfig>
 8001ac2:	e00f      	b.n	8001ae4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	8979      	ldrh	r1, [r7, #10]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fc2c 	bl	800233c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fabc 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e07b      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d034      	beq.n	8001b9c <HAL_I2C_Mem_Write+0x1c8>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d130      	bne.n	8001b9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b40:	2200      	movs	r2, #0
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 fa3f 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e04d      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2bff      	cmp	r3, #255	; 0xff
 8001b5c:	d90e      	bls.n	8001b7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	22ff      	movs	r2, #255	; 0xff
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	8979      	ldrh	r1, [r7, #10]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fbe1 	bl	800233c <I2C_TransferConfig>
 8001b7a:	e00f      	b.n	8001b9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	8979      	ldrh	r1, [r7, #10]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fbd0 	bl	800233c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d19e      	bne.n	8001ae4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 faa2 	bl	80020f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e01a      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_I2C_Mem_Write+0x224>)
 8001bce:	400b      	ands	r3, r1
 8001bd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001bee:	2302      	movs	r3, #2
  }
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	fe00e800 	.word	0xfe00e800

08001bfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	817b      	strh	r3, [r7, #10]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	813b      	strh	r3, [r7, #8]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	f040 80fd 	bne.w	8001e1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_I2C_Mem_Read+0x34>
 8001c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0f1      	b.n	8001e20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_I2C_Mem_Read+0x4e>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e0ea      	b.n	8001e20 <HAL_I2C_Mem_Read+0x224>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c52:	f7ff fb9b 	bl	800138c <HAL_GetTick>
 8001c56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f9af 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0d5      	b.n	8001e20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2222      	movs	r2, #34	; 0x22
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2240      	movs	r2, #64	; 0x40
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a3a      	ldr	r2, [r7, #32]
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c9c:	88f8      	ldrh	r0, [r7, #6]
 8001c9e:	893a      	ldrh	r2, [r7, #8]
 8001ca0:	8979      	ldrh	r1, [r7, #10]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	4603      	mov	r3, r0
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f913 	bl	8001ed8 <I2C_RequestMemoryRead>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0ad      	b.n	8001e20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2bff      	cmp	r3, #255	; 0xff
 8001ccc:	d90e      	bls.n	8001cec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	22ff      	movs	r2, #255	; 0xff
 8001cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	8979      	ldrh	r1, [r7, #10]
 8001cdc:	4b52      	ldr	r3, [pc, #328]	; (8001e28 <HAL_I2C_Mem_Read+0x22c>)
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fb29 	bl	800233c <I2C_TransferConfig>
 8001cea:	e00f      	b.n	8001d0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	8979      	ldrh	r1, [r7, #10]
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_I2C_Mem_Read+0x22c>)
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 fb18 	bl	800233c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	2200      	movs	r2, #0
 8001d14:	2104      	movs	r1, #4
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f956 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07c      	b.n	8001e20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d034      	beq.n	8001dcc <HAL_I2C_Mem_Read+0x1d0>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d130      	bne.n	8001dcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	2200      	movs	r2, #0
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f927 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e04d      	b.n	8001e20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2bff      	cmp	r3, #255	; 0xff
 8001d8c:	d90e      	bls.n	8001dac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	22ff      	movs	r2, #255	; 0xff
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	8979      	ldrh	r1, [r7, #10]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fac9 	bl	800233c <I2C_TransferConfig>
 8001daa:	e00f      	b.n	8001dcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	8979      	ldrh	r1, [r7, #10]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fab8 	bl	800233c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d19a      	bne.n	8001d0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f98a 	bl	80020f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e01a      	b.n	8001e20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2220      	movs	r2, #32
 8001df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_I2C_Mem_Read+0x230>)
 8001dfe:	400b      	ands	r3, r1
 8001e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
  }
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	80002400 	.word	0x80002400
 8001e2c:	fe00e800 	.word	0xfe00e800

08001e30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	4608      	mov	r0, r1
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	817b      	strh	r3, [r7, #10]
 8001e42:	460b      	mov	r3, r1
 8001e44:	813b      	strh	r3, [r7, #8]
 8001e46:	4613      	mov	r3, r2
 8001e48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	8979      	ldrh	r1, [r7, #10]
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <I2C_RequestMemoryWrite+0xa4>)
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 fa6f 	bl	800233c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	69b9      	ldr	r1, [r7, #24]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f8ff 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e02c      	b.n	8001ecc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e78:	893b      	ldrh	r3, [r7, #8]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28
 8001e82:	e015      	b.n	8001eb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e84:	893b      	ldrh	r3, [r7, #8]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	69b9      	ldr	r1, [r7, #24]
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f8e5 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e012      	b.n	8001ecc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea6:	893b      	ldrh	r3, [r7, #8]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f884 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	80002000 	.word	0x80002000

08001ed8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	817b      	strh	r3, [r7, #10]
 8001eea:	460b      	mov	r3, r1
 8001eec:	813b      	strh	r3, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	8979      	ldrh	r1, [r7, #10]
 8001ef8:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <I2C_RequestMemoryRead+0xa4>)
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2300      	movs	r3, #0
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 fa1c 	bl	800233c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f8ac 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e02c      	b.n	8001f72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d105      	bne.n	8001f2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f1e:	893b      	ldrh	r3, [r7, #8]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
 8001f28:	e015      	b.n	8001f56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f2a:	893b      	ldrh	r3, [r7, #8]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f892 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e012      	b.n	8001f72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f4c:	893b      	ldrh	r3, [r7, #8]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 f831 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	80002000 	.word	0x80002000

08001f80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d103      	bne.n	8001f9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d007      	beq.n	8001fbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	619a      	str	r2, [r3, #24]
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd8:	e031      	b.n	800203e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d02d      	beq.n	800203e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7ff f9d3 	bl	800138c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d122      	bne.n	800203e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4013      	ands	r3, r2
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	429a      	cmp	r2, r3
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	429a      	cmp	r2, r3
 8002014:	d113      	bne.n	800203e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f043 0220 	orr.w	r2, r3, #32
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4013      	ands	r3, r2
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	429a      	cmp	r2, r3
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	429a      	cmp	r2, r3
 800205a:	d0be      	beq.n	8001fda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002072:	e033      	b.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f87f 	bl	800217c <I2C_IsErrorOccurred>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e031      	b.n	80020ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208e:	d025      	beq.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002090:	f7ff f97c 	bl	800138c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	d302      	bcc.n	80020a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d11a      	bne.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d013      	beq.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e007      	b.n	80020ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d1c4      	bne.n	8002074 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002100:	e02f      	b.n	8002162 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f838 	bl	800217c <I2C_IsErrorOccurred>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e02d      	b.n	8002172 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002116:	f7ff f939 	bl	800138c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	d302      	bcc.n	800212c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d11a      	bne.n	8002162 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b20      	cmp	r3, #32
 8002138:	d013      	beq.n	8002162 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e007      	b.n	8002172 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b20      	cmp	r3, #32
 800216e:	d1c8      	bne.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d068      	beq.n	800227a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2210      	movs	r2, #16
 80021ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021b0:	e049      	b.n	8002246 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d045      	beq.n	8002246 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ba:	f7ff f8e7 	bl	800138c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <I2C_IsErrorOccurred+0x54>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d13a      	bne.n	8002246 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f2:	d121      	bne.n	8002238 <I2C_IsErrorOccurred+0xbc>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021fa:	d01d      	beq.n	8002238 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d01a      	beq.n	8002238 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002210:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002212:	f7ff f8bb 	bl	800138c <HAL_GetTick>
 8002216:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002218:	e00e      	b.n	8002238 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800221a:	f7ff f8b7 	bl	800138c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b19      	cmp	r3, #25
 8002226:	d907      	bls.n	8002238 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f043 0320 	orr.w	r3, r3, #32
 800222e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002236:	e006      	b.n	8002246 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b20      	cmp	r3, #32
 8002244:	d1e9      	bne.n	800221a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b20      	cmp	r3, #32
 8002252:	d003      	beq.n	800225c <I2C_IsErrorOccurred+0xe0>
 8002254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0aa      	beq.n	80021b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800225c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2220      	movs	r2, #32
 800226a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00b      	beq.n	80022a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00b      	beq.n	80022e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80022e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01c      	beq.n	800232a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff fe45 	bl	8001f80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <I2C_IsErrorOccurred+0x1bc>)
 8002302:	400b      	ands	r3, r1
 8002304:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	431a      	orrs	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800232a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800232e:	4618      	mov	r0, r3
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	fe00e800 	.word	0xfe00e800

0800233c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	817b      	strh	r3, [r7, #10]
 800234a:	4613      	mov	r3, r2
 800234c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800234e:	897b      	ldrh	r3, [r7, #10]
 8002350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002354:	7a7b      	ldrb	r3, [r7, #9]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800235c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	4313      	orrs	r3, r2
 8002366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800236a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	0d5b      	lsrs	r3, r3, #21
 8002376:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <I2C_TransferConfig+0x60>)
 800237c:	430b      	orrs	r3, r1
 800237e:	43db      	mvns	r3, r3
 8002380:	ea02 0103 	and.w	r1, r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	03ff63ff 	.word	0x03ff63ff

080023a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d138      	bne.n	8002428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e032      	b.n	800242a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2224      	movs	r2, #36	; 0x24
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	d139      	bne.n	80024c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002456:	2302      	movs	r3, #2
 8002458:	e033      	b.n	80024c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2224      	movs	r2, #36	; 0x24
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f001 b83a 	b.w	800356a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 816f 	beq.w	80027ea <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800250c:	4bb5      	ldr	r3, [pc, #724]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d00c      	beq.n	8002532 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002518:	4bb2      	ldr	r3, [pc, #712]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d15c      	bne.n	80025de <HAL_RCC_OscConfig+0x10e>
 8002524:	4baf      	ldr	r3, [pc, #700]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d155      	bne.n	80025de <HAL_RCC_OscConfig+0x10e>
 8002532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002536:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002546:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <HAL_RCC_OscConfig+0x94>
 800255e:	4ba1      	ldr	r3, [pc, #644]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	e015      	b.n	8002590 <HAL_RCC_OscConfig+0xc0>
 8002564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002568:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002580:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800258c:	4b95      	ldr	r3, [pc, #596]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002594:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002598:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800259c:	fa92 f2a2 	rbit	r2, r2
 80025a0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80025a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8111 	beq.w	80027e8 <HAL_RCC_OscConfig+0x318>
 80025c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 8108 	bne.w	80027e8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f000 bfc6 	b.w	800356a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ee:	d106      	bne.n	80025fe <HAL_RCC_OscConfig+0x12e>
 80025f0:	4b7c      	ldr	r3, [pc, #496]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a7b      	ldr	r2, [pc, #492]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 80025f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e036      	b.n	800266c <HAL_RCC_OscConfig+0x19c>
 80025fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002602:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x158>
 800260e:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a74      	ldr	r2, [pc, #464]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b72      	ldr	r3, [pc, #456]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a71      	ldr	r2, [pc, #452]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e021      	b.n	800266c <HAL_RCC_OscConfig+0x19c>
 8002628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x184>
 800263a:	4b6a      	ldr	r3, [pc, #424]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a69      	ldr	r2, [pc, #420]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a66      	ldr	r2, [pc, #408]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x19c>
 8002654:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a62      	ldr	r2, [pc, #392]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 800265a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b60      	ldr	r3, [pc, #384]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5f      	ldr	r2, [pc, #380]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 8002666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800266c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002670:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d059      	beq.n	8002730 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fe86 	bl	800138c <HAL_GetTick>
 8002680:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002686:	f7fe fe81 	bl	800138c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d902      	bls.n	800269c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	f000 bf67 	b.w	800356a <HAL_RCC_OscConfig+0x109a>
 800269c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80026b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d102      	bne.n	80026ce <HAL_RCC_OscConfig+0x1fe>
 80026c8:	4b46      	ldr	r3, [pc, #280]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x22a>
 80026ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80026e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80026ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026fe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002702:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002706:	fa92 f2a2 	rbit	r2, r2
 800270a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800270e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002712:	fab2 f282 	clz	r2, r2
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	f042 0220 	orr.w	r2, r2, #32
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	f002 021f 	and.w	r2, r2, #31
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0ab      	beq.n	8002686 <HAL_RCC_OscConfig+0x1b6>
 800272e:	e05c      	b.n	80027ea <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fe2c 	bl	800138c <HAL_GetTick>
 8002734:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273a:	f7fe fe27 	bl	800138c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d902      	bls.n	8002750 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	f000 bf0d 	b.w	800356a <HAL_RCC_OscConfig+0x109a>
 8002750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002754:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002764:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_RCC_OscConfig+0x2b2>
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e015      	b.n	80027ae <HAL_RCC_OscConfig+0x2de>
 8002782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002786:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800279e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_RCC_OscConfig+0x314>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80027b6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80027ba:	fa92 f2a2 	rbit	r2, r2
 80027be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80027c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027c6:	fab2 f282 	clz	r2, r2
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	f042 0220 	orr.w	r2, r2, #32
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f002 021f 	and.w	r2, r2, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1ab      	bne.n	800273a <HAL_RCC_OscConfig+0x26a>
 80027e2:	e002      	b.n	80027ea <HAL_RCC_OscConfig+0x31a>
 80027e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 817f 	beq.w	8002afe <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002800:	4ba7      	ldr	r3, [pc, #668]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00c      	beq.n	8002826 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800280c:	4ba4      	ldr	r3, [pc, #656]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d173      	bne.n	8002900 <HAL_RCC_OscConfig+0x430>
 8002818:	4ba1      	ldr	r3, [pc, #644]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002824:	d16c      	bne.n	8002900 <HAL_RCC_OscConfig+0x430>
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002838:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d102      	bne.n	8002856 <HAL_RCC_OscConfig+0x386>
 8002850:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	e013      	b.n	800287e <HAL_RCC_OscConfig+0x3ae>
 8002856:	2302      	movs	r3, #2
 8002858:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800286e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800287a:	4b89      	ldr	r3, [pc, #548]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2202      	movs	r2, #2
 8002880:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002884:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002888:	fa92 f2a2 	rbit	r2, r2
 800288c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002890:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f042 0220 	orr.w	r2, r2, #32
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f002 021f 	and.w	r2, r2, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCC_OscConfig+0x3f6>
 80028b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d002      	beq.n	80028c6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f000 be52 	b.w	800356a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	21f8      	movs	r1, #248	; 0xf8
 80028dc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80028e4:	fa91 f1a1 	rbit	r1, r1
 80028e8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80028ec:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80028f0:	fab1 f181 	clz	r1, r1
 80028f4:	b2c9      	uxtb	r1, r1
 80028f6:	408b      	lsls	r3, r1
 80028f8:	4969      	ldr	r1, [pc, #420]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	e0fe      	b.n	8002afe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002904:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8088 	beq.w	8002a22 <HAL_RCC_OscConfig+0x552>
 8002912:	2301      	movs	r3, #1
 8002914:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002924:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002932:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	461a      	mov	r2, r3
 800293a:	2301      	movs	r3, #1
 800293c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe fd25 	bl	800138c <HAL_GetTick>
 8002942:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002948:	f7fe fd20 	bl	800138c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d902      	bls.n	800295e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	f000 be06 	b.w	800356a <HAL_RCC_OscConfig+0x109a>
 800295e:	2302      	movs	r3, #2
 8002960:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002970:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <HAL_RCC_OscConfig+0x4be>
 8002988:	4b45      	ldr	r3, [pc, #276]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	e013      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e6>
 800298e:	2302      	movs	r3, #2
 8002990:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2202      	movs	r2, #2
 80029b8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80029bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80029c0:	fa92 f2a2 	rbit	r2, r2
 80029c4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80029c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f002 021f 	and.w	r2, r2, #31
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0af      	beq.n	8002948 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	21f8      	movs	r1, #248	; 0xf8
 80029fe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002a06:	fa91 f1a1 	rbit	r1, r1
 8002a0a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002a0e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a12:	fab1 f181 	clz	r1, r1
 8002a16:	b2c9      	uxtb	r1, r1
 8002a18:	408b      	lsls	r3, r1
 8002a1a:	4921      	ldr	r1, [pc, #132]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
 8002a20:	e06d      	b.n	8002afe <HAL_RCC_OscConfig+0x62e>
 8002a22:	2301      	movs	r3, #1
 8002a24:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002a34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fc9d 	bl	800138c <HAL_GetTick>
 8002a52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe fc98 	bl	800138c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d902      	bls.n	8002a6e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	f000 bd7e 	b.w	800356a <HAL_RCC_OscConfig+0x109a>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002a80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x5d4>
 8002a98:	4b01      	ldr	r3, [pc, #4]	; (8002aa0 <HAL_RCC_OscConfig+0x5d0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e016      	b.n	8002acc <HAL_RCC_OscConfig+0x5fc>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002abc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ac8:	4bbf      	ldr	r3, [pc, #764]	; (8002dc8 <HAL_RCC_OscConfig+0x8f8>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	2202      	movs	r2, #2
 8002ace:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002ad2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002ad6:	fa92 f2a2 	rbit	r2, r2
 8002ada:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002ade:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f042 0220 	orr.w	r2, r2, #32
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ac      	bne.n	8002a58 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8113 	beq.w	8002d3a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d07c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x74e>
 8002b24:	2301      	movs	r3, #1
 8002b26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002b36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	4ba2      	ldr	r3, [pc, #648]	; (8002dcc <HAL_RCC_OscConfig+0x8fc>)
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fc1d 	bl	800138c <HAL_GetTick>
 8002b52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fe fc18 	bl	800138c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d902      	bls.n	8002b6e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	f000 bcfe 	b.w	800356a <HAL_RCC_OscConfig+0x109a>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b78:	fa93 f2a3 	rbit	r2, r3
 8002b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b8e:	2202      	movs	r2, #2
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fa93 f2a3 	rbit	r2, r3
 8002bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002bcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b7e      	ldr	r3, [pc, #504]	; (8002dc8 <HAL_RCC_OscConfig+0x8f8>)
 8002bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002bda:	2102      	movs	r1, #2
 8002bdc:	6019      	str	r1, [r3, #0]
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fa93 f1a3 	rbit	r1, r3
 8002bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bf4:	6019      	str	r1, [r3, #0]
  return result;
 8002bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d09d      	beq.n	8002b58 <HAL_RCC_OscConfig+0x688>
 8002c1c:	e08d      	b.n	8002d3a <HAL_RCC_OscConfig+0x86a>
 8002c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c26:	2201      	movs	r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c3c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c40:	601a      	str	r2, [r3, #0]
  return result;
 8002c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <HAL_RCC_OscConfig+0x8fc>)
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe fb94 	bl	800138c <HAL_GetTick>
 8002c64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6a:	f7fe fb8f 	bl	800138c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	f000 bc75 	b.w	800356a <HAL_RCC_OscConfig+0x109a>
 8002c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c88:	2202      	movs	r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002cac:	2202      	movs	r2, #2
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ccc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	fa93 f2a3 	rbit	r2, r3
 8002ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002cea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <HAL_RCC_OscConfig+0x8f8>)
 8002cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	6019      	str	r1, [r3, #0]
 8002cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	fa93 f1a3 	rbit	r1, r3
 8002d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d12:	6019      	str	r1, [r3, #0]
  return result;
 8002d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d18:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d197      	bne.n	8002c6a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 81a5 	beq.w	800309a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_RCC_OscConfig+0x8f8>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d116      	bne.n	8002d90 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_OscConfig+0x8f8>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <HAL_RCC_OscConfig+0x8f8>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	61d3      	str	r3, [r2, #28]
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_RCC_OscConfig+0x8f8>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d88:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_RCC_OscConfig+0x900>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d121      	bne.n	8002de0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCC_OscConfig+0x900>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <HAL_RCC_OscConfig+0x900>)
 8002da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da8:	f7fe faf0 	bl	800138c <HAL_GetTick>
 8002dac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	e010      	b.n	8002dd4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db2:	f7fe faeb 	bl	800138c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d908      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e3d1      	b.n	800356a <HAL_RCC_OscConfig+0x109a>
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	10908120 	.word	0x10908120
 8002dd0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	4b8d      	ldr	r3, [pc, #564]	; (800300c <HAL_RCC_OscConfig+0xb3c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0e8      	beq.n	8002db2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x92e>
 8002df0:	4b87      	ldr	r3, [pc, #540]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4a86      	ldr	r2, [pc, #536]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6213      	str	r3, [r2, #32]
 8002dfc:	e035      	b.n	8002e6a <HAL_RCC_OscConfig+0x99a>
 8002dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x958>
 8002e0e:	4b80      	ldr	r3, [pc, #512]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a7f      	ldr	r2, [pc, #508]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a7c      	ldr	r2, [pc, #496]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e20:	f023 0304 	bic.w	r3, r3, #4
 8002e24:	6213      	str	r3, [r2, #32]
 8002e26:	e020      	b.n	8002e6a <HAL_RCC_OscConfig+0x99a>
 8002e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	d10c      	bne.n	8002e52 <HAL_RCC_OscConfig+0x982>
 8002e38:	4b75      	ldr	r3, [pc, #468]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	4a74      	ldr	r2, [pc, #464]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	6213      	str	r3, [r2, #32]
 8002e44:	4b72      	ldr	r3, [pc, #456]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4a71      	ldr	r2, [pc, #452]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	e00b      	b.n	8002e6a <HAL_RCC_OscConfig+0x99a>
 8002e52:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a6e      	ldr	r2, [pc, #440]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a6b      	ldr	r2, [pc, #428]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8081 	beq.w	8002f7e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7c:	f7fe fa86 	bl	800138c <HAL_GetTick>
 8002e80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	e00b      	b.n	8002e9e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fe fa81 	bl	800138c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e365      	b.n	800356a <HAL_RCC_OscConfig+0x109a>
 8002e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	fa93 f2a3 	rbit	r2, r3
 8002eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ebc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002eca:	2202      	movs	r2, #2
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fa93 f2a3 	rbit	r2, r3
 8002edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ee4:	601a      	str	r2, [r3, #0]
  return result;
 8002ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002eee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_OscConfig+0xa3a>
 8002f04:	4b42      	ldr	r3, [pc, #264]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	e013      	b.n	8002f32 <HAL_RCC_OscConfig+0xa62>
 8002f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f12:	2202      	movs	r2, #2
 8002f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f28:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	4b38      	ldr	r3, [pc, #224]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f36:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	6011      	str	r1, [r2, #0]
 8002f3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f42:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	fa92 f1a2 	rbit	r1, r2
 8002f4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f50:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002f54:	6011      	str	r1, [r2, #0]
  return result;
 8002f56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f5a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f002 021f 	and.w	r2, r2, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f202 	lsl.w	r2, r1, r2
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d084      	beq.n	8002e86 <HAL_RCC_OscConfig+0x9b6>
 8002f7c:	e083      	b.n	8003086 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fa05 	bl	800138c <HAL_GetTick>
 8002f82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe fa00 	bl	800138c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e2e4      	b.n	800356a <HAL_RCC_OscConfig+0x109a>
 8002fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002fa8:	2202      	movs	r2, #2
 8002faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002fcc:	2202      	movs	r2, #2
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002fe6:	601a      	str	r2, [r3, #0]
  return result;
 8002fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fec:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ff0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d106      	bne.n	8003014 <HAL_RCC_OscConfig+0xb44>
 8003006:	4b02      	ldr	r3, [pc, #8]	; (8003010 <HAL_RCC_OscConfig+0xb40>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	e017      	b.n	800303c <HAL_RCC_OscConfig+0xb6c>
 800300c:	40007000 	.word	0x40007000
 8003010:	40021000 	.word	0x40021000
 8003014:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003018:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800301c:	2202      	movs	r2, #2
 800301e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003024:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	fa93 f2a3 	rbit	r2, r3
 800302e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003032:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	4bb3      	ldr	r3, [pc, #716]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003040:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003044:	2102      	movs	r1, #2
 8003046:	6011      	str	r1, [r2, #0]
 8003048:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800304c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	fa92 f1a2 	rbit	r1, r2
 8003056:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800305a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800305e:	6011      	str	r1, [r2, #0]
  return result;
 8003060:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003064:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	fab2 f282 	clz	r2, r2
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	f002 021f 	and.w	r2, r2, #31
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d180      	bne.n	8002f88 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003086:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b9e      	ldr	r3, [pc, #632]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a9d      	ldr	r2, [pc, #628]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 825e 	beq.w	8003568 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ac:	4b96      	ldr	r3, [pc, #600]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	f000 821f 	beq.w	80034f8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	f040 8170 	bne.w	80033ac <HAL_RCC_OscConfig+0xedc>
 80030cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80030d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fa93 f2a3 	rbit	r2, r3
 80030e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030f0:	601a      	str	r2, [r3, #0]
  return result;
 80030f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030fa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003106:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	461a      	mov	r2, r3
 800310e:	2300      	movs	r3, #0
 8003110:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe f93b 	bl	800138c <HAL_GetTick>
 8003116:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311a:	e009      	b.n	8003130 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe f936 	bl	800138c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e21c      	b.n	800356a <HAL_RCC_OscConfig+0x109a>
 8003130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003134:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003142:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003150:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003154:	601a      	str	r2, [r3, #0]
  return result;
 8003156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800315e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <HAL_RCC_OscConfig+0xcaa>
 8003174:	4b64      	ldr	r3, [pc, #400]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	e027      	b.n	80031ca <HAL_RCC_OscConfig+0xcfa>
 800317a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80031a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fa93 f2a3 	rbit	r2, r3
 80031bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	4b50      	ldr	r3, [pc, #320]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80031d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031d6:	6011      	str	r1, [r2, #0]
 80031d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031dc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	fa92 f1a2 	rbit	r1, r2
 80031e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031ea:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80031ee:	6011      	str	r1, [r2, #0]
  return result;
 80031f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031f4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	fab2 f282 	clz	r2, r2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f042 0220 	orr.w	r2, r2, #32
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f002 021f 	and.w	r2, r2, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d182      	bne.n	800311c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003216:	4b3c      	ldr	r3, [pc, #240]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	f023 020f 	bic.w	r2, r3, #15
 800321e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003222:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	4937      	ldr	r1, [pc, #220]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 800322c:	4313      	orrs	r3, r2
 800322e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003230:	4b35      	ldr	r3, [pc, #212]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a19      	ldr	r1, [r3, #32]
 8003244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003248:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	430b      	orrs	r3, r1
 8003252:	492d      	ldr	r1, [pc, #180]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
 8003258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800325c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003260:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003278:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800327c:	601a      	str	r2, [r3, #0]
  return result;
 800327e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003282:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003286:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003292:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	461a      	mov	r2, r3
 800329a:	2301      	movs	r3, #1
 800329c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe f875 	bl	800138c <HAL_GetTick>
 80032a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a6:	e009      	b.n	80032bc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe f870 	bl	800138c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e156      	b.n	800356a <HAL_RCC_OscConfig+0x109a>
 80032bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80032c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	fa93 f2a3 	rbit	r2, r3
 80032d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032dc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80032e0:	601a      	str	r2, [r3, #0]
  return result;
 80032e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80032ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCC_OscConfig+0xe3c>
 8003300:	4b01      	ldr	r3, [pc, #4]	; (8003308 <HAL_RCC_OscConfig+0xe38>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	e02a      	b.n	800335c <HAL_RCC_OscConfig+0xe8c>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003310:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800332c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003336:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800333a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003344:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	fa93 f2a3 	rbit	r2, r3
 800334e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003352:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	4b86      	ldr	r3, [pc, #536]	; (8003574 <HAL_RCC_OscConfig+0x10a4>)
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003360:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003364:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003368:	6011      	str	r1, [r2, #0]
 800336a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800336e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	fa92 f1a2 	rbit	r1, r2
 8003378:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800337c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003380:	6011      	str	r1, [r2, #0]
  return result;
 8003382:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003386:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	fab2 f282 	clz	r2, r2
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f042 0220 	orr.w	r2, r2, #32
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	f002 021f 	and.w	r2, r2, #31
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f202 	lsl.w	r2, r1, r2
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f43f af7f 	beq.w	80032a8 <HAL_RCC_OscConfig+0xdd8>
 80033aa:	e0dd      	b.n	8003568 <HAL_RCC_OscConfig+0x1098>
 80033ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	fa93 f2a3 	rbit	r2, r3
 80033c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80033d0:	601a      	str	r2, [r3, #0]
  return result;
 80033d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80033da:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	461a      	mov	r2, r3
 80033ee:	2300      	movs	r3, #0
 80033f0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fd ffcb 	bl	800138c <HAL_GetTick>
 80033f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fa:	e009      	b.n	8003410 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fd ffc6 	bl	800138c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e0ac      	b.n	800356a <HAL_RCC_OscConfig+0x109a>
 8003410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003414:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003422:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	fa93 f2a3 	rbit	r2, r3
 800342c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003430:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003434:	601a      	str	r2, [r3, #0]
  return result;
 8003436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800343e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d102      	bne.n	800345a <HAL_RCC_OscConfig+0xf8a>
 8003454:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_RCC_OscConfig+0x10a4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	e027      	b.n	80034aa <HAL_RCC_OscConfig+0xfda>
 800345a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800346c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	fa93 f2a3 	rbit	r2, r3
 8003476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003484:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003492:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fa93 f2a3 	rbit	r2, r3
 800349c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	4b33      	ldr	r3, [pc, #204]	; (8003574 <HAL_RCC_OscConfig+0x10a4>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034b6:	6011      	str	r1, [r2, #0]
 80034b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	fa92 f1a2 	rbit	r1, r2
 80034c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034ca:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80034ce:	6011      	str	r1, [r2, #0]
  return result;
 80034d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034d4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	fab2 f282 	clz	r2, r2
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f042 0220 	orr.w	r2, r2, #32
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f002 021f 	and.w	r2, r2, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d182      	bne.n	80033fc <HAL_RCC_OscConfig+0xf2c>
 80034f6:	e037      	b.n	8003568 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e02e      	b.n	800356a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCC_OscConfig+0x10a4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003514:	4b17      	ldr	r3, [pc, #92]	; (8003574 <HAL_RCC_OscConfig+0x10a4>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800351c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003520:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003528:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	429a      	cmp	r2, r3
 8003532:	d117      	bne.n	8003564 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003534:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003538:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800353c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003540:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003548:	429a      	cmp	r2, r3
 800354a:	d10b      	bne.n	8003564 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800354c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003550:	f003 020f 	and.w	r2, r3, #15
 8003554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003558:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b09e      	sub	sp, #120	; 0x78
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e162      	b.n	8003856 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b90      	ldr	r3, [pc, #576]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d910      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b8d      	ldr	r3, [pc, #564]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0207 	bic.w	r2, r3, #7
 80035a6:	498b      	ldr	r1, [pc, #556]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b89      	ldr	r3, [pc, #548]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e14a      	b.n	8003856 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b82      	ldr	r3, [pc, #520]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	497f      	ldr	r1, [pc, #508]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80dc 	beq.w	80037a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d13c      	bne.n	800366e <HAL_RCC_ClockConfig+0xf6>
 80035f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d102      	bne.n	800361e <HAL_RCC_ClockConfig+0xa6>
 8003618:	4b6f      	ldr	r3, [pc, #444]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	e00f      	b.n	800363e <HAL_RCC_ClockConfig+0xc6>
 800361e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003622:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	667b      	str	r3, [r7, #100]	; 0x64
 800362c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003630:	663b      	str	r3, [r7, #96]	; 0x60
 8003632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800363a:	4b67      	ldr	r3, [pc, #412]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003642:	65ba      	str	r2, [r7, #88]	; 0x58
 8003644:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003646:	fa92 f2a2 	rbit	r2, r2
 800364a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800364c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800364e:	fab2 f282 	clz	r2, r2
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	f042 0220 	orr.w	r2, r2, #32
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	f002 021f 	and.w	r2, r2, #31
 800365e:	2101      	movs	r1, #1
 8003660:	fa01 f202 	lsl.w	r2, r1, r2
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d17b      	bne.n	8003762 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e0f3      	b.n	8003856 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d13c      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x178>
 8003676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x128>
 800369a:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	e00f      	b.n	80036c0 <HAL_RCC_ClockConfig+0x148>
 80036a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	647b      	str	r3, [r7, #68]	; 0x44
 80036ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b2:	643b      	str	r3, [r7, #64]	; 0x40
 80036b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036bc:	4b46      	ldr	r3, [pc, #280]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80036c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c8:	fa92 f2a2 	rbit	r2, r2
 80036cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d0:	fab2 f282 	clz	r2, r2
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	f042 0220 	orr.w	r2, r2, #32
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f002 021f 	and.w	r2, r2, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f202 	lsl.w	r2, r1, r2
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d13a      	bne.n	8003762 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0b2      	b.n	8003856 <HAL_RCC_ClockConfig+0x2de>
 80036f0:	2302      	movs	r3, #2
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d102      	bne.n	8003718 <HAL_RCC_ClockConfig+0x1a0>
 8003712:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	e00d      	b.n	8003734 <HAL_RCC_ClockConfig+0x1bc>
 8003718:	2302      	movs	r3, #2
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	2302      	movs	r3, #2
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2202      	movs	r2, #2
 8003736:	61ba      	str	r2, [r7, #24]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	fa92 f2a2 	rbit	r2, r2
 800373e:	617a      	str	r2, [r7, #20]
  return result;
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	fab2 f282 	clz	r2, r2
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	f042 0220 	orr.w	r2, r2, #32
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f002 021f 	and.w	r2, r2, #31
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f202 	lsl.w	r2, r1, r2
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e079      	b.n	8003856 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	491a      	ldr	r1, [pc, #104]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003774:	f7fd fe0a 	bl	800138c <HAL_GetTick>
 8003778:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fd fe06 	bl	800138c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e061      	b.n	8003856 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d214      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 0207 	bic.w	r2, r3, #7
 80037ba:	4906      	ldr	r1, [pc, #24]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e040      	b.n	8003856 <HAL_RCC_ClockConfig+0x2de>
 80037d4:	40022000 	.word	0x40022000
 80037d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_RCC_ClockConfig+0x2e8>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	491a      	ldr	r1, [pc, #104]	; (8003860 <HAL_RCC_ClockConfig+0x2e8>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x2e8>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4912      	ldr	r1, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x2e8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800381a:	f000 f829 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800381e:	4601      	mov	r1, r0
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_RCC_ClockConfig+0x2e8>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003828:	22f0      	movs	r2, #240	; 0xf0
 800382a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	fa92 f2a2 	rbit	r2, r2
 8003832:	60fa      	str	r2, [r7, #12]
  return result;
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	fab2 f282 	clz	r2, r2
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	40d3      	lsrs	r3, r2
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x2ec>)
 8003840:	5cd3      	ldrb	r3, [r2, r3]
 8003842:	fa21 f303 	lsr.w	r3, r1, r3
 8003846:	4a08      	ldr	r2, [pc, #32]	; (8003868 <HAL_RCC_ClockConfig+0x2f0>)
 8003848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_RCC_ClockConfig+0x2f4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fd58 	bl	8001304 <HAL_InitTick>
  
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3778      	adds	r7, #120	; 0x78
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	08007138 	.word	0x08007138
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b08b      	sub	sp, #44	; 0x2c
 8003874:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800388a:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b04      	cmp	r3, #4
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x30>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x36>
 800389e:	e03f      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038a2:	623b      	str	r3, [r7, #32]
      break;
 80038a4:	e03f      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	fa92 f2a2 	rbit	r2, r2
 80038b8:	607a      	str	r2, [r7, #4]
  return result;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	fab2 f282 	clz	r2, r2
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	40d3      	lsrs	r3, r2
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_RCC_GetSysClockFreq+0xcc>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	220f      	movs	r2, #15
 80038d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	fa92 f2a2 	rbit	r2, r2
 80038dc:	60fa      	str	r2, [r7, #12]
  return result;
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	fab2 f282 	clz	r2, r2
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	40d3      	lsrs	r3, r2
 80038e8:	4a15      	ldr	r2, [pc, #84]	; (8003940 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	e007      	b.n	800391a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc8>)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	623b      	str	r3, [r7, #32]
      break;
 800391e:	e002      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003922:	623b      	str	r3, [r7, #32]
      break;
 8003924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003926:	6a3b      	ldr	r3, [r7, #32]
}
 8003928:	4618      	mov	r0, r3
 800392a:	372c      	adds	r7, #44	; 0x2c
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40021000 	.word	0x40021000
 8003938:	007a1200 	.word	0x007a1200
 800393c:	08007150 	.word	0x08007150
 8003940:	08007160 	.word	0x08007160

08003944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_RCC_GetHCLKFreq+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003962:	f7ff ffef 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003966:	4601      	mov	r1, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003970:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003974:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	fa92 f2a2 	rbit	r2, r2
 800397c:	603a      	str	r2, [r7, #0]
  return result;
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	fab2 f282 	clz	r2, r2
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	40d3      	lsrs	r3, r2
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_RCC_GetPCLK1Freq+0x40>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	08007148 	.word	0x08007148

080039a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039a6:	f7ff ffcd 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 80039aa:	4601      	mov	r1, r0
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	fa92 f2a2 	rbit	r2, r2
 80039c0:	603a      	str	r2, [r7, #0]
  return result;
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	fab2 f282 	clz	r2, r2
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	40d3      	lsrs	r3, r2
 80039cc:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039ce:	5cd3      	ldrb	r3, [r2, r3]
 80039d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000
 80039e0:	08007148 	.word	0x08007148

080039e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b092      	sub	sp, #72	; 0x48
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80d4 	beq.w	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a08:	4b4e      	ldr	r3, [pc, #312]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10e      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b4b      	ldr	r3, [pc, #300]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	4a4a      	ldr	r2, [pc, #296]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	61d3      	str	r3, [r2, #28]
 8003a20:	4b48      	ldr	r3, [pc, #288]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b45      	ldr	r3, [pc, #276]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d118      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3e:	4b42      	ldr	r3, [pc, #264]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a41      	ldr	r2, [pc, #260]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4a:	f7fd fc9f 	bl	800138c <HAL_GetTick>
 8003a4e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	e008      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a52:	f7fd fc9b 	bl	800138c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b64      	cmp	r3, #100	; 0x64
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e1d6      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a70:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a78:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8084 	beq.w	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d07c      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a90:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2301      	movs	r3, #1
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	461a      	mov	r2, r3
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d04b      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fd fc4b 	bl	800138c <HAL_GetTick>
 8003af6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fd fc47 	bl	800138c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e180      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b10:	2302      	movs	r3, #2
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	61fb      	str	r3, [r7, #28]
  return result;
 8003b28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d108      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b3e:	4b01      	ldr	r3, [pc, #4]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	e00d      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40007000 	.word	0x40007000
 8003b4c:	10908100 	.word	0x10908100
 8003b50:	2302      	movs	r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	4b9a      	ldr	r3, [pc, #616]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2202      	movs	r2, #2
 8003b62:	613a      	str	r2, [r7, #16]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	fa92 f2a2 	rbit	r2, r2
 8003b6a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	fab2 f282 	clz	r2, r2
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	f002 021f 	and.w	r2, r2, #31
 8003b7e:	2101      	movs	r1, #1
 8003b80:	fa01 f202 	lsl.w	r2, r1, r2
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0b7      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b8a:	4b8f      	ldr	r3, [pc, #572]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	498c      	ldr	r1, [pc, #560]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba4:	4b88      	ldr	r3, [pc, #544]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	4a87      	ldr	r2, [pc, #540]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bbc:	4b82      	ldr	r3, [pc, #520]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	f023 0203 	bic.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	497f      	ldr	r1, [pc, #508]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bda:	4b7b      	ldr	r3, [pc, #492]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4978      	ldr	r1, [pc, #480]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bf8:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	4970      	ldr	r1, [pc, #448]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c16:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f023 0210 	bic.w	r2, r3, #16
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4969      	ldr	r1, [pc, #420]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c34:	4b64      	ldr	r3, [pc, #400]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	4961      	ldr	r1, [pc, #388]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c52:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f023 0220 	bic.w	r2, r3, #32
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	495a      	ldr	r1, [pc, #360]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c70:	4b55      	ldr	r3, [pc, #340]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	4952      	ldr	r1, [pc, #328]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c8e:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	494b      	ldr	r1, [pc, #300]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cac:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	4943      	ldr	r1, [pc, #268]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cca:	4b3f      	ldr	r3, [pc, #252]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	493c      	ldr	r1, [pc, #240]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ce8:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	4934      	ldr	r1, [pc, #208]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	492d      	ldr	r1, [pc, #180]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d24:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	4925      	ldr	r1, [pc, #148]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d42:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	491e      	ldr	r1, [pc, #120]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	4916      	ldr	r1, [pc, #88]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	490f      	ldr	r1, [pc, #60]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00c      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003dba:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	e002      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dce:	4913      	ldr	r1, [pc, #76]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003de0:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	490b      	ldr	r1, [pc, #44]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	4904      	ldr	r1, [pc, #16]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3748      	adds	r7, #72	; 0x48
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000

08003e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e040      	b.n	8003eb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd f8da 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2224      	movs	r2, #36	; 0x24
 8003e4c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8b6 	bl	8003fd0 <UART_SetConfig>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e022      	b.n	8003eb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fa7e 	bl	8004378 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fb05 	bl	80044bc <UART_CheckIdleState>
 8003eb2:	4603      	mov	r3, r0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d178      	bne.n	8003fc6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_UART_Transmit+0x24>
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e071      	b.n	8003fc8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2221      	movs	r2, #33	; 0x21
 8003ef0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ef2:	f7fd fa4b 	bl	800138c <HAL_GetTick>
 8003ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f10:	d108      	bne.n	8003f24 <HAL_UART_Transmit+0x68>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	e003      	b.n	8003f2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f2c:	e030      	b.n	8003f90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2200      	movs	r2, #0
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fb67 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e03c      	b.n	8003fc8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	881a      	ldrh	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f60:	b292      	uxth	r2, r2
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	3302      	adds	r3, #2
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e008      	b.n	8003f7e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b292      	uxth	r2, r2
 8003f76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1c8      	bne.n	8003f2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2140      	movs	r1, #64	; 0x40
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fb30 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e005      	b.n	8003fc8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
  }
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b92      	ldr	r3, [pc, #584]	; (8004244 <UART_SetConfig+0x274>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	430b      	orrs	r3, r1
 8004006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a80      	ldr	r2, [pc, #512]	; (8004248 <UART_SetConfig+0x278>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d120      	bne.n	800408e <UART_SetConfig+0xbe>
 800404c:	4b7f      	ldr	r3, [pc, #508]	; (800424c <UART_SetConfig+0x27c>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b03      	cmp	r3, #3
 8004056:	d817      	bhi.n	8004088 <UART_SetConfig+0xb8>
 8004058:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <UART_SetConfig+0x90>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	08004071 	.word	0x08004071
 8004064:	0800407d 	.word	0x0800407d
 8004068:	08004083 	.word	0x08004083
 800406c:	08004077 	.word	0x08004077
 8004070:	2301      	movs	r3, #1
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e0b5      	b.n	80041e2 <UART_SetConfig+0x212>
 8004076:	2302      	movs	r3, #2
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e0b2      	b.n	80041e2 <UART_SetConfig+0x212>
 800407c:	2304      	movs	r3, #4
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e0af      	b.n	80041e2 <UART_SetConfig+0x212>
 8004082:	2308      	movs	r3, #8
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e0ac      	b.n	80041e2 <UART_SetConfig+0x212>
 8004088:	2310      	movs	r3, #16
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e0a9      	b.n	80041e2 <UART_SetConfig+0x212>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a6f      	ldr	r2, [pc, #444]	; (8004250 <UART_SetConfig+0x280>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d124      	bne.n	80040e2 <UART_SetConfig+0x112>
 8004098:	4b6c      	ldr	r3, [pc, #432]	; (800424c <UART_SetConfig+0x27c>)
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040a4:	d011      	beq.n	80040ca <UART_SetConfig+0xfa>
 80040a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040aa:	d817      	bhi.n	80040dc <UART_SetConfig+0x10c>
 80040ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b0:	d011      	beq.n	80040d6 <UART_SetConfig+0x106>
 80040b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b6:	d811      	bhi.n	80040dc <UART_SetConfig+0x10c>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <UART_SetConfig+0xf4>
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d006      	beq.n	80040d0 <UART_SetConfig+0x100>
 80040c2:	e00b      	b.n	80040dc <UART_SetConfig+0x10c>
 80040c4:	2300      	movs	r3, #0
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e08b      	b.n	80041e2 <UART_SetConfig+0x212>
 80040ca:	2302      	movs	r3, #2
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e088      	b.n	80041e2 <UART_SetConfig+0x212>
 80040d0:	2304      	movs	r3, #4
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e085      	b.n	80041e2 <UART_SetConfig+0x212>
 80040d6:	2308      	movs	r3, #8
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e082      	b.n	80041e2 <UART_SetConfig+0x212>
 80040dc:	2310      	movs	r3, #16
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e07f      	b.n	80041e2 <UART_SetConfig+0x212>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a5b      	ldr	r2, [pc, #364]	; (8004254 <UART_SetConfig+0x284>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d124      	bne.n	8004136 <UART_SetConfig+0x166>
 80040ec:	4b57      	ldr	r3, [pc, #348]	; (800424c <UART_SetConfig+0x27c>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80040f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040f8:	d011      	beq.n	800411e <UART_SetConfig+0x14e>
 80040fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040fe:	d817      	bhi.n	8004130 <UART_SetConfig+0x160>
 8004100:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004104:	d011      	beq.n	800412a <UART_SetConfig+0x15a>
 8004106:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800410a:	d811      	bhi.n	8004130 <UART_SetConfig+0x160>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <UART_SetConfig+0x148>
 8004110:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004114:	d006      	beq.n	8004124 <UART_SetConfig+0x154>
 8004116:	e00b      	b.n	8004130 <UART_SetConfig+0x160>
 8004118:	2300      	movs	r3, #0
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e061      	b.n	80041e2 <UART_SetConfig+0x212>
 800411e:	2302      	movs	r3, #2
 8004120:	77fb      	strb	r3, [r7, #31]
 8004122:	e05e      	b.n	80041e2 <UART_SetConfig+0x212>
 8004124:	2304      	movs	r3, #4
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e05b      	b.n	80041e2 <UART_SetConfig+0x212>
 800412a:	2308      	movs	r3, #8
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e058      	b.n	80041e2 <UART_SetConfig+0x212>
 8004130:	2310      	movs	r3, #16
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e055      	b.n	80041e2 <UART_SetConfig+0x212>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a47      	ldr	r2, [pc, #284]	; (8004258 <UART_SetConfig+0x288>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d124      	bne.n	800418a <UART_SetConfig+0x1ba>
 8004140:	4b42      	ldr	r3, [pc, #264]	; (800424c <UART_SetConfig+0x27c>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004148:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800414c:	d011      	beq.n	8004172 <UART_SetConfig+0x1a2>
 800414e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004152:	d817      	bhi.n	8004184 <UART_SetConfig+0x1b4>
 8004154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004158:	d011      	beq.n	800417e <UART_SetConfig+0x1ae>
 800415a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800415e:	d811      	bhi.n	8004184 <UART_SetConfig+0x1b4>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <UART_SetConfig+0x19c>
 8004164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004168:	d006      	beq.n	8004178 <UART_SetConfig+0x1a8>
 800416a:	e00b      	b.n	8004184 <UART_SetConfig+0x1b4>
 800416c:	2300      	movs	r3, #0
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e037      	b.n	80041e2 <UART_SetConfig+0x212>
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e034      	b.n	80041e2 <UART_SetConfig+0x212>
 8004178:	2304      	movs	r3, #4
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e031      	b.n	80041e2 <UART_SetConfig+0x212>
 800417e:	2308      	movs	r3, #8
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e02e      	b.n	80041e2 <UART_SetConfig+0x212>
 8004184:	2310      	movs	r3, #16
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e02b      	b.n	80041e2 <UART_SetConfig+0x212>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a33      	ldr	r2, [pc, #204]	; (800425c <UART_SetConfig+0x28c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d124      	bne.n	80041de <UART_SetConfig+0x20e>
 8004194:	4b2d      	ldr	r3, [pc, #180]	; (800424c <UART_SetConfig+0x27c>)
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800419c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041a0:	d011      	beq.n	80041c6 <UART_SetConfig+0x1f6>
 80041a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041a6:	d817      	bhi.n	80041d8 <UART_SetConfig+0x208>
 80041a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041ac:	d011      	beq.n	80041d2 <UART_SetConfig+0x202>
 80041ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041b2:	d811      	bhi.n	80041d8 <UART_SetConfig+0x208>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <UART_SetConfig+0x1f0>
 80041b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041bc:	d006      	beq.n	80041cc <UART_SetConfig+0x1fc>
 80041be:	e00b      	b.n	80041d8 <UART_SetConfig+0x208>
 80041c0:	2300      	movs	r3, #0
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e00d      	b.n	80041e2 <UART_SetConfig+0x212>
 80041c6:	2302      	movs	r3, #2
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e00a      	b.n	80041e2 <UART_SetConfig+0x212>
 80041cc:	2304      	movs	r3, #4
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e007      	b.n	80041e2 <UART_SetConfig+0x212>
 80041d2:	2308      	movs	r3, #8
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e004      	b.n	80041e2 <UART_SetConfig+0x212>
 80041d8:	2310      	movs	r3, #16
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e001      	b.n	80041e2 <UART_SetConfig+0x212>
 80041de:	2310      	movs	r3, #16
 80041e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ea:	d16b      	bne.n	80042c4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80041ec:	7ffb      	ldrb	r3, [r7, #31]
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d838      	bhi.n	8004264 <UART_SetConfig+0x294>
 80041f2:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0x228>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	08004225 	.word	0x08004225
 8004200:	0800422d 	.word	0x0800422d
 8004204:	08004265 	.word	0x08004265
 8004208:	08004233 	.word	0x08004233
 800420c:	08004265 	.word	0x08004265
 8004210:	08004265 	.word	0x08004265
 8004214:	08004265 	.word	0x08004265
 8004218:	0800423b 	.word	0x0800423b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800421c:	f7ff fb9e 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8004220:	61b8      	str	r0, [r7, #24]
        break;
 8004222:	e024      	b.n	800426e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004224:	f7ff fbbc 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 8004228:	61b8      	str	r0, [r7, #24]
        break;
 800422a:	e020      	b.n	800426e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <UART_SetConfig+0x290>)
 800422e:	61bb      	str	r3, [r7, #24]
        break;
 8004230:	e01d      	b.n	800426e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004232:	f7ff fb1d 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8004236:	61b8      	str	r0, [r7, #24]
        break;
 8004238:	e019      	b.n	800426e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423e:	61bb      	str	r3, [r7, #24]
        break;
 8004240:	e015      	b.n	800426e <UART_SetConfig+0x29e>
 8004242:	bf00      	nop
 8004244:	efff69f3 	.word	0xefff69f3
 8004248:	40013800 	.word	0x40013800
 800424c:	40021000 	.word	0x40021000
 8004250:	40004400 	.word	0x40004400
 8004254:	40004800 	.word	0x40004800
 8004258:	40004c00 	.word	0x40004c00
 800425c:	40005000 	.word	0x40005000
 8004260:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	77bb      	strb	r3, [r7, #30]
        break;
 800426c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d073      	beq.n	800435c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	005a      	lsls	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	441a      	add	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b0f      	cmp	r3, #15
 800428e:	d916      	bls.n	80042be <UART_SetConfig+0x2ee>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004296:	d212      	bcs.n	80042be <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f023 030f 	bic.w	r3, r3, #15
 80042a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	89fb      	ldrh	r3, [r7, #14]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	89fa      	ldrh	r2, [r7, #14]
 80042ba:	60da      	str	r2, [r3, #12]
 80042bc:	e04e      	b.n	800435c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	77bb      	strb	r3, [r7, #30]
 80042c2:	e04b      	b.n	800435c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042c4:	7ffb      	ldrb	r3, [r7, #31]
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d827      	bhi.n	800431a <UART_SetConfig+0x34a>
 80042ca:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <UART_SetConfig+0x300>)
 80042cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	080042fd 	.word	0x080042fd
 80042d8:	08004305 	.word	0x08004305
 80042dc:	0800431b 	.word	0x0800431b
 80042e0:	0800430b 	.word	0x0800430b
 80042e4:	0800431b 	.word	0x0800431b
 80042e8:	0800431b 	.word	0x0800431b
 80042ec:	0800431b 	.word	0x0800431b
 80042f0:	08004313 	.word	0x08004313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f4:	f7ff fb32 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 80042f8:	61b8      	str	r0, [r7, #24]
        break;
 80042fa:	e013      	b.n	8004324 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042fc:	f7ff fb50 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 8004300:	61b8      	str	r0, [r7, #24]
        break;
 8004302:	e00f      	b.n	8004324 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <UART_SetConfig+0x3a4>)
 8004306:	61bb      	str	r3, [r7, #24]
        break;
 8004308:	e00c      	b.n	8004324 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430a:	f7ff fab1 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800430e:	61b8      	str	r0, [r7, #24]
        break;
 8004310:	e008      	b.n	8004324 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004316:	61bb      	str	r3, [r7, #24]
        break;
 8004318:	e004      	b.n	8004324 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	77bb      	strb	r3, [r7, #30]
        break;
 8004322:	bf00      	nop
    }

    if (pclk != 0U)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d018      	beq.n	800435c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	085a      	lsrs	r2, r3, #1
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	441a      	add	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b0f      	cmp	r3, #15
 8004342:	d909      	bls.n	8004358 <UART_SetConfig+0x388>
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434a:	d205      	bcs.n	8004358 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	e001      	b.n	800435c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004368:	7fbb      	ldrb	r3, [r7, #30]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	007a1200 	.word	0x007a1200

08004378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01a      	beq.n	800448e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004476:	d10a      	bne.n	800448e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]
  }
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b098      	sub	sp, #96	; 0x60
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044cc:	f7fc ff5e 	bl	800138c <HAL_GetTick>
 80044d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d12e      	bne.n	800453e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e8:	2200      	movs	r2, #0
 80044ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f88c 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d021      	beq.n	800453e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450e:	653b      	str	r3, [r7, #80]	; 0x50
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004518:	647b      	str	r3, [r7, #68]	; 0x44
 800451a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800451e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e062      	b.n	8004604 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d149      	bne.n	80045e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800454c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f856 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d03c      	beq.n	80045e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	623b      	str	r3, [r7, #32]
   return(result);
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
 8004586:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800458a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e6      	bne.n	8004566 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045b8:	61fa      	str	r2, [r7, #28]
 80045ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	69b9      	ldr	r1, [r7, #24]
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	617b      	str	r3, [r7, #20]
   return(result);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e011      	b.n	8004604 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3758      	adds	r7, #88	; 0x58
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461c:	e049      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d045      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7fc feb1 	bl	800138c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <UART_WaitOnFlagUntilTimeout+0x30>
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e048      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	d031      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b08      	cmp	r3, #8
 800465a:	d110      	bne.n	800467e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2208      	movs	r2, #8
 8004662:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f838 	bl	80046da <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2208      	movs	r2, #8
 800466e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e029      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468c:	d111      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f81e 	bl	80046da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e00f      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d0a6      	beq.n	800461e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b095      	sub	sp, #84	; 0x54
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004700:	643b      	str	r3, [r7, #64]	; 0x40
 8004702:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e6      	bne.n	80046e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	61fb      	str	r3, [r7, #28]
   return(result);
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	64bb      	str	r3, [r7, #72]	; 0x48
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3308      	adds	r3, #8
 8004732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004734:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e5      	bne.n	8004714 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474c:	2b01      	cmp	r3, #1
 800474e:	d118      	bne.n	8004782 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	60bb      	str	r3, [r7, #8]
   return(result);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f023 0310 	bic.w	r3, r3, #16
 8004764:	647b      	str	r3, [r7, #68]	; 0x44
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6979      	ldr	r1, [r7, #20]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	613b      	str	r3, [r7, #16]
   return(result);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e6      	bne.n	8004750 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004796:	bf00      	nop
 8004798:	3754      	adds	r7, #84	; 0x54
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <__cvt>:
 80047a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a6:	ec55 4b10 	vmov	r4, r5, d0
 80047aa:	2d00      	cmp	r5, #0
 80047ac:	460e      	mov	r6, r1
 80047ae:	4619      	mov	r1, r3
 80047b0:	462b      	mov	r3, r5
 80047b2:	bfbb      	ittet	lt
 80047b4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80047b8:	461d      	movlt	r5, r3
 80047ba:	2300      	movge	r3, #0
 80047bc:	232d      	movlt	r3, #45	; 0x2d
 80047be:	700b      	strb	r3, [r1, #0]
 80047c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047c2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80047c6:	4691      	mov	r9, r2
 80047c8:	f023 0820 	bic.w	r8, r3, #32
 80047cc:	bfbc      	itt	lt
 80047ce:	4622      	movlt	r2, r4
 80047d0:	4614      	movlt	r4, r2
 80047d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047d6:	d005      	beq.n	80047e4 <__cvt+0x42>
 80047d8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80047dc:	d100      	bne.n	80047e0 <__cvt+0x3e>
 80047de:	3601      	adds	r6, #1
 80047e0:	2102      	movs	r1, #2
 80047e2:	e000      	b.n	80047e6 <__cvt+0x44>
 80047e4:	2103      	movs	r1, #3
 80047e6:	ab03      	add	r3, sp, #12
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	ab02      	add	r3, sp, #8
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	ec45 4b10 	vmov	d0, r4, r5
 80047f2:	4653      	mov	r3, sl
 80047f4:	4632      	mov	r2, r6
 80047f6:	f000 fe4b 	bl	8005490 <_dtoa_r>
 80047fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047fe:	4607      	mov	r7, r0
 8004800:	d102      	bne.n	8004808 <__cvt+0x66>
 8004802:	f019 0f01 	tst.w	r9, #1
 8004806:	d022      	beq.n	800484e <__cvt+0xac>
 8004808:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800480c:	eb07 0906 	add.w	r9, r7, r6
 8004810:	d110      	bne.n	8004834 <__cvt+0x92>
 8004812:	783b      	ldrb	r3, [r7, #0]
 8004814:	2b30      	cmp	r3, #48	; 0x30
 8004816:	d10a      	bne.n	800482e <__cvt+0x8c>
 8004818:	2200      	movs	r2, #0
 800481a:	2300      	movs	r3, #0
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fc f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004824:	b918      	cbnz	r0, 800482e <__cvt+0x8c>
 8004826:	f1c6 0601 	rsb	r6, r6, #1
 800482a:	f8ca 6000 	str.w	r6, [sl]
 800482e:	f8da 3000 	ldr.w	r3, [sl]
 8004832:	4499      	add	r9, r3
 8004834:	2200      	movs	r2, #0
 8004836:	2300      	movs	r3, #0
 8004838:	4620      	mov	r0, r4
 800483a:	4629      	mov	r1, r5
 800483c:	f7fc f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004840:	b108      	cbz	r0, 8004846 <__cvt+0xa4>
 8004842:	f8cd 900c 	str.w	r9, [sp, #12]
 8004846:	2230      	movs	r2, #48	; 0x30
 8004848:	9b03      	ldr	r3, [sp, #12]
 800484a:	454b      	cmp	r3, r9
 800484c:	d307      	bcc.n	800485e <__cvt+0xbc>
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004852:	1bdb      	subs	r3, r3, r7
 8004854:	4638      	mov	r0, r7
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	b004      	add	sp, #16
 800485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485e:	1c59      	adds	r1, r3, #1
 8004860:	9103      	str	r1, [sp, #12]
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e7f0      	b.n	8004848 <__cvt+0xa6>

08004866 <__exponent>:
 8004866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004868:	4603      	mov	r3, r0
 800486a:	2900      	cmp	r1, #0
 800486c:	bfb8      	it	lt
 800486e:	4249      	neglt	r1, r1
 8004870:	f803 2b02 	strb.w	r2, [r3], #2
 8004874:	bfb4      	ite	lt
 8004876:	222d      	movlt	r2, #45	; 0x2d
 8004878:	222b      	movge	r2, #43	; 0x2b
 800487a:	2909      	cmp	r1, #9
 800487c:	7042      	strb	r2, [r0, #1]
 800487e:	dd2a      	ble.n	80048d6 <__exponent+0x70>
 8004880:	f10d 0207 	add.w	r2, sp, #7
 8004884:	4617      	mov	r7, r2
 8004886:	260a      	movs	r6, #10
 8004888:	4694      	mov	ip, r2
 800488a:	fb91 f5f6 	sdiv	r5, r1, r6
 800488e:	fb06 1415 	mls	r4, r6, r5, r1
 8004892:	3430      	adds	r4, #48	; 0x30
 8004894:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004898:	460c      	mov	r4, r1
 800489a:	2c63      	cmp	r4, #99	; 0x63
 800489c:	f102 32ff 	add.w	r2, r2, #4294967295
 80048a0:	4629      	mov	r1, r5
 80048a2:	dcf1      	bgt.n	8004888 <__exponent+0x22>
 80048a4:	3130      	adds	r1, #48	; 0x30
 80048a6:	f1ac 0402 	sub.w	r4, ip, #2
 80048aa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048ae:	1c41      	adds	r1, r0, #1
 80048b0:	4622      	mov	r2, r4
 80048b2:	42ba      	cmp	r2, r7
 80048b4:	d30a      	bcc.n	80048cc <__exponent+0x66>
 80048b6:	f10d 0209 	add.w	r2, sp, #9
 80048ba:	eba2 020c 	sub.w	r2, r2, ip
 80048be:	42bc      	cmp	r4, r7
 80048c0:	bf88      	it	hi
 80048c2:	2200      	movhi	r2, #0
 80048c4:	4413      	add	r3, r2
 80048c6:	1a18      	subs	r0, r3, r0
 80048c8:	b003      	add	sp, #12
 80048ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80048d0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80048d4:	e7ed      	b.n	80048b2 <__exponent+0x4c>
 80048d6:	2330      	movs	r3, #48	; 0x30
 80048d8:	3130      	adds	r1, #48	; 0x30
 80048da:	7083      	strb	r3, [r0, #2]
 80048dc:	70c1      	strb	r1, [r0, #3]
 80048de:	1d03      	adds	r3, r0, #4
 80048e0:	e7f1      	b.n	80048c6 <__exponent+0x60>
	...

080048e4 <_printf_float>:
 80048e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e8:	ed2d 8b02 	vpush	{d8}
 80048ec:	b08d      	sub	sp, #52	; 0x34
 80048ee:	460c      	mov	r4, r1
 80048f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80048f4:	4616      	mov	r6, r2
 80048f6:	461f      	mov	r7, r3
 80048f8:	4605      	mov	r5, r0
 80048fa:	f000 fcc7 	bl	800528c <_localeconv_r>
 80048fe:	f8d0 a000 	ldr.w	sl, [r0]
 8004902:	4650      	mov	r0, sl
 8004904:	f7fb fcbc 	bl	8000280 <strlen>
 8004908:	2300      	movs	r3, #0
 800490a:	930a      	str	r3, [sp, #40]	; 0x28
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	9305      	str	r3, [sp, #20]
 8004910:	f8d8 3000 	ldr.w	r3, [r8]
 8004914:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004918:	3307      	adds	r3, #7
 800491a:	f023 0307 	bic.w	r3, r3, #7
 800491e:	f103 0208 	add.w	r2, r3, #8
 8004922:	f8c8 2000 	str.w	r2, [r8]
 8004926:	e9d3 8900 	ldrd	r8, r9, [r3]
 800492a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800492e:	9307      	str	r3, [sp, #28]
 8004930:	f8cd 8018 	str.w	r8, [sp, #24]
 8004934:	ee08 0a10 	vmov	s16, r0
 8004938:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800493c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004940:	4b9e      	ldr	r3, [pc, #632]	; (8004bbc <_printf_float+0x2d8>)
 8004942:	f04f 32ff 	mov.w	r2, #4294967295
 8004946:	f7fc f8f9 	bl	8000b3c <__aeabi_dcmpun>
 800494a:	bb88      	cbnz	r0, 80049b0 <_printf_float+0xcc>
 800494c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004950:	4b9a      	ldr	r3, [pc, #616]	; (8004bbc <_printf_float+0x2d8>)
 8004952:	f04f 32ff 	mov.w	r2, #4294967295
 8004956:	f7fc f8d3 	bl	8000b00 <__aeabi_dcmple>
 800495a:	bb48      	cbnz	r0, 80049b0 <_printf_float+0xcc>
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	4640      	mov	r0, r8
 8004962:	4649      	mov	r1, r9
 8004964:	f7fc f8c2 	bl	8000aec <__aeabi_dcmplt>
 8004968:	b110      	cbz	r0, 8004970 <_printf_float+0x8c>
 800496a:	232d      	movs	r3, #45	; 0x2d
 800496c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004970:	4a93      	ldr	r2, [pc, #588]	; (8004bc0 <_printf_float+0x2dc>)
 8004972:	4b94      	ldr	r3, [pc, #592]	; (8004bc4 <_printf_float+0x2e0>)
 8004974:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004978:	bf94      	ite	ls
 800497a:	4690      	movls	r8, r2
 800497c:	4698      	movhi	r8, r3
 800497e:	2303      	movs	r3, #3
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	9b05      	ldr	r3, [sp, #20]
 8004984:	f023 0304 	bic.w	r3, r3, #4
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	f04f 0900 	mov.w	r9, #0
 800498e:	9700      	str	r7, [sp, #0]
 8004990:	4633      	mov	r3, r6
 8004992:	aa0b      	add	r2, sp, #44	; 0x2c
 8004994:	4621      	mov	r1, r4
 8004996:	4628      	mov	r0, r5
 8004998:	f000 f9da 	bl	8004d50 <_printf_common>
 800499c:	3001      	adds	r0, #1
 800499e:	f040 8090 	bne.w	8004ac2 <_printf_float+0x1de>
 80049a2:	f04f 30ff 	mov.w	r0, #4294967295
 80049a6:	b00d      	add	sp, #52	; 0x34
 80049a8:	ecbd 8b02 	vpop	{d8}
 80049ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	4640      	mov	r0, r8
 80049b6:	4649      	mov	r1, r9
 80049b8:	f7fc f8c0 	bl	8000b3c <__aeabi_dcmpun>
 80049bc:	b140      	cbz	r0, 80049d0 <_printf_float+0xec>
 80049be:	464b      	mov	r3, r9
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bfbc      	itt	lt
 80049c4:	232d      	movlt	r3, #45	; 0x2d
 80049c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049ca:	4a7f      	ldr	r2, [pc, #508]	; (8004bc8 <_printf_float+0x2e4>)
 80049cc:	4b7f      	ldr	r3, [pc, #508]	; (8004bcc <_printf_float+0x2e8>)
 80049ce:	e7d1      	b.n	8004974 <_printf_float+0x90>
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80049d6:	9206      	str	r2, [sp, #24]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	d13f      	bne.n	8004a5c <_printf_float+0x178>
 80049dc:	2306      	movs	r3, #6
 80049de:	6063      	str	r3, [r4, #4]
 80049e0:	9b05      	ldr	r3, [sp, #20]
 80049e2:	6861      	ldr	r1, [r4, #4]
 80049e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80049e8:	2300      	movs	r3, #0
 80049ea:	9303      	str	r3, [sp, #12]
 80049ec:	ab0a      	add	r3, sp, #40	; 0x28
 80049ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80049f2:	ab09      	add	r3, sp, #36	; 0x24
 80049f4:	ec49 8b10 	vmov	d0, r8, r9
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	6022      	str	r2, [r4, #0]
 80049fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a00:	4628      	mov	r0, r5
 8004a02:	f7ff fece 	bl	80047a2 <__cvt>
 8004a06:	9b06      	ldr	r3, [sp, #24]
 8004a08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a0a:	2b47      	cmp	r3, #71	; 0x47
 8004a0c:	4680      	mov	r8, r0
 8004a0e:	d108      	bne.n	8004a22 <_printf_float+0x13e>
 8004a10:	1cc8      	adds	r0, r1, #3
 8004a12:	db02      	blt.n	8004a1a <_printf_float+0x136>
 8004a14:	6863      	ldr	r3, [r4, #4]
 8004a16:	4299      	cmp	r1, r3
 8004a18:	dd41      	ble.n	8004a9e <_printf_float+0x1ba>
 8004a1a:	f1ab 0302 	sub.w	r3, fp, #2
 8004a1e:	fa5f fb83 	uxtb.w	fp, r3
 8004a22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a26:	d820      	bhi.n	8004a6a <_printf_float+0x186>
 8004a28:	3901      	subs	r1, #1
 8004a2a:	465a      	mov	r2, fp
 8004a2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a30:	9109      	str	r1, [sp, #36]	; 0x24
 8004a32:	f7ff ff18 	bl	8004866 <__exponent>
 8004a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a38:	1813      	adds	r3, r2, r0
 8004a3a:	2a01      	cmp	r2, #1
 8004a3c:	4681      	mov	r9, r0
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	dc02      	bgt.n	8004a48 <_printf_float+0x164>
 8004a42:	6822      	ldr	r2, [r4, #0]
 8004a44:	07d2      	lsls	r2, r2, #31
 8004a46:	d501      	bpl.n	8004a4c <_printf_float+0x168>
 8004a48:	3301      	adds	r3, #1
 8004a4a:	6123      	str	r3, [r4, #16]
 8004a4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d09c      	beq.n	800498e <_printf_float+0xaa>
 8004a54:	232d      	movs	r3, #45	; 0x2d
 8004a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a5a:	e798      	b.n	800498e <_printf_float+0xaa>
 8004a5c:	9a06      	ldr	r2, [sp, #24]
 8004a5e:	2a47      	cmp	r2, #71	; 0x47
 8004a60:	d1be      	bne.n	80049e0 <_printf_float+0xfc>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1bc      	bne.n	80049e0 <_printf_float+0xfc>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e7b9      	b.n	80049de <_printf_float+0xfa>
 8004a6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004a6e:	d118      	bne.n	8004aa2 <_printf_float+0x1be>
 8004a70:	2900      	cmp	r1, #0
 8004a72:	6863      	ldr	r3, [r4, #4]
 8004a74:	dd0b      	ble.n	8004a8e <_printf_float+0x1aa>
 8004a76:	6121      	str	r1, [r4, #16]
 8004a78:	b913      	cbnz	r3, 8004a80 <_printf_float+0x19c>
 8004a7a:	6822      	ldr	r2, [r4, #0]
 8004a7c:	07d0      	lsls	r0, r2, #31
 8004a7e:	d502      	bpl.n	8004a86 <_printf_float+0x1a2>
 8004a80:	3301      	adds	r3, #1
 8004a82:	440b      	add	r3, r1
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a88:	f04f 0900 	mov.w	r9, #0
 8004a8c:	e7de      	b.n	8004a4c <_printf_float+0x168>
 8004a8e:	b913      	cbnz	r3, 8004a96 <_printf_float+0x1b2>
 8004a90:	6822      	ldr	r2, [r4, #0]
 8004a92:	07d2      	lsls	r2, r2, #31
 8004a94:	d501      	bpl.n	8004a9a <_printf_float+0x1b6>
 8004a96:	3302      	adds	r3, #2
 8004a98:	e7f4      	b.n	8004a84 <_printf_float+0x1a0>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e7f2      	b.n	8004a84 <_printf_float+0x1a0>
 8004a9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa4:	4299      	cmp	r1, r3
 8004aa6:	db05      	blt.n	8004ab4 <_printf_float+0x1d0>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	6121      	str	r1, [r4, #16]
 8004aac:	07d8      	lsls	r0, r3, #31
 8004aae:	d5ea      	bpl.n	8004a86 <_printf_float+0x1a2>
 8004ab0:	1c4b      	adds	r3, r1, #1
 8004ab2:	e7e7      	b.n	8004a84 <_printf_float+0x1a0>
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	bfd4      	ite	le
 8004ab8:	f1c1 0202 	rsble	r2, r1, #2
 8004abc:	2201      	movgt	r2, #1
 8004abe:	4413      	add	r3, r2
 8004ac0:	e7e0      	b.n	8004a84 <_printf_float+0x1a0>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	055a      	lsls	r2, r3, #21
 8004ac6:	d407      	bmi.n	8004ad8 <_printf_float+0x1f4>
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	4642      	mov	r2, r8
 8004acc:	4631      	mov	r1, r6
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b8      	blx	r7
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d12c      	bne.n	8004b30 <_printf_float+0x24c>
 8004ad6:	e764      	b.n	80049a2 <_printf_float+0xbe>
 8004ad8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004adc:	f240 80e0 	bls.w	8004ca0 <_printf_float+0x3bc>
 8004ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f7fb fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d034      	beq.n	8004b5a <_printf_float+0x276>
 8004af0:	4a37      	ldr	r2, [pc, #220]	; (8004bd0 <_printf_float+0x2ec>)
 8004af2:	2301      	movs	r3, #1
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	f43f af51 	beq.w	80049a2 <_printf_float+0xbe>
 8004b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b04:	429a      	cmp	r2, r3
 8004b06:	db02      	blt.n	8004b0e <_printf_float+0x22a>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	07d8      	lsls	r0, r3, #31
 8004b0c:	d510      	bpl.n	8004b30 <_printf_float+0x24c>
 8004b0e:	ee18 3a10 	vmov	r3, s16
 8004b12:	4652      	mov	r2, sl
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b8      	blx	r7
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	f43f af41 	beq.w	80049a2 <_printf_float+0xbe>
 8004b20:	f04f 0800 	mov.w	r8, #0
 8004b24:	f104 091a 	add.w	r9, r4, #26
 8004b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	4543      	cmp	r3, r8
 8004b2e:	dc09      	bgt.n	8004b44 <_printf_float+0x260>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	079b      	lsls	r3, r3, #30
 8004b34:	f100 8107 	bmi.w	8004d46 <_printf_float+0x462>
 8004b38:	68e0      	ldr	r0, [r4, #12]
 8004b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b3c:	4298      	cmp	r0, r3
 8004b3e:	bfb8      	it	lt
 8004b40:	4618      	movlt	r0, r3
 8004b42:	e730      	b.n	80049a6 <_printf_float+0xc2>
 8004b44:	2301      	movs	r3, #1
 8004b46:	464a      	mov	r2, r9
 8004b48:	4631      	mov	r1, r6
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	47b8      	blx	r7
 8004b4e:	3001      	adds	r0, #1
 8004b50:	f43f af27 	beq.w	80049a2 <_printf_float+0xbe>
 8004b54:	f108 0801 	add.w	r8, r8, #1
 8004b58:	e7e6      	b.n	8004b28 <_printf_float+0x244>
 8004b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dc39      	bgt.n	8004bd4 <_printf_float+0x2f0>
 8004b60:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <_printf_float+0x2ec>)
 8004b62:	2301      	movs	r3, #1
 8004b64:	4631      	mov	r1, r6
 8004b66:	4628      	mov	r0, r5
 8004b68:	47b8      	blx	r7
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	f43f af19 	beq.w	80049a2 <_printf_float+0xbe>
 8004b70:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b74:	4313      	orrs	r3, r2
 8004b76:	d102      	bne.n	8004b7e <_printf_float+0x29a>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	07d9      	lsls	r1, r3, #31
 8004b7c:	d5d8      	bpl.n	8004b30 <_printf_float+0x24c>
 8004b7e:	ee18 3a10 	vmov	r3, s16
 8004b82:	4652      	mov	r2, sl
 8004b84:	4631      	mov	r1, r6
 8004b86:	4628      	mov	r0, r5
 8004b88:	47b8      	blx	r7
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f43f af09 	beq.w	80049a2 <_printf_float+0xbe>
 8004b90:	f04f 0900 	mov.w	r9, #0
 8004b94:	f104 0a1a 	add.w	sl, r4, #26
 8004b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b9a:	425b      	negs	r3, r3
 8004b9c:	454b      	cmp	r3, r9
 8004b9e:	dc01      	bgt.n	8004ba4 <_printf_float+0x2c0>
 8004ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba2:	e792      	b.n	8004aca <_printf_float+0x1e6>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4652      	mov	r2, sl
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f43f aef7 	beq.w	80049a2 <_printf_float+0xbe>
 8004bb4:	f109 0901 	add.w	r9, r9, #1
 8004bb8:	e7ee      	b.n	8004b98 <_printf_float+0x2b4>
 8004bba:	bf00      	nop
 8004bbc:	7fefffff 	.word	0x7fefffff
 8004bc0:	08007170 	.word	0x08007170
 8004bc4:	08007174 	.word	0x08007174
 8004bc8:	08007178 	.word	0x08007178
 8004bcc:	0800717c 	.word	0x0800717c
 8004bd0:	08007180 	.word	0x08007180
 8004bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	bfa8      	it	ge
 8004bdc:	461a      	movge	r2, r3
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	4691      	mov	r9, r2
 8004be2:	dc37      	bgt.n	8004c54 <_printf_float+0x370>
 8004be4:	f04f 0b00 	mov.w	fp, #0
 8004be8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bec:	f104 021a 	add.w	r2, r4, #26
 8004bf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bf2:	9305      	str	r3, [sp, #20]
 8004bf4:	eba3 0309 	sub.w	r3, r3, r9
 8004bf8:	455b      	cmp	r3, fp
 8004bfa:	dc33      	bgt.n	8004c64 <_printf_float+0x380>
 8004bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c00:	429a      	cmp	r2, r3
 8004c02:	db3b      	blt.n	8004c7c <_printf_float+0x398>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	07da      	lsls	r2, r3, #31
 8004c08:	d438      	bmi.n	8004c7c <_printf_float+0x398>
 8004c0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c0e:	eba2 0903 	sub.w	r9, r2, r3
 8004c12:	9b05      	ldr	r3, [sp, #20]
 8004c14:	1ad2      	subs	r2, r2, r3
 8004c16:	4591      	cmp	r9, r2
 8004c18:	bfa8      	it	ge
 8004c1a:	4691      	movge	r9, r2
 8004c1c:	f1b9 0f00 	cmp.w	r9, #0
 8004c20:	dc35      	bgt.n	8004c8e <_printf_float+0x3aa>
 8004c22:	f04f 0800 	mov.w	r8, #0
 8004c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c2a:	f104 0a1a 	add.w	sl, r4, #26
 8004c2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	eba3 0309 	sub.w	r3, r3, r9
 8004c38:	4543      	cmp	r3, r8
 8004c3a:	f77f af79 	ble.w	8004b30 <_printf_float+0x24c>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4652      	mov	r2, sl
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f43f aeaa 	beq.w	80049a2 <_printf_float+0xbe>
 8004c4e:	f108 0801 	add.w	r8, r8, #1
 8004c52:	e7ec      	b.n	8004c2e <_printf_float+0x34a>
 8004c54:	4613      	mov	r3, r2
 8004c56:	4631      	mov	r1, r6
 8004c58:	4642      	mov	r2, r8
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d1c0      	bne.n	8004be4 <_printf_float+0x300>
 8004c62:	e69e      	b.n	80049a2 <_printf_float+0xbe>
 8004c64:	2301      	movs	r3, #1
 8004c66:	4631      	mov	r1, r6
 8004c68:	4628      	mov	r0, r5
 8004c6a:	9205      	str	r2, [sp, #20]
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f43f ae97 	beq.w	80049a2 <_printf_float+0xbe>
 8004c74:	9a05      	ldr	r2, [sp, #20]
 8004c76:	f10b 0b01 	add.w	fp, fp, #1
 8004c7a:	e7b9      	b.n	8004bf0 <_printf_float+0x30c>
 8004c7c:	ee18 3a10 	vmov	r3, s16
 8004c80:	4652      	mov	r2, sl
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d1be      	bne.n	8004c0a <_printf_float+0x326>
 8004c8c:	e689      	b.n	80049a2 <_printf_float+0xbe>
 8004c8e:	9a05      	ldr	r2, [sp, #20]
 8004c90:	464b      	mov	r3, r9
 8004c92:	4442      	add	r2, r8
 8004c94:	4631      	mov	r1, r6
 8004c96:	4628      	mov	r0, r5
 8004c98:	47b8      	blx	r7
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d1c1      	bne.n	8004c22 <_printf_float+0x33e>
 8004c9e:	e680      	b.n	80049a2 <_printf_float+0xbe>
 8004ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ca2:	2a01      	cmp	r2, #1
 8004ca4:	dc01      	bgt.n	8004caa <_printf_float+0x3c6>
 8004ca6:	07db      	lsls	r3, r3, #31
 8004ca8:	d53a      	bpl.n	8004d20 <_printf_float+0x43c>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4642      	mov	r2, r8
 8004cae:	4631      	mov	r1, r6
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	47b8      	blx	r7
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	f43f ae74 	beq.w	80049a2 <_printf_float+0xbe>
 8004cba:	ee18 3a10 	vmov	r3, s16
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b8      	blx	r7
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f43f ae6b 	beq.w	80049a2 <_printf_float+0xbe>
 8004ccc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004cd8:	f7fb fefe 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cdc:	b9d8      	cbnz	r0, 8004d16 <_printf_float+0x432>
 8004cde:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ce2:	f108 0201 	add.w	r2, r8, #1
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	4628      	mov	r0, r5
 8004cea:	47b8      	blx	r7
 8004cec:	3001      	adds	r0, #1
 8004cee:	d10e      	bne.n	8004d0e <_printf_float+0x42a>
 8004cf0:	e657      	b.n	80049a2 <_printf_float+0xbe>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	47b8      	blx	r7
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	f43f ae50 	beq.w	80049a2 <_printf_float+0xbe>
 8004d02:	f108 0801 	add.w	r8, r8, #1
 8004d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	4543      	cmp	r3, r8
 8004d0c:	dcf1      	bgt.n	8004cf2 <_printf_float+0x40e>
 8004d0e:	464b      	mov	r3, r9
 8004d10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d14:	e6da      	b.n	8004acc <_printf_float+0x1e8>
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	f104 0a1a 	add.w	sl, r4, #26
 8004d1e:	e7f2      	b.n	8004d06 <_printf_float+0x422>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4642      	mov	r2, r8
 8004d24:	e7df      	b.n	8004ce6 <_printf_float+0x402>
 8004d26:	2301      	movs	r3, #1
 8004d28:	464a      	mov	r2, r9
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b8      	blx	r7
 8004d30:	3001      	adds	r0, #1
 8004d32:	f43f ae36 	beq.w	80049a2 <_printf_float+0xbe>
 8004d36:	f108 0801 	add.w	r8, r8, #1
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d3e:	1a5b      	subs	r3, r3, r1
 8004d40:	4543      	cmp	r3, r8
 8004d42:	dcf0      	bgt.n	8004d26 <_printf_float+0x442>
 8004d44:	e6f8      	b.n	8004b38 <_printf_float+0x254>
 8004d46:	f04f 0800 	mov.w	r8, #0
 8004d4a:	f104 0919 	add.w	r9, r4, #25
 8004d4e:	e7f4      	b.n	8004d3a <_printf_float+0x456>

08004d50 <_printf_common>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	4616      	mov	r6, r2
 8004d56:	4699      	mov	r9, r3
 8004d58:	688a      	ldr	r2, [r1, #8]
 8004d5a:	690b      	ldr	r3, [r1, #16]
 8004d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d60:	4293      	cmp	r3, r2
 8004d62:	bfb8      	it	lt
 8004d64:	4613      	movlt	r3, r2
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d6c:	4607      	mov	r7, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	b10a      	cbz	r2, 8004d76 <_printf_common+0x26>
 8004d72:	3301      	adds	r3, #1
 8004d74:	6033      	str	r3, [r6, #0]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	0699      	lsls	r1, r3, #26
 8004d7a:	bf42      	ittt	mi
 8004d7c:	6833      	ldrmi	r3, [r6, #0]
 8004d7e:	3302      	addmi	r3, #2
 8004d80:	6033      	strmi	r3, [r6, #0]
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	f015 0506 	ands.w	r5, r5, #6
 8004d88:	d106      	bne.n	8004d98 <_printf_common+0x48>
 8004d8a:	f104 0a19 	add.w	sl, r4, #25
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	6832      	ldr	r2, [r6, #0]
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dc26      	bgt.n	8004de6 <_printf_common+0x96>
 8004d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d9c:	1e13      	subs	r3, r2, #0
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	bf18      	it	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	0692      	lsls	r2, r2, #26
 8004da6:	d42b      	bmi.n	8004e00 <_printf_common+0xb0>
 8004da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dac:	4649      	mov	r1, r9
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c0      	blx	r8
 8004db2:	3001      	adds	r0, #1
 8004db4:	d01e      	beq.n	8004df4 <_printf_common+0xa4>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	f003 0306 	and.w	r3, r3, #6
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf02      	ittt	eq
 8004dc2:	68e5      	ldreq	r5, [r4, #12]
 8004dc4:	6833      	ldreq	r3, [r6, #0]
 8004dc6:	1aed      	subeq	r5, r5, r3
 8004dc8:	68a3      	ldr	r3, [r4, #8]
 8004dca:	bf0c      	ite	eq
 8004dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd0:	2500      	movne	r5, #0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bfc4      	itt	gt
 8004dd6:	1a9b      	subgt	r3, r3, r2
 8004dd8:	18ed      	addgt	r5, r5, r3
 8004dda:	2600      	movs	r6, #0
 8004ddc:	341a      	adds	r4, #26
 8004dde:	42b5      	cmp	r5, r6
 8004de0:	d11a      	bne.n	8004e18 <_printf_common+0xc8>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e008      	b.n	8004df8 <_printf_common+0xa8>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4652      	mov	r2, sl
 8004dea:	4649      	mov	r1, r9
 8004dec:	4638      	mov	r0, r7
 8004dee:	47c0      	blx	r8
 8004df0:	3001      	adds	r0, #1
 8004df2:	d103      	bne.n	8004dfc <_printf_common+0xac>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	e7c6      	b.n	8004d8e <_printf_common+0x3e>
 8004e00:	18e1      	adds	r1, r4, r3
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	2030      	movs	r0, #48	; 0x30
 8004e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e0a:	4422      	add	r2, r4
 8004e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e14:	3302      	adds	r3, #2
 8004e16:	e7c7      	b.n	8004da8 <_printf_common+0x58>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	4638      	mov	r0, r7
 8004e20:	47c0      	blx	r8
 8004e22:	3001      	adds	r0, #1
 8004e24:	d0e6      	beq.n	8004df4 <_printf_common+0xa4>
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7d9      	b.n	8004dde <_printf_common+0x8e>
	...

08004e2c <_printf_i>:
 8004e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	7e0f      	ldrb	r7, [r1, #24]
 8004e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e34:	2f78      	cmp	r7, #120	; 0x78
 8004e36:	4691      	mov	r9, r2
 8004e38:	4680      	mov	r8, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e42:	d807      	bhi.n	8004e54 <_printf_i+0x28>
 8004e44:	2f62      	cmp	r7, #98	; 0x62
 8004e46:	d80a      	bhi.n	8004e5e <_printf_i+0x32>
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	f000 80d4 	beq.w	8004ff6 <_printf_i+0x1ca>
 8004e4e:	2f58      	cmp	r7, #88	; 0x58
 8004e50:	f000 80c0 	beq.w	8004fd4 <_printf_i+0x1a8>
 8004e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e5c:	e03a      	b.n	8004ed4 <_printf_i+0xa8>
 8004e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e62:	2b15      	cmp	r3, #21
 8004e64:	d8f6      	bhi.n	8004e54 <_printf_i+0x28>
 8004e66:	a101      	add	r1, pc, #4	; (adr r1, 8004e6c <_printf_i+0x40>)
 8004e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004ed9 	.word	0x08004ed9
 8004e74:	08004e55 	.word	0x08004e55
 8004e78:	08004e55 	.word	0x08004e55
 8004e7c:	08004e55 	.word	0x08004e55
 8004e80:	08004e55 	.word	0x08004e55
 8004e84:	08004ed9 	.word	0x08004ed9
 8004e88:	08004e55 	.word	0x08004e55
 8004e8c:	08004e55 	.word	0x08004e55
 8004e90:	08004e55 	.word	0x08004e55
 8004e94:	08004e55 	.word	0x08004e55
 8004e98:	08004fdd 	.word	0x08004fdd
 8004e9c:	08004f05 	.word	0x08004f05
 8004ea0:	08004f97 	.word	0x08004f97
 8004ea4:	08004e55 	.word	0x08004e55
 8004ea8:	08004e55 	.word	0x08004e55
 8004eac:	08004fff 	.word	0x08004fff
 8004eb0:	08004e55 	.word	0x08004e55
 8004eb4:	08004f05 	.word	0x08004f05
 8004eb8:	08004e55 	.word	0x08004e55
 8004ebc:	08004e55 	.word	0x08004e55
 8004ec0:	08004f9f 	.word	0x08004f9f
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	602a      	str	r2, [r5, #0]
 8004ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e09f      	b.n	8005018 <_printf_i+0x1ec>
 8004ed8:	6820      	ldr	r0, [r4, #0]
 8004eda:	682b      	ldr	r3, [r5, #0]
 8004edc:	0607      	lsls	r7, r0, #24
 8004ede:	f103 0104 	add.w	r1, r3, #4
 8004ee2:	6029      	str	r1, [r5, #0]
 8004ee4:	d501      	bpl.n	8004eea <_printf_i+0xbe>
 8004ee6:	681e      	ldr	r6, [r3, #0]
 8004ee8:	e003      	b.n	8004ef2 <_printf_i+0xc6>
 8004eea:	0646      	lsls	r6, r0, #25
 8004eec:	d5fb      	bpl.n	8004ee6 <_printf_i+0xba>
 8004eee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	da03      	bge.n	8004efe <_printf_i+0xd2>
 8004ef6:	232d      	movs	r3, #45	; 0x2d
 8004ef8:	4276      	negs	r6, r6
 8004efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004efe:	485a      	ldr	r0, [pc, #360]	; (8005068 <_printf_i+0x23c>)
 8004f00:	230a      	movs	r3, #10
 8004f02:	e012      	b.n	8004f2a <_printf_i+0xfe>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	6820      	ldr	r0, [r4, #0]
 8004f08:	1d19      	adds	r1, r3, #4
 8004f0a:	6029      	str	r1, [r5, #0]
 8004f0c:	0605      	lsls	r5, r0, #24
 8004f0e:	d501      	bpl.n	8004f14 <_printf_i+0xe8>
 8004f10:	681e      	ldr	r6, [r3, #0]
 8004f12:	e002      	b.n	8004f1a <_printf_i+0xee>
 8004f14:	0641      	lsls	r1, r0, #25
 8004f16:	d5fb      	bpl.n	8004f10 <_printf_i+0xe4>
 8004f18:	881e      	ldrh	r6, [r3, #0]
 8004f1a:	4853      	ldr	r0, [pc, #332]	; (8005068 <_printf_i+0x23c>)
 8004f1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004f1e:	bf0c      	ite	eq
 8004f20:	2308      	moveq	r3, #8
 8004f22:	230a      	movne	r3, #10
 8004f24:	2100      	movs	r1, #0
 8004f26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f2a:	6865      	ldr	r5, [r4, #4]
 8004f2c:	60a5      	str	r5, [r4, #8]
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	bfa2      	ittt	ge
 8004f32:	6821      	ldrge	r1, [r4, #0]
 8004f34:	f021 0104 	bicge.w	r1, r1, #4
 8004f38:	6021      	strge	r1, [r4, #0]
 8004f3a:	b90e      	cbnz	r6, 8004f40 <_printf_i+0x114>
 8004f3c:	2d00      	cmp	r5, #0
 8004f3e:	d04b      	beq.n	8004fd8 <_printf_i+0x1ac>
 8004f40:	4615      	mov	r5, r2
 8004f42:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f46:	fb03 6711 	mls	r7, r3, r1, r6
 8004f4a:	5dc7      	ldrb	r7, [r0, r7]
 8004f4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f50:	4637      	mov	r7, r6
 8004f52:	42bb      	cmp	r3, r7
 8004f54:	460e      	mov	r6, r1
 8004f56:	d9f4      	bls.n	8004f42 <_printf_i+0x116>
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d10b      	bne.n	8004f74 <_printf_i+0x148>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	07de      	lsls	r6, r3, #31
 8004f60:	d508      	bpl.n	8004f74 <_printf_i+0x148>
 8004f62:	6923      	ldr	r3, [r4, #16]
 8004f64:	6861      	ldr	r1, [r4, #4]
 8004f66:	4299      	cmp	r1, r3
 8004f68:	bfde      	ittt	le
 8004f6a:	2330      	movle	r3, #48	; 0x30
 8004f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f74:	1b52      	subs	r2, r2, r5
 8004f76:	6122      	str	r2, [r4, #16]
 8004f78:	f8cd a000 	str.w	sl, [sp]
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	aa03      	add	r2, sp, #12
 8004f80:	4621      	mov	r1, r4
 8004f82:	4640      	mov	r0, r8
 8004f84:	f7ff fee4 	bl	8004d50 <_printf_common>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d14a      	bne.n	8005022 <_printf_i+0x1f6>
 8004f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f90:	b004      	add	sp, #16
 8004f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f043 0320 	orr.w	r3, r3, #32
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	4833      	ldr	r0, [pc, #204]	; (800506c <_printf_i+0x240>)
 8004fa0:	2778      	movs	r7, #120	; 0x78
 8004fa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	6829      	ldr	r1, [r5, #0]
 8004faa:	061f      	lsls	r7, r3, #24
 8004fac:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fb0:	d402      	bmi.n	8004fb8 <_printf_i+0x18c>
 8004fb2:	065f      	lsls	r7, r3, #25
 8004fb4:	bf48      	it	mi
 8004fb6:	b2b6      	uxthmi	r6, r6
 8004fb8:	07df      	lsls	r7, r3, #31
 8004fba:	bf48      	it	mi
 8004fbc:	f043 0320 	orrmi.w	r3, r3, #32
 8004fc0:	6029      	str	r1, [r5, #0]
 8004fc2:	bf48      	it	mi
 8004fc4:	6023      	strmi	r3, [r4, #0]
 8004fc6:	b91e      	cbnz	r6, 8004fd0 <_printf_i+0x1a4>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f023 0320 	bic.w	r3, r3, #32
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	e7a7      	b.n	8004f24 <_printf_i+0xf8>
 8004fd4:	4824      	ldr	r0, [pc, #144]	; (8005068 <_printf_i+0x23c>)
 8004fd6:	e7e4      	b.n	8004fa2 <_printf_i+0x176>
 8004fd8:	4615      	mov	r5, r2
 8004fda:	e7bd      	b.n	8004f58 <_printf_i+0x12c>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	6826      	ldr	r6, [r4, #0]
 8004fe0:	6961      	ldr	r1, [r4, #20]
 8004fe2:	1d18      	adds	r0, r3, #4
 8004fe4:	6028      	str	r0, [r5, #0]
 8004fe6:	0635      	lsls	r5, r6, #24
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	d501      	bpl.n	8004ff0 <_printf_i+0x1c4>
 8004fec:	6019      	str	r1, [r3, #0]
 8004fee:	e002      	b.n	8004ff6 <_printf_i+0x1ca>
 8004ff0:	0670      	lsls	r0, r6, #25
 8004ff2:	d5fb      	bpl.n	8004fec <_printf_i+0x1c0>
 8004ff4:	8019      	strh	r1, [r3, #0]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	4615      	mov	r5, r2
 8004ffc:	e7bc      	b.n	8004f78 <_printf_i+0x14c>
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	1d1a      	adds	r2, r3, #4
 8005002:	602a      	str	r2, [r5, #0]
 8005004:	681d      	ldr	r5, [r3, #0]
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	2100      	movs	r1, #0
 800500a:	4628      	mov	r0, r5
 800500c:	f7fb f8e8 	bl	80001e0 <memchr>
 8005010:	b108      	cbz	r0, 8005016 <_printf_i+0x1ea>
 8005012:	1b40      	subs	r0, r0, r5
 8005014:	6060      	str	r0, [r4, #4]
 8005016:	6863      	ldr	r3, [r4, #4]
 8005018:	6123      	str	r3, [r4, #16]
 800501a:	2300      	movs	r3, #0
 800501c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005020:	e7aa      	b.n	8004f78 <_printf_i+0x14c>
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	462a      	mov	r2, r5
 8005026:	4649      	mov	r1, r9
 8005028:	4640      	mov	r0, r8
 800502a:	47d0      	blx	sl
 800502c:	3001      	adds	r0, #1
 800502e:	d0ad      	beq.n	8004f8c <_printf_i+0x160>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	079b      	lsls	r3, r3, #30
 8005034:	d413      	bmi.n	800505e <_printf_i+0x232>
 8005036:	68e0      	ldr	r0, [r4, #12]
 8005038:	9b03      	ldr	r3, [sp, #12]
 800503a:	4298      	cmp	r0, r3
 800503c:	bfb8      	it	lt
 800503e:	4618      	movlt	r0, r3
 8005040:	e7a6      	b.n	8004f90 <_printf_i+0x164>
 8005042:	2301      	movs	r3, #1
 8005044:	4632      	mov	r2, r6
 8005046:	4649      	mov	r1, r9
 8005048:	4640      	mov	r0, r8
 800504a:	47d0      	blx	sl
 800504c:	3001      	adds	r0, #1
 800504e:	d09d      	beq.n	8004f8c <_printf_i+0x160>
 8005050:	3501      	adds	r5, #1
 8005052:	68e3      	ldr	r3, [r4, #12]
 8005054:	9903      	ldr	r1, [sp, #12]
 8005056:	1a5b      	subs	r3, r3, r1
 8005058:	42ab      	cmp	r3, r5
 800505a:	dcf2      	bgt.n	8005042 <_printf_i+0x216>
 800505c:	e7eb      	b.n	8005036 <_printf_i+0x20a>
 800505e:	2500      	movs	r5, #0
 8005060:	f104 0619 	add.w	r6, r4, #25
 8005064:	e7f5      	b.n	8005052 <_printf_i+0x226>
 8005066:	bf00      	nop
 8005068:	08007182 	.word	0x08007182
 800506c:	08007193 	.word	0x08007193

08005070 <std>:
 8005070:	2300      	movs	r3, #0
 8005072:	b510      	push	{r4, lr}
 8005074:	4604      	mov	r4, r0
 8005076:	e9c0 3300 	strd	r3, r3, [r0]
 800507a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800507e:	6083      	str	r3, [r0, #8]
 8005080:	8181      	strh	r1, [r0, #12]
 8005082:	6643      	str	r3, [r0, #100]	; 0x64
 8005084:	81c2      	strh	r2, [r0, #14]
 8005086:	6183      	str	r3, [r0, #24]
 8005088:	4619      	mov	r1, r3
 800508a:	2208      	movs	r2, #8
 800508c:	305c      	adds	r0, #92	; 0x5c
 800508e:	f000 f8f4 	bl	800527a <memset>
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <std+0x58>)
 8005094:	6263      	str	r3, [r4, #36]	; 0x24
 8005096:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <std+0x5c>)
 8005098:	62a3      	str	r3, [r4, #40]	; 0x28
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <std+0x60>)
 800509c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800509e:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <std+0x64>)
 80050a0:	6323      	str	r3, [r4, #48]	; 0x30
 80050a2:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <std+0x68>)
 80050a4:	6224      	str	r4, [r4, #32]
 80050a6:	429c      	cmp	r4, r3
 80050a8:	d006      	beq.n	80050b8 <std+0x48>
 80050aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050ae:	4294      	cmp	r4, r2
 80050b0:	d002      	beq.n	80050b8 <std+0x48>
 80050b2:	33d0      	adds	r3, #208	; 0xd0
 80050b4:	429c      	cmp	r4, r3
 80050b6:	d105      	bne.n	80050c4 <std+0x54>
 80050b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c0:	f000 b958 	b.w	8005374 <__retarget_lock_init_recursive>
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	bf00      	nop
 80050c8:	080051f5 	.word	0x080051f5
 80050cc:	08005217 	.word	0x08005217
 80050d0:	0800524f 	.word	0x0800524f
 80050d4:	08005273 	.word	0x08005273
 80050d8:	200002d4 	.word	0x200002d4

080050dc <stdio_exit_handler>:
 80050dc:	4a02      	ldr	r2, [pc, #8]	; (80050e8 <stdio_exit_handler+0xc>)
 80050de:	4903      	ldr	r1, [pc, #12]	; (80050ec <stdio_exit_handler+0x10>)
 80050e0:	4803      	ldr	r0, [pc, #12]	; (80050f0 <stdio_exit_handler+0x14>)
 80050e2:	f000 b869 	b.w	80051b8 <_fwalk_sglue>
 80050e6:	bf00      	nop
 80050e8:	2000000c 	.word	0x2000000c
 80050ec:	08006a79 	.word	0x08006a79
 80050f0:	20000018 	.word	0x20000018

080050f4 <cleanup_stdio>:
 80050f4:	6841      	ldr	r1, [r0, #4]
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <cleanup_stdio+0x34>)
 80050f8:	4299      	cmp	r1, r3
 80050fa:	b510      	push	{r4, lr}
 80050fc:	4604      	mov	r4, r0
 80050fe:	d001      	beq.n	8005104 <cleanup_stdio+0x10>
 8005100:	f001 fcba 	bl	8006a78 <_fflush_r>
 8005104:	68a1      	ldr	r1, [r4, #8]
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <cleanup_stdio+0x38>)
 8005108:	4299      	cmp	r1, r3
 800510a:	d002      	beq.n	8005112 <cleanup_stdio+0x1e>
 800510c:	4620      	mov	r0, r4
 800510e:	f001 fcb3 	bl	8006a78 <_fflush_r>
 8005112:	68e1      	ldr	r1, [r4, #12]
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <cleanup_stdio+0x3c>)
 8005116:	4299      	cmp	r1, r3
 8005118:	d004      	beq.n	8005124 <cleanup_stdio+0x30>
 800511a:	4620      	mov	r0, r4
 800511c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005120:	f001 bcaa 	b.w	8006a78 <_fflush_r>
 8005124:	bd10      	pop	{r4, pc}
 8005126:	bf00      	nop
 8005128:	200002d4 	.word	0x200002d4
 800512c:	2000033c 	.word	0x2000033c
 8005130:	200003a4 	.word	0x200003a4

08005134 <global_stdio_init.part.0>:
 8005134:	b510      	push	{r4, lr}
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <global_stdio_init.part.0+0x30>)
 8005138:	4c0b      	ldr	r4, [pc, #44]	; (8005168 <global_stdio_init.part.0+0x34>)
 800513a:	4a0c      	ldr	r2, [pc, #48]	; (800516c <global_stdio_init.part.0+0x38>)
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	4620      	mov	r0, r4
 8005140:	2200      	movs	r2, #0
 8005142:	2104      	movs	r1, #4
 8005144:	f7ff ff94 	bl	8005070 <std>
 8005148:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800514c:	2201      	movs	r2, #1
 800514e:	2109      	movs	r1, #9
 8005150:	f7ff ff8e 	bl	8005070 <std>
 8005154:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005158:	2202      	movs	r2, #2
 800515a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800515e:	2112      	movs	r1, #18
 8005160:	f7ff bf86 	b.w	8005070 <std>
 8005164:	2000040c 	.word	0x2000040c
 8005168:	200002d4 	.word	0x200002d4
 800516c:	080050dd 	.word	0x080050dd

08005170 <__sfp_lock_acquire>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__sfp_lock_acquire+0x8>)
 8005172:	f000 b900 	b.w	8005376 <__retarget_lock_acquire_recursive>
 8005176:	bf00      	nop
 8005178:	20000415 	.word	0x20000415

0800517c <__sfp_lock_release>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__sfp_lock_release+0x8>)
 800517e:	f000 b8fb 	b.w	8005378 <__retarget_lock_release_recursive>
 8005182:	bf00      	nop
 8005184:	20000415 	.word	0x20000415

08005188 <__sinit>:
 8005188:	b510      	push	{r4, lr}
 800518a:	4604      	mov	r4, r0
 800518c:	f7ff fff0 	bl	8005170 <__sfp_lock_acquire>
 8005190:	6a23      	ldr	r3, [r4, #32]
 8005192:	b11b      	cbz	r3, 800519c <__sinit+0x14>
 8005194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005198:	f7ff bff0 	b.w	800517c <__sfp_lock_release>
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <__sinit+0x28>)
 800519e:	6223      	str	r3, [r4, #32]
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <__sinit+0x2c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f5      	bne.n	8005194 <__sinit+0xc>
 80051a8:	f7ff ffc4 	bl	8005134 <global_stdio_init.part.0>
 80051ac:	e7f2      	b.n	8005194 <__sinit+0xc>
 80051ae:	bf00      	nop
 80051b0:	080050f5 	.word	0x080050f5
 80051b4:	2000040c 	.word	0x2000040c

080051b8 <_fwalk_sglue>:
 80051b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051bc:	4607      	mov	r7, r0
 80051be:	4688      	mov	r8, r1
 80051c0:	4614      	mov	r4, r2
 80051c2:	2600      	movs	r6, #0
 80051c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051c8:	f1b9 0901 	subs.w	r9, r9, #1
 80051cc:	d505      	bpl.n	80051da <_fwalk_sglue+0x22>
 80051ce:	6824      	ldr	r4, [r4, #0]
 80051d0:	2c00      	cmp	r4, #0
 80051d2:	d1f7      	bne.n	80051c4 <_fwalk_sglue+0xc>
 80051d4:	4630      	mov	r0, r6
 80051d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051da:	89ab      	ldrh	r3, [r5, #12]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d907      	bls.n	80051f0 <_fwalk_sglue+0x38>
 80051e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051e4:	3301      	adds	r3, #1
 80051e6:	d003      	beq.n	80051f0 <_fwalk_sglue+0x38>
 80051e8:	4629      	mov	r1, r5
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c0      	blx	r8
 80051ee:	4306      	orrs	r6, r0
 80051f0:	3568      	adds	r5, #104	; 0x68
 80051f2:	e7e9      	b.n	80051c8 <_fwalk_sglue+0x10>

080051f4 <__sread>:
 80051f4:	b510      	push	{r4, lr}
 80051f6:	460c      	mov	r4, r1
 80051f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fc:	f000 f86c 	bl	80052d8 <_read_r>
 8005200:	2800      	cmp	r0, #0
 8005202:	bfab      	itete	ge
 8005204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005206:	89a3      	ldrhlt	r3, [r4, #12]
 8005208:	181b      	addge	r3, r3, r0
 800520a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800520e:	bfac      	ite	ge
 8005210:	6563      	strge	r3, [r4, #84]	; 0x54
 8005212:	81a3      	strhlt	r3, [r4, #12]
 8005214:	bd10      	pop	{r4, pc}

08005216 <__swrite>:
 8005216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521a:	461f      	mov	r7, r3
 800521c:	898b      	ldrh	r3, [r1, #12]
 800521e:	05db      	lsls	r3, r3, #23
 8005220:	4605      	mov	r5, r0
 8005222:	460c      	mov	r4, r1
 8005224:	4616      	mov	r6, r2
 8005226:	d505      	bpl.n	8005234 <__swrite+0x1e>
 8005228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522c:	2302      	movs	r3, #2
 800522e:	2200      	movs	r2, #0
 8005230:	f000 f840 	bl	80052b4 <_lseek_r>
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800523a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	4632      	mov	r2, r6
 8005242:	463b      	mov	r3, r7
 8005244:	4628      	mov	r0, r5
 8005246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800524a:	f000 b857 	b.w	80052fc <_write_r>

0800524e <__sseek>:
 800524e:	b510      	push	{r4, lr}
 8005250:	460c      	mov	r4, r1
 8005252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005256:	f000 f82d 	bl	80052b4 <_lseek_r>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	bf15      	itete	ne
 8005260:	6560      	strne	r0, [r4, #84]	; 0x54
 8005262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800526a:	81a3      	strheq	r3, [r4, #12]
 800526c:	bf18      	it	ne
 800526e:	81a3      	strhne	r3, [r4, #12]
 8005270:	bd10      	pop	{r4, pc}

08005272 <__sclose>:
 8005272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005276:	f000 b80d 	b.w	8005294 <_close_r>

0800527a <memset>:
 800527a:	4402      	add	r2, r0
 800527c:	4603      	mov	r3, r0
 800527e:	4293      	cmp	r3, r2
 8005280:	d100      	bne.n	8005284 <memset+0xa>
 8005282:	4770      	bx	lr
 8005284:	f803 1b01 	strb.w	r1, [r3], #1
 8005288:	e7f9      	b.n	800527e <memset+0x4>
	...

0800528c <_localeconv_r>:
 800528c:	4800      	ldr	r0, [pc, #0]	; (8005290 <_localeconv_r+0x4>)
 800528e:	4770      	bx	lr
 8005290:	20000158 	.word	0x20000158

08005294 <_close_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4d06      	ldr	r5, [pc, #24]	; (80052b0 <_close_r+0x1c>)
 8005298:	2300      	movs	r3, #0
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	602b      	str	r3, [r5, #0]
 80052a0:	f7fb ff73 	bl	800118a <_close>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_close_r+0x1a>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_close_r+0x1a>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	20000410 	.word	0x20000410

080052b4 <_lseek_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d07      	ldr	r5, [pc, #28]	; (80052d4 <_lseek_r+0x20>)
 80052b8:	4604      	mov	r4, r0
 80052ba:	4608      	mov	r0, r1
 80052bc:	4611      	mov	r1, r2
 80052be:	2200      	movs	r2, #0
 80052c0:	602a      	str	r2, [r5, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f7fb ff88 	bl	80011d8 <_lseek>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_lseek_r+0x1e>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_lseek_r+0x1e>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	20000410 	.word	0x20000410

080052d8 <_read_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d07      	ldr	r5, [pc, #28]	; (80052f8 <_read_r+0x20>)
 80052dc:	4604      	mov	r4, r0
 80052de:	4608      	mov	r0, r1
 80052e0:	4611      	mov	r1, r2
 80052e2:	2200      	movs	r2, #0
 80052e4:	602a      	str	r2, [r5, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f7fb ff16 	bl	8001118 <_read>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_read_r+0x1e>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_read_r+0x1e>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20000410 	.word	0x20000410

080052fc <_write_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4d07      	ldr	r5, [pc, #28]	; (800531c <_write_r+0x20>)
 8005300:	4604      	mov	r4, r0
 8005302:	4608      	mov	r0, r1
 8005304:	4611      	mov	r1, r2
 8005306:	2200      	movs	r2, #0
 8005308:	602a      	str	r2, [r5, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	f7fb ff21 	bl	8001152 <_write>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d102      	bne.n	800531a <_write_r+0x1e>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	b103      	cbz	r3, 800531a <_write_r+0x1e>
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	20000410 	.word	0x20000410

08005320 <__errno>:
 8005320:	4b01      	ldr	r3, [pc, #4]	; (8005328 <__errno+0x8>)
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000064 	.word	0x20000064

0800532c <__libc_init_array>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4d0d      	ldr	r5, [pc, #52]	; (8005364 <__libc_init_array+0x38>)
 8005330:	4c0d      	ldr	r4, [pc, #52]	; (8005368 <__libc_init_array+0x3c>)
 8005332:	1b64      	subs	r4, r4, r5
 8005334:	10a4      	asrs	r4, r4, #2
 8005336:	2600      	movs	r6, #0
 8005338:	42a6      	cmp	r6, r4
 800533a:	d109      	bne.n	8005350 <__libc_init_array+0x24>
 800533c:	4d0b      	ldr	r5, [pc, #44]	; (800536c <__libc_init_array+0x40>)
 800533e:	4c0c      	ldr	r4, [pc, #48]	; (8005370 <__libc_init_array+0x44>)
 8005340:	f001 feee 	bl	8007120 <_init>
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	2600      	movs	r6, #0
 800534a:	42a6      	cmp	r6, r4
 800534c:	d105      	bne.n	800535a <__libc_init_array+0x2e>
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	f855 3b04 	ldr.w	r3, [r5], #4
 8005354:	4798      	blx	r3
 8005356:	3601      	adds	r6, #1
 8005358:	e7ee      	b.n	8005338 <__libc_init_array+0xc>
 800535a:	f855 3b04 	ldr.w	r3, [r5], #4
 800535e:	4798      	blx	r3
 8005360:	3601      	adds	r6, #1
 8005362:	e7f2      	b.n	800534a <__libc_init_array+0x1e>
 8005364:	080074e4 	.word	0x080074e4
 8005368:	080074e4 	.word	0x080074e4
 800536c:	080074e4 	.word	0x080074e4
 8005370:	080074e8 	.word	0x080074e8

08005374 <__retarget_lock_init_recursive>:
 8005374:	4770      	bx	lr

08005376 <__retarget_lock_acquire_recursive>:
 8005376:	4770      	bx	lr

08005378 <__retarget_lock_release_recursive>:
 8005378:	4770      	bx	lr

0800537a <quorem>:
 800537a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537e:	6903      	ldr	r3, [r0, #16]
 8005380:	690c      	ldr	r4, [r1, #16]
 8005382:	42a3      	cmp	r3, r4
 8005384:	4607      	mov	r7, r0
 8005386:	db7e      	blt.n	8005486 <quorem+0x10c>
 8005388:	3c01      	subs	r4, #1
 800538a:	f101 0814 	add.w	r8, r1, #20
 800538e:	f100 0514 	add.w	r5, r0, #20
 8005392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800539c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053a0:	3301      	adds	r3, #1
 80053a2:	429a      	cmp	r2, r3
 80053a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80053b0:	d331      	bcc.n	8005416 <quorem+0x9c>
 80053b2:	f04f 0e00 	mov.w	lr, #0
 80053b6:	4640      	mov	r0, r8
 80053b8:	46ac      	mov	ip, r5
 80053ba:	46f2      	mov	sl, lr
 80053bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80053c0:	b293      	uxth	r3, r2
 80053c2:	fb06 e303 	mla	r3, r6, r3, lr
 80053c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053ca:	0c1a      	lsrs	r2, r3, #16
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	ebaa 0303 	sub.w	r3, sl, r3
 80053d2:	f8dc a000 	ldr.w	sl, [ip]
 80053d6:	fa13 f38a 	uxtah	r3, r3, sl
 80053da:	fb06 220e 	mla	r2, r6, lr, r2
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	9b00      	ldr	r3, [sp, #0]
 80053e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053e6:	b292      	uxth	r2, r2
 80053e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80053f4:	4581      	cmp	r9, r0
 80053f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053fa:	f84c 3b04 	str.w	r3, [ip], #4
 80053fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005402:	d2db      	bcs.n	80053bc <quorem+0x42>
 8005404:	f855 300b 	ldr.w	r3, [r5, fp]
 8005408:	b92b      	cbnz	r3, 8005416 <quorem+0x9c>
 800540a:	9b01      	ldr	r3, [sp, #4]
 800540c:	3b04      	subs	r3, #4
 800540e:	429d      	cmp	r5, r3
 8005410:	461a      	mov	r2, r3
 8005412:	d32c      	bcc.n	800546e <quorem+0xf4>
 8005414:	613c      	str	r4, [r7, #16]
 8005416:	4638      	mov	r0, r7
 8005418:	f001 f9a8 	bl	800676c <__mcmp>
 800541c:	2800      	cmp	r0, #0
 800541e:	db22      	blt.n	8005466 <quorem+0xec>
 8005420:	3601      	adds	r6, #1
 8005422:	4629      	mov	r1, r5
 8005424:	2000      	movs	r0, #0
 8005426:	f858 2b04 	ldr.w	r2, [r8], #4
 800542a:	f8d1 c000 	ldr.w	ip, [r1]
 800542e:	b293      	uxth	r3, r2
 8005430:	1ac3      	subs	r3, r0, r3
 8005432:	0c12      	lsrs	r2, r2, #16
 8005434:	fa13 f38c 	uxtah	r3, r3, ip
 8005438:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800543c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005440:	b29b      	uxth	r3, r3
 8005442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005446:	45c1      	cmp	r9, r8
 8005448:	f841 3b04 	str.w	r3, [r1], #4
 800544c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005450:	d2e9      	bcs.n	8005426 <quorem+0xac>
 8005452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800545a:	b922      	cbnz	r2, 8005466 <quorem+0xec>
 800545c:	3b04      	subs	r3, #4
 800545e:	429d      	cmp	r5, r3
 8005460:	461a      	mov	r2, r3
 8005462:	d30a      	bcc.n	800547a <quorem+0x100>
 8005464:	613c      	str	r4, [r7, #16]
 8005466:	4630      	mov	r0, r6
 8005468:	b003      	add	sp, #12
 800546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	3b04      	subs	r3, #4
 8005472:	2a00      	cmp	r2, #0
 8005474:	d1ce      	bne.n	8005414 <quorem+0x9a>
 8005476:	3c01      	subs	r4, #1
 8005478:	e7c9      	b.n	800540e <quorem+0x94>
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	3b04      	subs	r3, #4
 800547e:	2a00      	cmp	r2, #0
 8005480:	d1f0      	bne.n	8005464 <quorem+0xea>
 8005482:	3c01      	subs	r4, #1
 8005484:	e7eb      	b.n	800545e <quorem+0xe4>
 8005486:	2000      	movs	r0, #0
 8005488:	e7ee      	b.n	8005468 <quorem+0xee>
 800548a:	0000      	movs	r0, r0
 800548c:	0000      	movs	r0, r0
	...

08005490 <_dtoa_r>:
 8005490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005494:	ed2d 8b04 	vpush	{d8-d9}
 8005498:	69c5      	ldr	r5, [r0, #28]
 800549a:	b093      	sub	sp, #76	; 0x4c
 800549c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80054a0:	ec57 6b10 	vmov	r6, r7, d0
 80054a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054a8:	9107      	str	r1, [sp, #28]
 80054aa:	4604      	mov	r4, r0
 80054ac:	920a      	str	r2, [sp, #40]	; 0x28
 80054ae:	930d      	str	r3, [sp, #52]	; 0x34
 80054b0:	b975      	cbnz	r5, 80054d0 <_dtoa_r+0x40>
 80054b2:	2010      	movs	r0, #16
 80054b4:	f000 fe2a 	bl	800610c <malloc>
 80054b8:	4602      	mov	r2, r0
 80054ba:	61e0      	str	r0, [r4, #28]
 80054bc:	b920      	cbnz	r0, 80054c8 <_dtoa_r+0x38>
 80054be:	4bae      	ldr	r3, [pc, #696]	; (8005778 <_dtoa_r+0x2e8>)
 80054c0:	21ef      	movs	r1, #239	; 0xef
 80054c2:	48ae      	ldr	r0, [pc, #696]	; (800577c <_dtoa_r+0x2ec>)
 80054c4:	f001 fb1e 	bl	8006b04 <__assert_func>
 80054c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054cc:	6005      	str	r5, [r0, #0]
 80054ce:	60c5      	str	r5, [r0, #12]
 80054d0:	69e3      	ldr	r3, [r4, #28]
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	b151      	cbz	r1, 80054ec <_dtoa_r+0x5c>
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	604a      	str	r2, [r1, #4]
 80054da:	2301      	movs	r3, #1
 80054dc:	4093      	lsls	r3, r2
 80054de:	608b      	str	r3, [r1, #8]
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 ff07 	bl	80062f4 <_Bfree>
 80054e6:	69e3      	ldr	r3, [r4, #28]
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	1e3b      	subs	r3, r7, #0
 80054ee:	bfbb      	ittet	lt
 80054f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054f4:	9303      	strlt	r3, [sp, #12]
 80054f6:	2300      	movge	r3, #0
 80054f8:	2201      	movlt	r2, #1
 80054fa:	bfac      	ite	ge
 80054fc:	f8c8 3000 	strge.w	r3, [r8]
 8005500:	f8c8 2000 	strlt.w	r2, [r8]
 8005504:	4b9e      	ldr	r3, [pc, #632]	; (8005780 <_dtoa_r+0x2f0>)
 8005506:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800550a:	ea33 0308 	bics.w	r3, r3, r8
 800550e:	d11b      	bne.n	8005548 <_dtoa_r+0xb8>
 8005510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005512:	f242 730f 	movw	r3, #9999	; 0x270f
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800551c:	4333      	orrs	r3, r6
 800551e:	f000 8593 	beq.w	8006048 <_dtoa_r+0xbb8>
 8005522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005524:	b963      	cbnz	r3, 8005540 <_dtoa_r+0xb0>
 8005526:	4b97      	ldr	r3, [pc, #604]	; (8005784 <_dtoa_r+0x2f4>)
 8005528:	e027      	b.n	800557a <_dtoa_r+0xea>
 800552a:	4b97      	ldr	r3, [pc, #604]	; (8005788 <_dtoa_r+0x2f8>)
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	3308      	adds	r3, #8
 8005530:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	9800      	ldr	r0, [sp, #0]
 8005536:	b013      	add	sp, #76	; 0x4c
 8005538:	ecbd 8b04 	vpop	{d8-d9}
 800553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005540:	4b90      	ldr	r3, [pc, #576]	; (8005784 <_dtoa_r+0x2f4>)
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	3303      	adds	r3, #3
 8005546:	e7f3      	b.n	8005530 <_dtoa_r+0xa0>
 8005548:	ed9d 7b02 	vldr	d7, [sp, #8]
 800554c:	2200      	movs	r2, #0
 800554e:	ec51 0b17 	vmov	r0, r1, d7
 8005552:	eeb0 8a47 	vmov.f32	s16, s14
 8005556:	eef0 8a67 	vmov.f32	s17, s15
 800555a:	2300      	movs	r3, #0
 800555c:	f7fb fabc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005560:	4681      	mov	r9, r0
 8005562:	b160      	cbz	r0, 800557e <_dtoa_r+0xee>
 8005564:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005566:	2301      	movs	r3, #1
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8568 	beq.w	8006042 <_dtoa_r+0xbb2>
 8005572:	4b86      	ldr	r3, [pc, #536]	; (800578c <_dtoa_r+0x2fc>)
 8005574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	3b01      	subs	r3, #1
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	e7da      	b.n	8005534 <_dtoa_r+0xa4>
 800557e:	aa10      	add	r2, sp, #64	; 0x40
 8005580:	a911      	add	r1, sp, #68	; 0x44
 8005582:	4620      	mov	r0, r4
 8005584:	eeb0 0a48 	vmov.f32	s0, s16
 8005588:	eef0 0a68 	vmov.f32	s1, s17
 800558c:	f001 f994 	bl	80068b8 <__d2b>
 8005590:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005594:	4682      	mov	sl, r0
 8005596:	2d00      	cmp	r5, #0
 8005598:	d07f      	beq.n	800569a <_dtoa_r+0x20a>
 800559a:	ee18 3a90 	vmov	r3, s17
 800559e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80055a6:	ec51 0b18 	vmov	r0, r1, d8
 80055aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80055ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80055b6:	4619      	mov	r1, r3
 80055b8:	2200      	movs	r2, #0
 80055ba:	4b75      	ldr	r3, [pc, #468]	; (8005790 <_dtoa_r+0x300>)
 80055bc:	f7fa fe6c 	bl	8000298 <__aeabi_dsub>
 80055c0:	a367      	add	r3, pc, #412	; (adr r3, 8005760 <_dtoa_r+0x2d0>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f7fb f81f 	bl	8000608 <__aeabi_dmul>
 80055ca:	a367      	add	r3, pc, #412	; (adr r3, 8005768 <_dtoa_r+0x2d8>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa fe64 	bl	800029c <__adddf3>
 80055d4:	4606      	mov	r6, r0
 80055d6:	4628      	mov	r0, r5
 80055d8:	460f      	mov	r7, r1
 80055da:	f7fa ffab 	bl	8000534 <__aeabi_i2d>
 80055de:	a364      	add	r3, pc, #400	; (adr r3, 8005770 <_dtoa_r+0x2e0>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	f7fb f810 	bl	8000608 <__aeabi_dmul>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4630      	mov	r0, r6
 80055ee:	4639      	mov	r1, r7
 80055f0:	f7fa fe54 	bl	800029c <__adddf3>
 80055f4:	4606      	mov	r6, r0
 80055f6:	460f      	mov	r7, r1
 80055f8:	f7fb fab6 	bl	8000b68 <__aeabi_d2iz>
 80055fc:	2200      	movs	r2, #0
 80055fe:	4683      	mov	fp, r0
 8005600:	2300      	movs	r3, #0
 8005602:	4630      	mov	r0, r6
 8005604:	4639      	mov	r1, r7
 8005606:	f7fb fa71 	bl	8000aec <__aeabi_dcmplt>
 800560a:	b148      	cbz	r0, 8005620 <_dtoa_r+0x190>
 800560c:	4658      	mov	r0, fp
 800560e:	f7fa ff91 	bl	8000534 <__aeabi_i2d>
 8005612:	4632      	mov	r2, r6
 8005614:	463b      	mov	r3, r7
 8005616:	f7fb fa5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800561a:	b908      	cbnz	r0, 8005620 <_dtoa_r+0x190>
 800561c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005620:	f1bb 0f16 	cmp.w	fp, #22
 8005624:	d857      	bhi.n	80056d6 <_dtoa_r+0x246>
 8005626:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <_dtoa_r+0x304>)
 8005628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	ec51 0b18 	vmov	r0, r1, d8
 8005634:	f7fb fa5a 	bl	8000aec <__aeabi_dcmplt>
 8005638:	2800      	cmp	r0, #0
 800563a:	d04e      	beq.n	80056da <_dtoa_r+0x24a>
 800563c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005640:	2300      	movs	r3, #0
 8005642:	930c      	str	r3, [sp, #48]	; 0x30
 8005644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005646:	1b5b      	subs	r3, r3, r5
 8005648:	1e5a      	subs	r2, r3, #1
 800564a:	bf45      	ittet	mi
 800564c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005650:	9305      	strmi	r3, [sp, #20]
 8005652:	2300      	movpl	r3, #0
 8005654:	2300      	movmi	r3, #0
 8005656:	9206      	str	r2, [sp, #24]
 8005658:	bf54      	ite	pl
 800565a:	9305      	strpl	r3, [sp, #20]
 800565c:	9306      	strmi	r3, [sp, #24]
 800565e:	f1bb 0f00 	cmp.w	fp, #0
 8005662:	db3c      	blt.n	80056de <_dtoa_r+0x24e>
 8005664:	9b06      	ldr	r3, [sp, #24]
 8005666:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800566a:	445b      	add	r3, fp
 800566c:	9306      	str	r3, [sp, #24]
 800566e:	2300      	movs	r3, #0
 8005670:	9308      	str	r3, [sp, #32]
 8005672:	9b07      	ldr	r3, [sp, #28]
 8005674:	2b09      	cmp	r3, #9
 8005676:	d868      	bhi.n	800574a <_dtoa_r+0x2ba>
 8005678:	2b05      	cmp	r3, #5
 800567a:	bfc4      	itt	gt
 800567c:	3b04      	subgt	r3, #4
 800567e:	9307      	strgt	r3, [sp, #28]
 8005680:	9b07      	ldr	r3, [sp, #28]
 8005682:	f1a3 0302 	sub.w	r3, r3, #2
 8005686:	bfcc      	ite	gt
 8005688:	2500      	movgt	r5, #0
 800568a:	2501      	movle	r5, #1
 800568c:	2b03      	cmp	r3, #3
 800568e:	f200 8085 	bhi.w	800579c <_dtoa_r+0x30c>
 8005692:	e8df f003 	tbb	[pc, r3]
 8005696:	3b2e      	.short	0x3b2e
 8005698:	5839      	.short	0x5839
 800569a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800569e:	441d      	add	r5, r3
 80056a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	bfc1      	itttt	gt
 80056a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80056b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80056b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80056b8:	bfd6      	itet	le
 80056ba:	f1c3 0320 	rsble	r3, r3, #32
 80056be:	ea48 0003 	orrgt.w	r0, r8, r3
 80056c2:	fa06 f003 	lslle.w	r0, r6, r3
 80056c6:	f7fa ff25 	bl	8000514 <__aeabi_ui2d>
 80056ca:	2201      	movs	r2, #1
 80056cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80056d0:	3d01      	subs	r5, #1
 80056d2:	920e      	str	r2, [sp, #56]	; 0x38
 80056d4:	e76f      	b.n	80055b6 <_dtoa_r+0x126>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7b3      	b.n	8005642 <_dtoa_r+0x1b2>
 80056da:	900c      	str	r0, [sp, #48]	; 0x30
 80056dc:	e7b2      	b.n	8005644 <_dtoa_r+0x1b4>
 80056de:	9b05      	ldr	r3, [sp, #20]
 80056e0:	eba3 030b 	sub.w	r3, r3, fp
 80056e4:	9305      	str	r3, [sp, #20]
 80056e6:	f1cb 0300 	rsb	r3, fp, #0
 80056ea:	9308      	str	r3, [sp, #32]
 80056ec:	2300      	movs	r3, #0
 80056ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80056f0:	e7bf      	b.n	8005672 <_dtoa_r+0x1e2>
 80056f2:	2300      	movs	r3, #0
 80056f4:	9309      	str	r3, [sp, #36]	; 0x24
 80056f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	dc52      	bgt.n	80057a2 <_dtoa_r+0x312>
 80056fc:	2301      	movs	r3, #1
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	9304      	str	r3, [sp, #16]
 8005702:	461a      	mov	r2, r3
 8005704:	920a      	str	r2, [sp, #40]	; 0x28
 8005706:	e00b      	b.n	8005720 <_dtoa_r+0x290>
 8005708:	2301      	movs	r3, #1
 800570a:	e7f3      	b.n	80056f4 <_dtoa_r+0x264>
 800570c:	2300      	movs	r3, #0
 800570e:	9309      	str	r3, [sp, #36]	; 0x24
 8005710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005712:	445b      	add	r3, fp
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	3301      	adds	r3, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	9304      	str	r3, [sp, #16]
 800571c:	bfb8      	it	lt
 800571e:	2301      	movlt	r3, #1
 8005720:	69e0      	ldr	r0, [r4, #28]
 8005722:	2100      	movs	r1, #0
 8005724:	2204      	movs	r2, #4
 8005726:	f102 0614 	add.w	r6, r2, #20
 800572a:	429e      	cmp	r6, r3
 800572c:	d93d      	bls.n	80057aa <_dtoa_r+0x31a>
 800572e:	6041      	str	r1, [r0, #4]
 8005730:	4620      	mov	r0, r4
 8005732:	f000 fd9f 	bl	8006274 <_Balloc>
 8005736:	9000      	str	r0, [sp, #0]
 8005738:	2800      	cmp	r0, #0
 800573a:	d139      	bne.n	80057b0 <_dtoa_r+0x320>
 800573c:	4b16      	ldr	r3, [pc, #88]	; (8005798 <_dtoa_r+0x308>)
 800573e:	4602      	mov	r2, r0
 8005740:	f240 11af 	movw	r1, #431	; 0x1af
 8005744:	e6bd      	b.n	80054c2 <_dtoa_r+0x32>
 8005746:	2301      	movs	r3, #1
 8005748:	e7e1      	b.n	800570e <_dtoa_r+0x27e>
 800574a:	2501      	movs	r5, #1
 800574c:	2300      	movs	r3, #0
 800574e:	9307      	str	r3, [sp, #28]
 8005750:	9509      	str	r5, [sp, #36]	; 0x24
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	9304      	str	r3, [sp, #16]
 800575a:	2200      	movs	r2, #0
 800575c:	2312      	movs	r3, #18
 800575e:	e7d1      	b.n	8005704 <_dtoa_r+0x274>
 8005760:	636f4361 	.word	0x636f4361
 8005764:	3fd287a7 	.word	0x3fd287a7
 8005768:	8b60c8b3 	.word	0x8b60c8b3
 800576c:	3fc68a28 	.word	0x3fc68a28
 8005770:	509f79fb 	.word	0x509f79fb
 8005774:	3fd34413 	.word	0x3fd34413
 8005778:	080071b1 	.word	0x080071b1
 800577c:	080071c8 	.word	0x080071c8
 8005780:	7ff00000 	.word	0x7ff00000
 8005784:	080071ad 	.word	0x080071ad
 8005788:	080071a4 	.word	0x080071a4
 800578c:	08007181 	.word	0x08007181
 8005790:	3ff80000 	.word	0x3ff80000
 8005794:	080072b8 	.word	0x080072b8
 8005798:	08007220 	.word	0x08007220
 800579c:	2301      	movs	r3, #1
 800579e:	9309      	str	r3, [sp, #36]	; 0x24
 80057a0:	e7d7      	b.n	8005752 <_dtoa_r+0x2c2>
 80057a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	e7ba      	b.n	8005720 <_dtoa_r+0x290>
 80057aa:	3101      	adds	r1, #1
 80057ac:	0052      	lsls	r2, r2, #1
 80057ae:	e7ba      	b.n	8005726 <_dtoa_r+0x296>
 80057b0:	69e3      	ldr	r3, [r4, #28]
 80057b2:	9a00      	ldr	r2, [sp, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	9b04      	ldr	r3, [sp, #16]
 80057b8:	2b0e      	cmp	r3, #14
 80057ba:	f200 80a8 	bhi.w	800590e <_dtoa_r+0x47e>
 80057be:	2d00      	cmp	r5, #0
 80057c0:	f000 80a5 	beq.w	800590e <_dtoa_r+0x47e>
 80057c4:	f1bb 0f00 	cmp.w	fp, #0
 80057c8:	dd38      	ble.n	800583c <_dtoa_r+0x3ac>
 80057ca:	4bc0      	ldr	r3, [pc, #768]	; (8005acc <_dtoa_r+0x63c>)
 80057cc:	f00b 020f 	and.w	r2, fp, #15
 80057d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80057d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80057dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80057e0:	d019      	beq.n	8005816 <_dtoa_r+0x386>
 80057e2:	4bbb      	ldr	r3, [pc, #748]	; (8005ad0 <_dtoa_r+0x640>)
 80057e4:	ec51 0b18 	vmov	r0, r1, d8
 80057e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057ec:	f7fb f836 	bl	800085c <__aeabi_ddiv>
 80057f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057f4:	f008 080f 	and.w	r8, r8, #15
 80057f8:	2503      	movs	r5, #3
 80057fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005ad0 <_dtoa_r+0x640>
 80057fe:	f1b8 0f00 	cmp.w	r8, #0
 8005802:	d10a      	bne.n	800581a <_dtoa_r+0x38a>
 8005804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005808:	4632      	mov	r2, r6
 800580a:	463b      	mov	r3, r7
 800580c:	f7fb f826 	bl	800085c <__aeabi_ddiv>
 8005810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005814:	e02b      	b.n	800586e <_dtoa_r+0x3de>
 8005816:	2502      	movs	r5, #2
 8005818:	e7ef      	b.n	80057fa <_dtoa_r+0x36a>
 800581a:	f018 0f01 	tst.w	r8, #1
 800581e:	d008      	beq.n	8005832 <_dtoa_r+0x3a2>
 8005820:	4630      	mov	r0, r6
 8005822:	4639      	mov	r1, r7
 8005824:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005828:	f7fa feee 	bl	8000608 <__aeabi_dmul>
 800582c:	3501      	adds	r5, #1
 800582e:	4606      	mov	r6, r0
 8005830:	460f      	mov	r7, r1
 8005832:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005836:	f109 0908 	add.w	r9, r9, #8
 800583a:	e7e0      	b.n	80057fe <_dtoa_r+0x36e>
 800583c:	f000 809f 	beq.w	800597e <_dtoa_r+0x4ee>
 8005840:	f1cb 0600 	rsb	r6, fp, #0
 8005844:	4ba1      	ldr	r3, [pc, #644]	; (8005acc <_dtoa_r+0x63c>)
 8005846:	4fa2      	ldr	r7, [pc, #648]	; (8005ad0 <_dtoa_r+0x640>)
 8005848:	f006 020f 	and.w	r2, r6, #15
 800584c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	ec51 0b18 	vmov	r0, r1, d8
 8005858:	f7fa fed6 	bl	8000608 <__aeabi_dmul>
 800585c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005860:	1136      	asrs	r6, r6, #4
 8005862:	2300      	movs	r3, #0
 8005864:	2502      	movs	r5, #2
 8005866:	2e00      	cmp	r6, #0
 8005868:	d17e      	bne.n	8005968 <_dtoa_r+0x4d8>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1d0      	bne.n	8005810 <_dtoa_r+0x380>
 800586e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005870:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8084 	beq.w	8005982 <_dtoa_r+0x4f2>
 800587a:	4b96      	ldr	r3, [pc, #600]	; (8005ad4 <_dtoa_r+0x644>)
 800587c:	2200      	movs	r2, #0
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fb f933 	bl	8000aec <__aeabi_dcmplt>
 8005886:	2800      	cmp	r0, #0
 8005888:	d07b      	beq.n	8005982 <_dtoa_r+0x4f2>
 800588a:	9b04      	ldr	r3, [sp, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d078      	beq.n	8005982 <_dtoa_r+0x4f2>
 8005890:	9b01      	ldr	r3, [sp, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	dd39      	ble.n	800590a <_dtoa_r+0x47a>
 8005896:	4b90      	ldr	r3, [pc, #576]	; (8005ad8 <_dtoa_r+0x648>)
 8005898:	2200      	movs	r2, #0
 800589a:	4640      	mov	r0, r8
 800589c:	4649      	mov	r1, r9
 800589e:	f7fa feb3 	bl	8000608 <__aeabi_dmul>
 80058a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058a6:	9e01      	ldr	r6, [sp, #4]
 80058a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80058ac:	3501      	adds	r5, #1
 80058ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058b2:	4628      	mov	r0, r5
 80058b4:	f7fa fe3e 	bl	8000534 <__aeabi_i2d>
 80058b8:	4642      	mov	r2, r8
 80058ba:	464b      	mov	r3, r9
 80058bc:	f7fa fea4 	bl	8000608 <__aeabi_dmul>
 80058c0:	4b86      	ldr	r3, [pc, #536]	; (8005adc <_dtoa_r+0x64c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f7fa fcea 	bl	800029c <__adddf3>
 80058c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80058cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058d0:	9303      	str	r3, [sp, #12]
 80058d2:	2e00      	cmp	r6, #0
 80058d4:	d158      	bne.n	8005988 <_dtoa_r+0x4f8>
 80058d6:	4b82      	ldr	r3, [pc, #520]	; (8005ae0 <_dtoa_r+0x650>)
 80058d8:	2200      	movs	r2, #0
 80058da:	4640      	mov	r0, r8
 80058dc:	4649      	mov	r1, r9
 80058de:	f7fa fcdb 	bl	8000298 <__aeabi_dsub>
 80058e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058e6:	4680      	mov	r8, r0
 80058e8:	4689      	mov	r9, r1
 80058ea:	f7fb f91d 	bl	8000b28 <__aeabi_dcmpgt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	f040 8296 	bne.w	8005e20 <_dtoa_r+0x990>
 80058f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80058f8:	4640      	mov	r0, r8
 80058fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058fe:	4649      	mov	r1, r9
 8005900:	f7fb f8f4 	bl	8000aec <__aeabi_dcmplt>
 8005904:	2800      	cmp	r0, #0
 8005906:	f040 8289 	bne.w	8005e1c <_dtoa_r+0x98c>
 800590a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800590e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005910:	2b00      	cmp	r3, #0
 8005912:	f2c0 814e 	blt.w	8005bb2 <_dtoa_r+0x722>
 8005916:	f1bb 0f0e 	cmp.w	fp, #14
 800591a:	f300 814a 	bgt.w	8005bb2 <_dtoa_r+0x722>
 800591e:	4b6b      	ldr	r3, [pc, #428]	; (8005acc <_dtoa_r+0x63c>)
 8005920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005924:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	f280 80dc 	bge.w	8005ae8 <_dtoa_r+0x658>
 8005930:	9b04      	ldr	r3, [sp, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f300 80d8 	bgt.w	8005ae8 <_dtoa_r+0x658>
 8005938:	f040 826f 	bne.w	8005e1a <_dtoa_r+0x98a>
 800593c:	4b68      	ldr	r3, [pc, #416]	; (8005ae0 <_dtoa_r+0x650>)
 800593e:	2200      	movs	r2, #0
 8005940:	4640      	mov	r0, r8
 8005942:	4649      	mov	r1, r9
 8005944:	f7fa fe60 	bl	8000608 <__aeabi_dmul>
 8005948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800594c:	f7fb f8e2 	bl	8000b14 <__aeabi_dcmpge>
 8005950:	9e04      	ldr	r6, [sp, #16]
 8005952:	4637      	mov	r7, r6
 8005954:	2800      	cmp	r0, #0
 8005956:	f040 8245 	bne.w	8005de4 <_dtoa_r+0x954>
 800595a:	9d00      	ldr	r5, [sp, #0]
 800595c:	2331      	movs	r3, #49	; 0x31
 800595e:	f805 3b01 	strb.w	r3, [r5], #1
 8005962:	f10b 0b01 	add.w	fp, fp, #1
 8005966:	e241      	b.n	8005dec <_dtoa_r+0x95c>
 8005968:	07f2      	lsls	r2, r6, #31
 800596a:	d505      	bpl.n	8005978 <_dtoa_r+0x4e8>
 800596c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005970:	f7fa fe4a 	bl	8000608 <__aeabi_dmul>
 8005974:	3501      	adds	r5, #1
 8005976:	2301      	movs	r3, #1
 8005978:	1076      	asrs	r6, r6, #1
 800597a:	3708      	adds	r7, #8
 800597c:	e773      	b.n	8005866 <_dtoa_r+0x3d6>
 800597e:	2502      	movs	r5, #2
 8005980:	e775      	b.n	800586e <_dtoa_r+0x3de>
 8005982:	9e04      	ldr	r6, [sp, #16]
 8005984:	465f      	mov	r7, fp
 8005986:	e792      	b.n	80058ae <_dtoa_r+0x41e>
 8005988:	9900      	ldr	r1, [sp, #0]
 800598a:	4b50      	ldr	r3, [pc, #320]	; (8005acc <_dtoa_r+0x63c>)
 800598c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005990:	4431      	add	r1, r6
 8005992:	9102      	str	r1, [sp, #8]
 8005994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005996:	eeb0 9a47 	vmov.f32	s18, s14
 800599a:	eef0 9a67 	vmov.f32	s19, s15
 800599e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059a6:	2900      	cmp	r1, #0
 80059a8:	d044      	beq.n	8005a34 <_dtoa_r+0x5a4>
 80059aa:	494e      	ldr	r1, [pc, #312]	; (8005ae4 <_dtoa_r+0x654>)
 80059ac:	2000      	movs	r0, #0
 80059ae:	f7fa ff55 	bl	800085c <__aeabi_ddiv>
 80059b2:	ec53 2b19 	vmov	r2, r3, d9
 80059b6:	f7fa fc6f 	bl	8000298 <__aeabi_dsub>
 80059ba:	9d00      	ldr	r5, [sp, #0]
 80059bc:	ec41 0b19 	vmov	d9, r0, r1
 80059c0:	4649      	mov	r1, r9
 80059c2:	4640      	mov	r0, r8
 80059c4:	f7fb f8d0 	bl	8000b68 <__aeabi_d2iz>
 80059c8:	4606      	mov	r6, r0
 80059ca:	f7fa fdb3 	bl	8000534 <__aeabi_i2d>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4640      	mov	r0, r8
 80059d4:	4649      	mov	r1, r9
 80059d6:	f7fa fc5f 	bl	8000298 <__aeabi_dsub>
 80059da:	3630      	adds	r6, #48	; 0x30
 80059dc:	f805 6b01 	strb.w	r6, [r5], #1
 80059e0:	ec53 2b19 	vmov	r2, r3, d9
 80059e4:	4680      	mov	r8, r0
 80059e6:	4689      	mov	r9, r1
 80059e8:	f7fb f880 	bl	8000aec <__aeabi_dcmplt>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d164      	bne.n	8005aba <_dtoa_r+0x62a>
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	4937      	ldr	r1, [pc, #220]	; (8005ad4 <_dtoa_r+0x644>)
 80059f6:	2000      	movs	r0, #0
 80059f8:	f7fa fc4e 	bl	8000298 <__aeabi_dsub>
 80059fc:	ec53 2b19 	vmov	r2, r3, d9
 8005a00:	f7fb f874 	bl	8000aec <__aeabi_dcmplt>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	f040 80b6 	bne.w	8005b76 <_dtoa_r+0x6e6>
 8005a0a:	9b02      	ldr	r3, [sp, #8]
 8005a0c:	429d      	cmp	r5, r3
 8005a0e:	f43f af7c 	beq.w	800590a <_dtoa_r+0x47a>
 8005a12:	4b31      	ldr	r3, [pc, #196]	; (8005ad8 <_dtoa_r+0x648>)
 8005a14:	ec51 0b19 	vmov	r0, r1, d9
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f7fa fdf5 	bl	8000608 <__aeabi_dmul>
 8005a1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ad8 <_dtoa_r+0x648>)
 8005a20:	ec41 0b19 	vmov	d9, r0, r1
 8005a24:	2200      	movs	r2, #0
 8005a26:	4640      	mov	r0, r8
 8005a28:	4649      	mov	r1, r9
 8005a2a:	f7fa fded 	bl	8000608 <__aeabi_dmul>
 8005a2e:	4680      	mov	r8, r0
 8005a30:	4689      	mov	r9, r1
 8005a32:	e7c5      	b.n	80059c0 <_dtoa_r+0x530>
 8005a34:	ec51 0b17 	vmov	r0, r1, d7
 8005a38:	f7fa fde6 	bl	8000608 <__aeabi_dmul>
 8005a3c:	9b02      	ldr	r3, [sp, #8]
 8005a3e:	9d00      	ldr	r5, [sp, #0]
 8005a40:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a42:	ec41 0b19 	vmov	d9, r0, r1
 8005a46:	4649      	mov	r1, r9
 8005a48:	4640      	mov	r0, r8
 8005a4a:	f7fb f88d 	bl	8000b68 <__aeabi_d2iz>
 8005a4e:	4606      	mov	r6, r0
 8005a50:	f7fa fd70 	bl	8000534 <__aeabi_i2d>
 8005a54:	3630      	adds	r6, #48	; 0x30
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f7fa fc1b 	bl	8000298 <__aeabi_dsub>
 8005a62:	f805 6b01 	strb.w	r6, [r5], #1
 8005a66:	9b02      	ldr	r3, [sp, #8]
 8005a68:	429d      	cmp	r5, r3
 8005a6a:	4680      	mov	r8, r0
 8005a6c:	4689      	mov	r9, r1
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	d124      	bne.n	8005abe <_dtoa_r+0x62e>
 8005a74:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <_dtoa_r+0x654>)
 8005a76:	ec51 0b19 	vmov	r0, r1, d9
 8005a7a:	f7fa fc0f 	bl	800029c <__adddf3>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fb f84f 	bl	8000b28 <__aeabi_dcmpgt>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d173      	bne.n	8005b76 <_dtoa_r+0x6e6>
 8005a8e:	ec53 2b19 	vmov	r2, r3, d9
 8005a92:	4914      	ldr	r1, [pc, #80]	; (8005ae4 <_dtoa_r+0x654>)
 8005a94:	2000      	movs	r0, #0
 8005a96:	f7fa fbff 	bl	8000298 <__aeabi_dsub>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	f7fb f823 	bl	8000aec <__aeabi_dcmplt>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f43f af2f 	beq.w	800590a <_dtoa_r+0x47a>
 8005aac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005aae:	1e6b      	subs	r3, r5, #1
 8005ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ab2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ab6:	2b30      	cmp	r3, #48	; 0x30
 8005ab8:	d0f8      	beq.n	8005aac <_dtoa_r+0x61c>
 8005aba:	46bb      	mov	fp, r7
 8005abc:	e04a      	b.n	8005b54 <_dtoa_r+0x6c4>
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <_dtoa_r+0x648>)
 8005ac0:	f7fa fda2 	bl	8000608 <__aeabi_dmul>
 8005ac4:	4680      	mov	r8, r0
 8005ac6:	4689      	mov	r9, r1
 8005ac8:	e7bd      	b.n	8005a46 <_dtoa_r+0x5b6>
 8005aca:	bf00      	nop
 8005acc:	080072b8 	.word	0x080072b8
 8005ad0:	08007290 	.word	0x08007290
 8005ad4:	3ff00000 	.word	0x3ff00000
 8005ad8:	40240000 	.word	0x40240000
 8005adc:	401c0000 	.word	0x401c0000
 8005ae0:	40140000 	.word	0x40140000
 8005ae4:	3fe00000 	.word	0x3fe00000
 8005ae8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005aec:	9d00      	ldr	r5, [sp, #0]
 8005aee:	4642      	mov	r2, r8
 8005af0:	464b      	mov	r3, r9
 8005af2:	4630      	mov	r0, r6
 8005af4:	4639      	mov	r1, r7
 8005af6:	f7fa feb1 	bl	800085c <__aeabi_ddiv>
 8005afa:	f7fb f835 	bl	8000b68 <__aeabi_d2iz>
 8005afe:	9001      	str	r0, [sp, #4]
 8005b00:	f7fa fd18 	bl	8000534 <__aeabi_i2d>
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	f7fa fd7e 	bl	8000608 <__aeabi_dmul>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4630      	mov	r0, r6
 8005b12:	4639      	mov	r1, r7
 8005b14:	f7fa fbc0 	bl	8000298 <__aeabi_dsub>
 8005b18:	9e01      	ldr	r6, [sp, #4]
 8005b1a:	9f04      	ldr	r7, [sp, #16]
 8005b1c:	3630      	adds	r6, #48	; 0x30
 8005b1e:	f805 6b01 	strb.w	r6, [r5], #1
 8005b22:	9e00      	ldr	r6, [sp, #0]
 8005b24:	1bae      	subs	r6, r5, r6
 8005b26:	42b7      	cmp	r7, r6
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	d134      	bne.n	8005b98 <_dtoa_r+0x708>
 8005b2e:	f7fa fbb5 	bl	800029c <__adddf3>
 8005b32:	4642      	mov	r2, r8
 8005b34:	464b      	mov	r3, r9
 8005b36:	4606      	mov	r6, r0
 8005b38:	460f      	mov	r7, r1
 8005b3a:	f7fa fff5 	bl	8000b28 <__aeabi_dcmpgt>
 8005b3e:	b9c8      	cbnz	r0, 8005b74 <_dtoa_r+0x6e4>
 8005b40:	4642      	mov	r2, r8
 8005b42:	464b      	mov	r3, r9
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa ffc6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b4c:	b110      	cbz	r0, 8005b54 <_dtoa_r+0x6c4>
 8005b4e:	9b01      	ldr	r3, [sp, #4]
 8005b50:	07db      	lsls	r3, r3, #31
 8005b52:	d40f      	bmi.n	8005b74 <_dtoa_r+0x6e4>
 8005b54:	4651      	mov	r1, sl
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fbcc 	bl	80062f4 <_Bfree>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b60:	702b      	strb	r3, [r5, #0]
 8005b62:	f10b 0301 	add.w	r3, fp, #1
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f43f ace2 	beq.w	8005534 <_dtoa_r+0xa4>
 8005b70:	601d      	str	r5, [r3, #0]
 8005b72:	e4df      	b.n	8005534 <_dtoa_r+0xa4>
 8005b74:	465f      	mov	r7, fp
 8005b76:	462b      	mov	r3, r5
 8005b78:	461d      	mov	r5, r3
 8005b7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b7e:	2a39      	cmp	r2, #57	; 0x39
 8005b80:	d106      	bne.n	8005b90 <_dtoa_r+0x700>
 8005b82:	9a00      	ldr	r2, [sp, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1f7      	bne.n	8005b78 <_dtoa_r+0x6e8>
 8005b88:	9900      	ldr	r1, [sp, #0]
 8005b8a:	2230      	movs	r2, #48	; 0x30
 8005b8c:	3701      	adds	r7, #1
 8005b8e:	700a      	strb	r2, [r1, #0]
 8005b90:	781a      	ldrb	r2, [r3, #0]
 8005b92:	3201      	adds	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e790      	b.n	8005aba <_dtoa_r+0x62a>
 8005b98:	4ba3      	ldr	r3, [pc, #652]	; (8005e28 <_dtoa_r+0x998>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f7fa fd34 	bl	8000608 <__aeabi_dmul>
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	f7fa ff96 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d09e      	beq.n	8005aee <_dtoa_r+0x65e>
 8005bb0:	e7d0      	b.n	8005b54 <_dtoa_r+0x6c4>
 8005bb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	f000 80ca 	beq.w	8005d4e <_dtoa_r+0x8be>
 8005bba:	9a07      	ldr	r2, [sp, #28]
 8005bbc:	2a01      	cmp	r2, #1
 8005bbe:	f300 80ad 	bgt.w	8005d1c <_dtoa_r+0x88c>
 8005bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bc4:	2a00      	cmp	r2, #0
 8005bc6:	f000 80a5 	beq.w	8005d14 <_dtoa_r+0x884>
 8005bca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bce:	9e08      	ldr	r6, [sp, #32]
 8005bd0:	9d05      	ldr	r5, [sp, #20]
 8005bd2:	9a05      	ldr	r2, [sp, #20]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	9205      	str	r2, [sp, #20]
 8005bd8:	9a06      	ldr	r2, [sp, #24]
 8005bda:	2101      	movs	r1, #1
 8005bdc:	441a      	add	r2, r3
 8005bde:	4620      	mov	r0, r4
 8005be0:	9206      	str	r2, [sp, #24]
 8005be2:	f000 fc3d 	bl	8006460 <__i2b>
 8005be6:	4607      	mov	r7, r0
 8005be8:	b165      	cbz	r5, 8005c04 <_dtoa_r+0x774>
 8005bea:	9b06      	ldr	r3, [sp, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	dd09      	ble.n	8005c04 <_dtoa_r+0x774>
 8005bf0:	42ab      	cmp	r3, r5
 8005bf2:	9a05      	ldr	r2, [sp, #20]
 8005bf4:	bfa8      	it	ge
 8005bf6:	462b      	movge	r3, r5
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	9205      	str	r2, [sp, #20]
 8005bfc:	9a06      	ldr	r2, [sp, #24]
 8005bfe:	1aed      	subs	r5, r5, r3
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	9306      	str	r3, [sp, #24]
 8005c04:	9b08      	ldr	r3, [sp, #32]
 8005c06:	b1f3      	cbz	r3, 8005c46 <_dtoa_r+0x7b6>
 8005c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 80a3 	beq.w	8005d56 <_dtoa_r+0x8c6>
 8005c10:	2e00      	cmp	r6, #0
 8005c12:	dd10      	ble.n	8005c36 <_dtoa_r+0x7a6>
 8005c14:	4639      	mov	r1, r7
 8005c16:	4632      	mov	r2, r6
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 fce1 	bl	80065e0 <__pow5mult>
 8005c1e:	4652      	mov	r2, sl
 8005c20:	4601      	mov	r1, r0
 8005c22:	4607      	mov	r7, r0
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 fc31 	bl	800648c <__multiply>
 8005c2a:	4651      	mov	r1, sl
 8005c2c:	4680      	mov	r8, r0
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f000 fb60 	bl	80062f4 <_Bfree>
 8005c34:	46c2      	mov	sl, r8
 8005c36:	9b08      	ldr	r3, [sp, #32]
 8005c38:	1b9a      	subs	r2, r3, r6
 8005c3a:	d004      	beq.n	8005c46 <_dtoa_r+0x7b6>
 8005c3c:	4651      	mov	r1, sl
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f000 fcce 	bl	80065e0 <__pow5mult>
 8005c44:	4682      	mov	sl, r0
 8005c46:	2101      	movs	r1, #1
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fc09 	bl	8006460 <__i2b>
 8005c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	4606      	mov	r6, r0
 8005c54:	f340 8081 	ble.w	8005d5a <_dtoa_r+0x8ca>
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f000 fcbf 	bl	80065e0 <__pow5mult>
 8005c62:	9b07      	ldr	r3, [sp, #28]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	4606      	mov	r6, r0
 8005c68:	dd7a      	ble.n	8005d60 <_dtoa_r+0x8d0>
 8005c6a:	f04f 0800 	mov.w	r8, #0
 8005c6e:	6933      	ldr	r3, [r6, #16]
 8005c70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c74:	6918      	ldr	r0, [r3, #16]
 8005c76:	f000 fba5 	bl	80063c4 <__hi0bits>
 8005c7a:	f1c0 0020 	rsb	r0, r0, #32
 8005c7e:	9b06      	ldr	r3, [sp, #24]
 8005c80:	4418      	add	r0, r3
 8005c82:	f010 001f 	ands.w	r0, r0, #31
 8005c86:	f000 8094 	beq.w	8005db2 <_dtoa_r+0x922>
 8005c8a:	f1c0 0320 	rsb	r3, r0, #32
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	f340 8085 	ble.w	8005d9e <_dtoa_r+0x90e>
 8005c94:	9b05      	ldr	r3, [sp, #20]
 8005c96:	f1c0 001c 	rsb	r0, r0, #28
 8005c9a:	4403      	add	r3, r0
 8005c9c:	9305      	str	r3, [sp, #20]
 8005c9e:	9b06      	ldr	r3, [sp, #24]
 8005ca0:	4403      	add	r3, r0
 8005ca2:	4405      	add	r5, r0
 8005ca4:	9306      	str	r3, [sp, #24]
 8005ca6:	9b05      	ldr	r3, [sp, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dd05      	ble.n	8005cb8 <_dtoa_r+0x828>
 8005cac:	4651      	mov	r1, sl
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f000 fcef 	bl	8006694 <__lshift>
 8005cb6:	4682      	mov	sl, r0
 8005cb8:	9b06      	ldr	r3, [sp, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	dd05      	ble.n	8005cca <_dtoa_r+0x83a>
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 fce6 	bl	8006694 <__lshift>
 8005cc8:	4606      	mov	r6, r0
 8005cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d072      	beq.n	8005db6 <_dtoa_r+0x926>
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4650      	mov	r0, sl
 8005cd4:	f000 fd4a 	bl	800676c <__mcmp>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	da6c      	bge.n	8005db6 <_dtoa_r+0x926>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4651      	mov	r1, sl
 8005ce0:	220a      	movs	r2, #10
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 fb28 	bl	8006338 <__multadd>
 8005ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cee:	4682      	mov	sl, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 81b0 	beq.w	8006056 <_dtoa_r+0xbc6>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	220a      	movs	r2, #10
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 fb1b 	bl	8006338 <__multadd>
 8005d02:	9b01      	ldr	r3, [sp, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	4607      	mov	r7, r0
 8005d08:	f300 8096 	bgt.w	8005e38 <_dtoa_r+0x9a8>
 8005d0c:	9b07      	ldr	r3, [sp, #28]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	dc59      	bgt.n	8005dc6 <_dtoa_r+0x936>
 8005d12:	e091      	b.n	8005e38 <_dtoa_r+0x9a8>
 8005d14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d1a:	e758      	b.n	8005bce <_dtoa_r+0x73e>
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	1e5e      	subs	r6, r3, #1
 8005d20:	9b08      	ldr	r3, [sp, #32]
 8005d22:	42b3      	cmp	r3, r6
 8005d24:	bfbf      	itttt	lt
 8005d26:	9b08      	ldrlt	r3, [sp, #32]
 8005d28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005d2a:	9608      	strlt	r6, [sp, #32]
 8005d2c:	1af3      	sublt	r3, r6, r3
 8005d2e:	bfb4      	ite	lt
 8005d30:	18d2      	addlt	r2, r2, r3
 8005d32:	1b9e      	subge	r6, r3, r6
 8005d34:	9b04      	ldr	r3, [sp, #16]
 8005d36:	bfbc      	itt	lt
 8005d38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005d3a:	2600      	movlt	r6, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bfb7      	itett	lt
 8005d40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005d44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005d48:	1a9d      	sublt	r5, r3, r2
 8005d4a:	2300      	movlt	r3, #0
 8005d4c:	e741      	b.n	8005bd2 <_dtoa_r+0x742>
 8005d4e:	9e08      	ldr	r6, [sp, #32]
 8005d50:	9d05      	ldr	r5, [sp, #20]
 8005d52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d54:	e748      	b.n	8005be8 <_dtoa_r+0x758>
 8005d56:	9a08      	ldr	r2, [sp, #32]
 8005d58:	e770      	b.n	8005c3c <_dtoa_r+0x7ac>
 8005d5a:	9b07      	ldr	r3, [sp, #28]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	dc19      	bgt.n	8005d94 <_dtoa_r+0x904>
 8005d60:	9b02      	ldr	r3, [sp, #8]
 8005d62:	b9bb      	cbnz	r3, 8005d94 <_dtoa_r+0x904>
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d6a:	b99b      	cbnz	r3, 8005d94 <_dtoa_r+0x904>
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d72:	0d1b      	lsrs	r3, r3, #20
 8005d74:	051b      	lsls	r3, r3, #20
 8005d76:	b183      	cbz	r3, 8005d9a <_dtoa_r+0x90a>
 8005d78:	9b05      	ldr	r3, [sp, #20]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	9b06      	ldr	r3, [sp, #24]
 8005d80:	3301      	adds	r3, #1
 8005d82:	9306      	str	r3, [sp, #24]
 8005d84:	f04f 0801 	mov.w	r8, #1
 8005d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f47f af6f 	bne.w	8005c6e <_dtoa_r+0x7de>
 8005d90:	2001      	movs	r0, #1
 8005d92:	e774      	b.n	8005c7e <_dtoa_r+0x7ee>
 8005d94:	f04f 0800 	mov.w	r8, #0
 8005d98:	e7f6      	b.n	8005d88 <_dtoa_r+0x8f8>
 8005d9a:	4698      	mov	r8, r3
 8005d9c:	e7f4      	b.n	8005d88 <_dtoa_r+0x8f8>
 8005d9e:	d082      	beq.n	8005ca6 <_dtoa_r+0x816>
 8005da0:	9a05      	ldr	r2, [sp, #20]
 8005da2:	331c      	adds	r3, #28
 8005da4:	441a      	add	r2, r3
 8005da6:	9205      	str	r2, [sp, #20]
 8005da8:	9a06      	ldr	r2, [sp, #24]
 8005daa:	441a      	add	r2, r3
 8005dac:	441d      	add	r5, r3
 8005dae:	9206      	str	r2, [sp, #24]
 8005db0:	e779      	b.n	8005ca6 <_dtoa_r+0x816>
 8005db2:	4603      	mov	r3, r0
 8005db4:	e7f4      	b.n	8005da0 <_dtoa_r+0x910>
 8005db6:	9b04      	ldr	r3, [sp, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	dc37      	bgt.n	8005e2c <_dtoa_r+0x99c>
 8005dbc:	9b07      	ldr	r3, [sp, #28]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	dd34      	ble.n	8005e2c <_dtoa_r+0x99c>
 8005dc2:	9b04      	ldr	r3, [sp, #16]
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	9b01      	ldr	r3, [sp, #4]
 8005dc8:	b963      	cbnz	r3, 8005de4 <_dtoa_r+0x954>
 8005dca:	4631      	mov	r1, r6
 8005dcc:	2205      	movs	r2, #5
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 fab2 	bl	8006338 <__multadd>
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	4650      	mov	r0, sl
 8005dda:	f000 fcc7 	bl	800676c <__mcmp>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	f73f adbb 	bgt.w	800595a <_dtoa_r+0x4ca>
 8005de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de6:	9d00      	ldr	r5, [sp, #0]
 8005de8:	ea6f 0b03 	mvn.w	fp, r3
 8005dec:	f04f 0800 	mov.w	r8, #0
 8005df0:	4631      	mov	r1, r6
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 fa7e 	bl	80062f4 <_Bfree>
 8005df8:	2f00      	cmp	r7, #0
 8005dfa:	f43f aeab 	beq.w	8005b54 <_dtoa_r+0x6c4>
 8005dfe:	f1b8 0f00 	cmp.w	r8, #0
 8005e02:	d005      	beq.n	8005e10 <_dtoa_r+0x980>
 8005e04:	45b8      	cmp	r8, r7
 8005e06:	d003      	beq.n	8005e10 <_dtoa_r+0x980>
 8005e08:	4641      	mov	r1, r8
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f000 fa72 	bl	80062f4 <_Bfree>
 8005e10:	4639      	mov	r1, r7
 8005e12:	4620      	mov	r0, r4
 8005e14:	f000 fa6e 	bl	80062f4 <_Bfree>
 8005e18:	e69c      	b.n	8005b54 <_dtoa_r+0x6c4>
 8005e1a:	2600      	movs	r6, #0
 8005e1c:	4637      	mov	r7, r6
 8005e1e:	e7e1      	b.n	8005de4 <_dtoa_r+0x954>
 8005e20:	46bb      	mov	fp, r7
 8005e22:	4637      	mov	r7, r6
 8005e24:	e599      	b.n	800595a <_dtoa_r+0x4ca>
 8005e26:	bf00      	nop
 8005e28:	40240000 	.word	0x40240000
 8005e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80c8 	beq.w	8005fc4 <_dtoa_r+0xb34>
 8005e34:	9b04      	ldr	r3, [sp, #16]
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	dd05      	ble.n	8005e48 <_dtoa_r+0x9b8>
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	462a      	mov	r2, r5
 8005e40:	4620      	mov	r0, r4
 8005e42:	f000 fc27 	bl	8006694 <__lshift>
 8005e46:	4607      	mov	r7, r0
 8005e48:	f1b8 0f00 	cmp.w	r8, #0
 8005e4c:	d05b      	beq.n	8005f06 <_dtoa_r+0xa76>
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fa0f 	bl	8006274 <_Balloc>
 8005e56:	4605      	mov	r5, r0
 8005e58:	b928      	cbnz	r0, 8005e66 <_dtoa_r+0x9d6>
 8005e5a:	4b83      	ldr	r3, [pc, #524]	; (8006068 <_dtoa_r+0xbd8>)
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005e62:	f7ff bb2e 	b.w	80054c2 <_dtoa_r+0x32>
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	3202      	adds	r2, #2
 8005e6a:	0092      	lsls	r2, r2, #2
 8005e6c:	f107 010c 	add.w	r1, r7, #12
 8005e70:	300c      	adds	r0, #12
 8005e72:	f000 fe39 	bl	8006ae8 <memcpy>
 8005e76:	2201      	movs	r2, #1
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 fc0a 	bl	8006694 <__lshift>
 8005e80:	9b00      	ldr	r3, [sp, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	9308      	str	r3, [sp, #32]
 8005e8e:	9b02      	ldr	r3, [sp, #8]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	46b8      	mov	r8, r7
 8005e96:	9306      	str	r3, [sp, #24]
 8005e98:	4607      	mov	r7, r0
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	f7ff fa69 	bl	800537a <quorem>
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	9002      	str	r0, [sp, #8]
 8005eac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	f000 fc5b 	bl	800676c <__mcmp>
 8005eb6:	463a      	mov	r2, r7
 8005eb8:	9005      	str	r0, [sp, #20]
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 fc71 	bl	80067a4 <__mdiff>
 8005ec2:	68c2      	ldr	r2, [r0, #12]
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	bb02      	cbnz	r2, 8005f0a <_dtoa_r+0xa7a>
 8005ec8:	4601      	mov	r1, r0
 8005eca:	4650      	mov	r0, sl
 8005ecc:	f000 fc4e 	bl	800676c <__mcmp>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ed8:	f000 fa0c 	bl	80062f4 <_Bfree>
 8005edc:	9b07      	ldr	r3, [sp, #28]
 8005ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ee0:	9d04      	ldr	r5, [sp, #16]
 8005ee2:	ea43 0102 	orr.w	r1, r3, r2
 8005ee6:	9b06      	ldr	r3, [sp, #24]
 8005ee8:	4319      	orrs	r1, r3
 8005eea:	d110      	bne.n	8005f0e <_dtoa_r+0xa7e>
 8005eec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ef0:	d029      	beq.n	8005f46 <_dtoa_r+0xab6>
 8005ef2:	9b05      	ldr	r3, [sp, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dd02      	ble.n	8005efe <_dtoa_r+0xa6e>
 8005ef8:	9b02      	ldr	r3, [sp, #8]
 8005efa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	f883 9000 	strb.w	r9, [r3]
 8005f04:	e774      	b.n	8005df0 <_dtoa_r+0x960>
 8005f06:	4638      	mov	r0, r7
 8005f08:	e7ba      	b.n	8005e80 <_dtoa_r+0x9f0>
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	e7e1      	b.n	8005ed2 <_dtoa_r+0xa42>
 8005f0e:	9b05      	ldr	r3, [sp, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	db04      	blt.n	8005f1e <_dtoa_r+0xa8e>
 8005f14:	9907      	ldr	r1, [sp, #28]
 8005f16:	430b      	orrs	r3, r1
 8005f18:	9906      	ldr	r1, [sp, #24]
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	d120      	bne.n	8005f60 <_dtoa_r+0xad0>
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	dded      	ble.n	8005efe <_dtoa_r+0xa6e>
 8005f22:	4651      	mov	r1, sl
 8005f24:	2201      	movs	r2, #1
 8005f26:	4620      	mov	r0, r4
 8005f28:	f000 fbb4 	bl	8006694 <__lshift>
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4682      	mov	sl, r0
 8005f30:	f000 fc1c 	bl	800676c <__mcmp>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	dc03      	bgt.n	8005f40 <_dtoa_r+0xab0>
 8005f38:	d1e1      	bne.n	8005efe <_dtoa_r+0xa6e>
 8005f3a:	f019 0f01 	tst.w	r9, #1
 8005f3e:	d0de      	beq.n	8005efe <_dtoa_r+0xa6e>
 8005f40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f44:	d1d8      	bne.n	8005ef8 <_dtoa_r+0xa68>
 8005f46:	9a01      	ldr	r2, [sp, #4]
 8005f48:	2339      	movs	r3, #57	; 0x39
 8005f4a:	7013      	strb	r3, [r2, #0]
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	461d      	mov	r5, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f56:	2a39      	cmp	r2, #57	; 0x39
 8005f58:	d06c      	beq.n	8006034 <_dtoa_r+0xba4>
 8005f5a:	3201      	adds	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e747      	b.n	8005df0 <_dtoa_r+0x960>
 8005f60:	2a00      	cmp	r2, #0
 8005f62:	dd07      	ble.n	8005f74 <_dtoa_r+0xae4>
 8005f64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f68:	d0ed      	beq.n	8005f46 <_dtoa_r+0xab6>
 8005f6a:	9a01      	ldr	r2, [sp, #4]
 8005f6c:	f109 0301 	add.w	r3, r9, #1
 8005f70:	7013      	strb	r3, [r2, #0]
 8005f72:	e73d      	b.n	8005df0 <_dtoa_r+0x960>
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	9a08      	ldr	r2, [sp, #32]
 8005f78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d043      	beq.n	8006008 <_dtoa_r+0xb78>
 8005f80:	4651      	mov	r1, sl
 8005f82:	2300      	movs	r3, #0
 8005f84:	220a      	movs	r2, #10
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 f9d6 	bl	8006338 <__multadd>
 8005f8c:	45b8      	cmp	r8, r7
 8005f8e:	4682      	mov	sl, r0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	f04f 020a 	mov.w	r2, #10
 8005f98:	4641      	mov	r1, r8
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	d107      	bne.n	8005fae <_dtoa_r+0xb1e>
 8005f9e:	f000 f9cb 	bl	8006338 <__multadd>
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	9b04      	ldr	r3, [sp, #16]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	9304      	str	r3, [sp, #16]
 8005fac:	e775      	b.n	8005e9a <_dtoa_r+0xa0a>
 8005fae:	f000 f9c3 	bl	8006338 <__multadd>
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	220a      	movs	r2, #10
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f9bc 	bl	8006338 <__multadd>
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	e7f0      	b.n	8005fa6 <_dtoa_r+0xb16>
 8005fc4:	9b04      	ldr	r3, [sp, #16]
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	9d00      	ldr	r5, [sp, #0]
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4650      	mov	r0, sl
 8005fce:	f7ff f9d4 	bl	800537a <quorem>
 8005fd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	f805 9b01 	strb.w	r9, [r5], #1
 8005fdc:	1aea      	subs	r2, r5, r3
 8005fde:	9b01      	ldr	r3, [sp, #4]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	dd07      	ble.n	8005ff4 <_dtoa_r+0xb64>
 8005fe4:	4651      	mov	r1, sl
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	220a      	movs	r2, #10
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 f9a4 	bl	8006338 <__multadd>
 8005ff0:	4682      	mov	sl, r0
 8005ff2:	e7ea      	b.n	8005fca <_dtoa_r+0xb3a>
 8005ff4:	9b01      	ldr	r3, [sp, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bfc8      	it	gt
 8005ffa:	461d      	movgt	r5, r3
 8005ffc:	9b00      	ldr	r3, [sp, #0]
 8005ffe:	bfd8      	it	le
 8006000:	2501      	movle	r5, #1
 8006002:	441d      	add	r5, r3
 8006004:	f04f 0800 	mov.w	r8, #0
 8006008:	4651      	mov	r1, sl
 800600a:	2201      	movs	r2, #1
 800600c:	4620      	mov	r0, r4
 800600e:	f000 fb41 	bl	8006694 <__lshift>
 8006012:	4631      	mov	r1, r6
 8006014:	4682      	mov	sl, r0
 8006016:	f000 fba9 	bl	800676c <__mcmp>
 800601a:	2800      	cmp	r0, #0
 800601c:	dc96      	bgt.n	8005f4c <_dtoa_r+0xabc>
 800601e:	d102      	bne.n	8006026 <_dtoa_r+0xb96>
 8006020:	f019 0f01 	tst.w	r9, #1
 8006024:	d192      	bne.n	8005f4c <_dtoa_r+0xabc>
 8006026:	462b      	mov	r3, r5
 8006028:	461d      	mov	r5, r3
 800602a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800602e:	2a30      	cmp	r2, #48	; 0x30
 8006030:	d0fa      	beq.n	8006028 <_dtoa_r+0xb98>
 8006032:	e6dd      	b.n	8005df0 <_dtoa_r+0x960>
 8006034:	9a00      	ldr	r2, [sp, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d189      	bne.n	8005f4e <_dtoa_r+0xabe>
 800603a:	f10b 0b01 	add.w	fp, fp, #1
 800603e:	2331      	movs	r3, #49	; 0x31
 8006040:	e796      	b.n	8005f70 <_dtoa_r+0xae0>
 8006042:	4b0a      	ldr	r3, [pc, #40]	; (800606c <_dtoa_r+0xbdc>)
 8006044:	f7ff ba99 	b.w	800557a <_dtoa_r+0xea>
 8006048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800604a:	2b00      	cmp	r3, #0
 800604c:	f47f aa6d 	bne.w	800552a <_dtoa_r+0x9a>
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <_dtoa_r+0xbe0>)
 8006052:	f7ff ba92 	b.w	800557a <_dtoa_r+0xea>
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	dcb5      	bgt.n	8005fc8 <_dtoa_r+0xb38>
 800605c:	9b07      	ldr	r3, [sp, #28]
 800605e:	2b02      	cmp	r3, #2
 8006060:	f73f aeb1 	bgt.w	8005dc6 <_dtoa_r+0x936>
 8006064:	e7b0      	b.n	8005fc8 <_dtoa_r+0xb38>
 8006066:	bf00      	nop
 8006068:	08007220 	.word	0x08007220
 800606c:	08007180 	.word	0x08007180
 8006070:	080071a4 	.word	0x080071a4

08006074 <_free_r>:
 8006074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006076:	2900      	cmp	r1, #0
 8006078:	d044      	beq.n	8006104 <_free_r+0x90>
 800607a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607e:	9001      	str	r0, [sp, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f1a1 0404 	sub.w	r4, r1, #4
 8006086:	bfb8      	it	lt
 8006088:	18e4      	addlt	r4, r4, r3
 800608a:	f000 f8e7 	bl	800625c <__malloc_lock>
 800608e:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <_free_r+0x94>)
 8006090:	9801      	ldr	r0, [sp, #4]
 8006092:	6813      	ldr	r3, [r2, #0]
 8006094:	b933      	cbnz	r3, 80060a4 <_free_r+0x30>
 8006096:	6063      	str	r3, [r4, #4]
 8006098:	6014      	str	r4, [r2, #0]
 800609a:	b003      	add	sp, #12
 800609c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060a0:	f000 b8e2 	b.w	8006268 <__malloc_unlock>
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	d908      	bls.n	80060ba <_free_r+0x46>
 80060a8:	6825      	ldr	r5, [r4, #0]
 80060aa:	1961      	adds	r1, r4, r5
 80060ac:	428b      	cmp	r3, r1
 80060ae:	bf01      	itttt	eq
 80060b0:	6819      	ldreq	r1, [r3, #0]
 80060b2:	685b      	ldreq	r3, [r3, #4]
 80060b4:	1949      	addeq	r1, r1, r5
 80060b6:	6021      	streq	r1, [r4, #0]
 80060b8:	e7ed      	b.n	8006096 <_free_r+0x22>
 80060ba:	461a      	mov	r2, r3
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	b10b      	cbz	r3, 80060c4 <_free_r+0x50>
 80060c0:	42a3      	cmp	r3, r4
 80060c2:	d9fa      	bls.n	80060ba <_free_r+0x46>
 80060c4:	6811      	ldr	r1, [r2, #0]
 80060c6:	1855      	adds	r5, r2, r1
 80060c8:	42a5      	cmp	r5, r4
 80060ca:	d10b      	bne.n	80060e4 <_free_r+0x70>
 80060cc:	6824      	ldr	r4, [r4, #0]
 80060ce:	4421      	add	r1, r4
 80060d0:	1854      	adds	r4, r2, r1
 80060d2:	42a3      	cmp	r3, r4
 80060d4:	6011      	str	r1, [r2, #0]
 80060d6:	d1e0      	bne.n	800609a <_free_r+0x26>
 80060d8:	681c      	ldr	r4, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	6053      	str	r3, [r2, #4]
 80060de:	440c      	add	r4, r1
 80060e0:	6014      	str	r4, [r2, #0]
 80060e2:	e7da      	b.n	800609a <_free_r+0x26>
 80060e4:	d902      	bls.n	80060ec <_free_r+0x78>
 80060e6:	230c      	movs	r3, #12
 80060e8:	6003      	str	r3, [r0, #0]
 80060ea:	e7d6      	b.n	800609a <_free_r+0x26>
 80060ec:	6825      	ldr	r5, [r4, #0]
 80060ee:	1961      	adds	r1, r4, r5
 80060f0:	428b      	cmp	r3, r1
 80060f2:	bf04      	itt	eq
 80060f4:	6819      	ldreq	r1, [r3, #0]
 80060f6:	685b      	ldreq	r3, [r3, #4]
 80060f8:	6063      	str	r3, [r4, #4]
 80060fa:	bf04      	itt	eq
 80060fc:	1949      	addeq	r1, r1, r5
 80060fe:	6021      	streq	r1, [r4, #0]
 8006100:	6054      	str	r4, [r2, #4]
 8006102:	e7ca      	b.n	800609a <_free_r+0x26>
 8006104:	b003      	add	sp, #12
 8006106:	bd30      	pop	{r4, r5, pc}
 8006108:	20000418 	.word	0x20000418

0800610c <malloc>:
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <malloc+0xc>)
 800610e:	4601      	mov	r1, r0
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	f000 b823 	b.w	800615c <_malloc_r>
 8006116:	bf00      	nop
 8006118:	20000064 	.word	0x20000064

0800611c <sbrk_aligned>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4e0e      	ldr	r6, [pc, #56]	; (8006158 <sbrk_aligned+0x3c>)
 8006120:	460c      	mov	r4, r1
 8006122:	6831      	ldr	r1, [r6, #0]
 8006124:	4605      	mov	r5, r0
 8006126:	b911      	cbnz	r1, 800612e <sbrk_aligned+0x12>
 8006128:	f000 fcce 	bl	8006ac8 <_sbrk_r>
 800612c:	6030      	str	r0, [r6, #0]
 800612e:	4621      	mov	r1, r4
 8006130:	4628      	mov	r0, r5
 8006132:	f000 fcc9 	bl	8006ac8 <_sbrk_r>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	d00a      	beq.n	8006150 <sbrk_aligned+0x34>
 800613a:	1cc4      	adds	r4, r0, #3
 800613c:	f024 0403 	bic.w	r4, r4, #3
 8006140:	42a0      	cmp	r0, r4
 8006142:	d007      	beq.n	8006154 <sbrk_aligned+0x38>
 8006144:	1a21      	subs	r1, r4, r0
 8006146:	4628      	mov	r0, r5
 8006148:	f000 fcbe 	bl	8006ac8 <_sbrk_r>
 800614c:	3001      	adds	r0, #1
 800614e:	d101      	bne.n	8006154 <sbrk_aligned+0x38>
 8006150:	f04f 34ff 	mov.w	r4, #4294967295
 8006154:	4620      	mov	r0, r4
 8006156:	bd70      	pop	{r4, r5, r6, pc}
 8006158:	2000041c 	.word	0x2000041c

0800615c <_malloc_r>:
 800615c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006160:	1ccd      	adds	r5, r1, #3
 8006162:	f025 0503 	bic.w	r5, r5, #3
 8006166:	3508      	adds	r5, #8
 8006168:	2d0c      	cmp	r5, #12
 800616a:	bf38      	it	cc
 800616c:	250c      	movcc	r5, #12
 800616e:	2d00      	cmp	r5, #0
 8006170:	4607      	mov	r7, r0
 8006172:	db01      	blt.n	8006178 <_malloc_r+0x1c>
 8006174:	42a9      	cmp	r1, r5
 8006176:	d905      	bls.n	8006184 <_malloc_r+0x28>
 8006178:	230c      	movs	r3, #12
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	2600      	movs	r6, #0
 800617e:	4630      	mov	r0, r6
 8006180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006184:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006258 <_malloc_r+0xfc>
 8006188:	f000 f868 	bl	800625c <__malloc_lock>
 800618c:	f8d8 3000 	ldr.w	r3, [r8]
 8006190:	461c      	mov	r4, r3
 8006192:	bb5c      	cbnz	r4, 80061ec <_malloc_r+0x90>
 8006194:	4629      	mov	r1, r5
 8006196:	4638      	mov	r0, r7
 8006198:	f7ff ffc0 	bl	800611c <sbrk_aligned>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	4604      	mov	r4, r0
 80061a0:	d155      	bne.n	800624e <_malloc_r+0xf2>
 80061a2:	f8d8 4000 	ldr.w	r4, [r8]
 80061a6:	4626      	mov	r6, r4
 80061a8:	2e00      	cmp	r6, #0
 80061aa:	d145      	bne.n	8006238 <_malloc_r+0xdc>
 80061ac:	2c00      	cmp	r4, #0
 80061ae:	d048      	beq.n	8006242 <_malloc_r+0xe6>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	4631      	mov	r1, r6
 80061b4:	4638      	mov	r0, r7
 80061b6:	eb04 0903 	add.w	r9, r4, r3
 80061ba:	f000 fc85 	bl	8006ac8 <_sbrk_r>
 80061be:	4581      	cmp	r9, r0
 80061c0:	d13f      	bne.n	8006242 <_malloc_r+0xe6>
 80061c2:	6821      	ldr	r1, [r4, #0]
 80061c4:	1a6d      	subs	r5, r5, r1
 80061c6:	4629      	mov	r1, r5
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff ffa7 	bl	800611c <sbrk_aligned>
 80061ce:	3001      	adds	r0, #1
 80061d0:	d037      	beq.n	8006242 <_malloc_r+0xe6>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	442b      	add	r3, r5
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	f8d8 3000 	ldr.w	r3, [r8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d038      	beq.n	8006252 <_malloc_r+0xf6>
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	42a2      	cmp	r2, r4
 80061e4:	d12b      	bne.n	800623e <_malloc_r+0xe2>
 80061e6:	2200      	movs	r2, #0
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	e00f      	b.n	800620c <_malloc_r+0xb0>
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	1b52      	subs	r2, r2, r5
 80061f0:	d41f      	bmi.n	8006232 <_malloc_r+0xd6>
 80061f2:	2a0b      	cmp	r2, #11
 80061f4:	d917      	bls.n	8006226 <_malloc_r+0xca>
 80061f6:	1961      	adds	r1, r4, r5
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	6025      	str	r5, [r4, #0]
 80061fc:	bf18      	it	ne
 80061fe:	6059      	strne	r1, [r3, #4]
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	bf08      	it	eq
 8006204:	f8c8 1000 	streq.w	r1, [r8]
 8006208:	5162      	str	r2, [r4, r5]
 800620a:	604b      	str	r3, [r1, #4]
 800620c:	4638      	mov	r0, r7
 800620e:	f104 060b 	add.w	r6, r4, #11
 8006212:	f000 f829 	bl	8006268 <__malloc_unlock>
 8006216:	f026 0607 	bic.w	r6, r6, #7
 800621a:	1d23      	adds	r3, r4, #4
 800621c:	1af2      	subs	r2, r6, r3
 800621e:	d0ae      	beq.n	800617e <_malloc_r+0x22>
 8006220:	1b9b      	subs	r3, r3, r6
 8006222:	50a3      	str	r3, [r4, r2]
 8006224:	e7ab      	b.n	800617e <_malloc_r+0x22>
 8006226:	42a3      	cmp	r3, r4
 8006228:	6862      	ldr	r2, [r4, #4]
 800622a:	d1dd      	bne.n	80061e8 <_malloc_r+0x8c>
 800622c:	f8c8 2000 	str.w	r2, [r8]
 8006230:	e7ec      	b.n	800620c <_malloc_r+0xb0>
 8006232:	4623      	mov	r3, r4
 8006234:	6864      	ldr	r4, [r4, #4]
 8006236:	e7ac      	b.n	8006192 <_malloc_r+0x36>
 8006238:	4634      	mov	r4, r6
 800623a:	6876      	ldr	r6, [r6, #4]
 800623c:	e7b4      	b.n	80061a8 <_malloc_r+0x4c>
 800623e:	4613      	mov	r3, r2
 8006240:	e7cc      	b.n	80061dc <_malloc_r+0x80>
 8006242:	230c      	movs	r3, #12
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	4638      	mov	r0, r7
 8006248:	f000 f80e 	bl	8006268 <__malloc_unlock>
 800624c:	e797      	b.n	800617e <_malloc_r+0x22>
 800624e:	6025      	str	r5, [r4, #0]
 8006250:	e7dc      	b.n	800620c <_malloc_r+0xb0>
 8006252:	605b      	str	r3, [r3, #4]
 8006254:	deff      	udf	#255	; 0xff
 8006256:	bf00      	nop
 8006258:	20000418 	.word	0x20000418

0800625c <__malloc_lock>:
 800625c:	4801      	ldr	r0, [pc, #4]	; (8006264 <__malloc_lock+0x8>)
 800625e:	f7ff b88a 	b.w	8005376 <__retarget_lock_acquire_recursive>
 8006262:	bf00      	nop
 8006264:	20000414 	.word	0x20000414

08006268 <__malloc_unlock>:
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <__malloc_unlock+0x8>)
 800626a:	f7ff b885 	b.w	8005378 <__retarget_lock_release_recursive>
 800626e:	bf00      	nop
 8006270:	20000414 	.word	0x20000414

08006274 <_Balloc>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	69c6      	ldr	r6, [r0, #28]
 8006278:	4604      	mov	r4, r0
 800627a:	460d      	mov	r5, r1
 800627c:	b976      	cbnz	r6, 800629c <_Balloc+0x28>
 800627e:	2010      	movs	r0, #16
 8006280:	f7ff ff44 	bl	800610c <malloc>
 8006284:	4602      	mov	r2, r0
 8006286:	61e0      	str	r0, [r4, #28]
 8006288:	b920      	cbnz	r0, 8006294 <_Balloc+0x20>
 800628a:	4b18      	ldr	r3, [pc, #96]	; (80062ec <_Balloc+0x78>)
 800628c:	4818      	ldr	r0, [pc, #96]	; (80062f0 <_Balloc+0x7c>)
 800628e:	216b      	movs	r1, #107	; 0x6b
 8006290:	f000 fc38 	bl	8006b04 <__assert_func>
 8006294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006298:	6006      	str	r6, [r0, #0]
 800629a:	60c6      	str	r6, [r0, #12]
 800629c:	69e6      	ldr	r6, [r4, #28]
 800629e:	68f3      	ldr	r3, [r6, #12]
 80062a0:	b183      	cbz	r3, 80062c4 <_Balloc+0x50>
 80062a2:	69e3      	ldr	r3, [r4, #28]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062aa:	b9b8      	cbnz	r0, 80062dc <_Balloc+0x68>
 80062ac:	2101      	movs	r1, #1
 80062ae:	fa01 f605 	lsl.w	r6, r1, r5
 80062b2:	1d72      	adds	r2, r6, #5
 80062b4:	0092      	lsls	r2, r2, #2
 80062b6:	4620      	mov	r0, r4
 80062b8:	f000 fc42 	bl	8006b40 <_calloc_r>
 80062bc:	b160      	cbz	r0, 80062d8 <_Balloc+0x64>
 80062be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062c2:	e00e      	b.n	80062e2 <_Balloc+0x6e>
 80062c4:	2221      	movs	r2, #33	; 0x21
 80062c6:	2104      	movs	r1, #4
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fc39 	bl	8006b40 <_calloc_r>
 80062ce:	69e3      	ldr	r3, [r4, #28]
 80062d0:	60f0      	str	r0, [r6, #12]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e4      	bne.n	80062a2 <_Balloc+0x2e>
 80062d8:	2000      	movs	r0, #0
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	6802      	ldr	r2, [r0, #0]
 80062de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062e2:	2300      	movs	r3, #0
 80062e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062e8:	e7f7      	b.n	80062da <_Balloc+0x66>
 80062ea:	bf00      	nop
 80062ec:	080071b1 	.word	0x080071b1
 80062f0:	08007231 	.word	0x08007231

080062f4 <_Bfree>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	69c6      	ldr	r6, [r0, #28]
 80062f8:	4605      	mov	r5, r0
 80062fa:	460c      	mov	r4, r1
 80062fc:	b976      	cbnz	r6, 800631c <_Bfree+0x28>
 80062fe:	2010      	movs	r0, #16
 8006300:	f7ff ff04 	bl	800610c <malloc>
 8006304:	4602      	mov	r2, r0
 8006306:	61e8      	str	r0, [r5, #28]
 8006308:	b920      	cbnz	r0, 8006314 <_Bfree+0x20>
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <_Bfree+0x3c>)
 800630c:	4809      	ldr	r0, [pc, #36]	; (8006334 <_Bfree+0x40>)
 800630e:	218f      	movs	r1, #143	; 0x8f
 8006310:	f000 fbf8 	bl	8006b04 <__assert_func>
 8006314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006318:	6006      	str	r6, [r0, #0]
 800631a:	60c6      	str	r6, [r0, #12]
 800631c:	b13c      	cbz	r4, 800632e <_Bfree+0x3a>
 800631e:	69eb      	ldr	r3, [r5, #28]
 8006320:	6862      	ldr	r2, [r4, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006328:	6021      	str	r1, [r4, #0]
 800632a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	080071b1 	.word	0x080071b1
 8006334:	08007231 	.word	0x08007231

08006338 <__multadd>:
 8006338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633c:	690d      	ldr	r5, [r1, #16]
 800633e:	4607      	mov	r7, r0
 8006340:	460c      	mov	r4, r1
 8006342:	461e      	mov	r6, r3
 8006344:	f101 0c14 	add.w	ip, r1, #20
 8006348:	2000      	movs	r0, #0
 800634a:	f8dc 3000 	ldr.w	r3, [ip]
 800634e:	b299      	uxth	r1, r3
 8006350:	fb02 6101 	mla	r1, r2, r1, r6
 8006354:	0c1e      	lsrs	r6, r3, #16
 8006356:	0c0b      	lsrs	r3, r1, #16
 8006358:	fb02 3306 	mla	r3, r2, r6, r3
 800635c:	b289      	uxth	r1, r1
 800635e:	3001      	adds	r0, #1
 8006360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006364:	4285      	cmp	r5, r0
 8006366:	f84c 1b04 	str.w	r1, [ip], #4
 800636a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800636e:	dcec      	bgt.n	800634a <__multadd+0x12>
 8006370:	b30e      	cbz	r6, 80063b6 <__multadd+0x7e>
 8006372:	68a3      	ldr	r3, [r4, #8]
 8006374:	42ab      	cmp	r3, r5
 8006376:	dc19      	bgt.n	80063ac <__multadd+0x74>
 8006378:	6861      	ldr	r1, [r4, #4]
 800637a:	4638      	mov	r0, r7
 800637c:	3101      	adds	r1, #1
 800637e:	f7ff ff79 	bl	8006274 <_Balloc>
 8006382:	4680      	mov	r8, r0
 8006384:	b928      	cbnz	r0, 8006392 <__multadd+0x5a>
 8006386:	4602      	mov	r2, r0
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <__multadd+0x84>)
 800638a:	480d      	ldr	r0, [pc, #52]	; (80063c0 <__multadd+0x88>)
 800638c:	21ba      	movs	r1, #186	; 0xba
 800638e:	f000 fbb9 	bl	8006b04 <__assert_func>
 8006392:	6922      	ldr	r2, [r4, #16]
 8006394:	3202      	adds	r2, #2
 8006396:	f104 010c 	add.w	r1, r4, #12
 800639a:	0092      	lsls	r2, r2, #2
 800639c:	300c      	adds	r0, #12
 800639e:	f000 fba3 	bl	8006ae8 <memcpy>
 80063a2:	4621      	mov	r1, r4
 80063a4:	4638      	mov	r0, r7
 80063a6:	f7ff ffa5 	bl	80062f4 <_Bfree>
 80063aa:	4644      	mov	r4, r8
 80063ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063b0:	3501      	adds	r5, #1
 80063b2:	615e      	str	r6, [r3, #20]
 80063b4:	6125      	str	r5, [r4, #16]
 80063b6:	4620      	mov	r0, r4
 80063b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063bc:	08007220 	.word	0x08007220
 80063c0:	08007231 	.word	0x08007231

080063c4 <__hi0bits>:
 80063c4:	0c03      	lsrs	r3, r0, #16
 80063c6:	041b      	lsls	r3, r3, #16
 80063c8:	b9d3      	cbnz	r3, 8006400 <__hi0bits+0x3c>
 80063ca:	0400      	lsls	r0, r0, #16
 80063cc:	2310      	movs	r3, #16
 80063ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80063d2:	bf04      	itt	eq
 80063d4:	0200      	lsleq	r0, r0, #8
 80063d6:	3308      	addeq	r3, #8
 80063d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80063dc:	bf04      	itt	eq
 80063de:	0100      	lsleq	r0, r0, #4
 80063e0:	3304      	addeq	r3, #4
 80063e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80063e6:	bf04      	itt	eq
 80063e8:	0080      	lsleq	r0, r0, #2
 80063ea:	3302      	addeq	r3, #2
 80063ec:	2800      	cmp	r0, #0
 80063ee:	db05      	blt.n	80063fc <__hi0bits+0x38>
 80063f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063f4:	f103 0301 	add.w	r3, r3, #1
 80063f8:	bf08      	it	eq
 80063fa:	2320      	moveq	r3, #32
 80063fc:	4618      	mov	r0, r3
 80063fe:	4770      	bx	lr
 8006400:	2300      	movs	r3, #0
 8006402:	e7e4      	b.n	80063ce <__hi0bits+0xa>

08006404 <__lo0bits>:
 8006404:	6803      	ldr	r3, [r0, #0]
 8006406:	f013 0207 	ands.w	r2, r3, #7
 800640a:	d00c      	beq.n	8006426 <__lo0bits+0x22>
 800640c:	07d9      	lsls	r1, r3, #31
 800640e:	d422      	bmi.n	8006456 <__lo0bits+0x52>
 8006410:	079a      	lsls	r2, r3, #30
 8006412:	bf49      	itett	mi
 8006414:	085b      	lsrmi	r3, r3, #1
 8006416:	089b      	lsrpl	r3, r3, #2
 8006418:	6003      	strmi	r3, [r0, #0]
 800641a:	2201      	movmi	r2, #1
 800641c:	bf5c      	itt	pl
 800641e:	6003      	strpl	r3, [r0, #0]
 8006420:	2202      	movpl	r2, #2
 8006422:	4610      	mov	r0, r2
 8006424:	4770      	bx	lr
 8006426:	b299      	uxth	r1, r3
 8006428:	b909      	cbnz	r1, 800642e <__lo0bits+0x2a>
 800642a:	0c1b      	lsrs	r3, r3, #16
 800642c:	2210      	movs	r2, #16
 800642e:	b2d9      	uxtb	r1, r3
 8006430:	b909      	cbnz	r1, 8006436 <__lo0bits+0x32>
 8006432:	3208      	adds	r2, #8
 8006434:	0a1b      	lsrs	r3, r3, #8
 8006436:	0719      	lsls	r1, r3, #28
 8006438:	bf04      	itt	eq
 800643a:	091b      	lsreq	r3, r3, #4
 800643c:	3204      	addeq	r2, #4
 800643e:	0799      	lsls	r1, r3, #30
 8006440:	bf04      	itt	eq
 8006442:	089b      	lsreq	r3, r3, #2
 8006444:	3202      	addeq	r2, #2
 8006446:	07d9      	lsls	r1, r3, #31
 8006448:	d403      	bmi.n	8006452 <__lo0bits+0x4e>
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	f102 0201 	add.w	r2, r2, #1
 8006450:	d003      	beq.n	800645a <__lo0bits+0x56>
 8006452:	6003      	str	r3, [r0, #0]
 8006454:	e7e5      	b.n	8006422 <__lo0bits+0x1e>
 8006456:	2200      	movs	r2, #0
 8006458:	e7e3      	b.n	8006422 <__lo0bits+0x1e>
 800645a:	2220      	movs	r2, #32
 800645c:	e7e1      	b.n	8006422 <__lo0bits+0x1e>
	...

08006460 <__i2b>:
 8006460:	b510      	push	{r4, lr}
 8006462:	460c      	mov	r4, r1
 8006464:	2101      	movs	r1, #1
 8006466:	f7ff ff05 	bl	8006274 <_Balloc>
 800646a:	4602      	mov	r2, r0
 800646c:	b928      	cbnz	r0, 800647a <__i2b+0x1a>
 800646e:	4b05      	ldr	r3, [pc, #20]	; (8006484 <__i2b+0x24>)
 8006470:	4805      	ldr	r0, [pc, #20]	; (8006488 <__i2b+0x28>)
 8006472:	f240 1145 	movw	r1, #325	; 0x145
 8006476:	f000 fb45 	bl	8006b04 <__assert_func>
 800647a:	2301      	movs	r3, #1
 800647c:	6144      	str	r4, [r0, #20]
 800647e:	6103      	str	r3, [r0, #16]
 8006480:	bd10      	pop	{r4, pc}
 8006482:	bf00      	nop
 8006484:	08007220 	.word	0x08007220
 8006488:	08007231 	.word	0x08007231

0800648c <__multiply>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	4691      	mov	r9, r2
 8006492:	690a      	ldr	r2, [r1, #16]
 8006494:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006498:	429a      	cmp	r2, r3
 800649a:	bfb8      	it	lt
 800649c:	460b      	movlt	r3, r1
 800649e:	460c      	mov	r4, r1
 80064a0:	bfbc      	itt	lt
 80064a2:	464c      	movlt	r4, r9
 80064a4:	4699      	movlt	r9, r3
 80064a6:	6927      	ldr	r7, [r4, #16]
 80064a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064ac:	68a3      	ldr	r3, [r4, #8]
 80064ae:	6861      	ldr	r1, [r4, #4]
 80064b0:	eb07 060a 	add.w	r6, r7, sl
 80064b4:	42b3      	cmp	r3, r6
 80064b6:	b085      	sub	sp, #20
 80064b8:	bfb8      	it	lt
 80064ba:	3101      	addlt	r1, #1
 80064bc:	f7ff feda 	bl	8006274 <_Balloc>
 80064c0:	b930      	cbnz	r0, 80064d0 <__multiply+0x44>
 80064c2:	4602      	mov	r2, r0
 80064c4:	4b44      	ldr	r3, [pc, #272]	; (80065d8 <__multiply+0x14c>)
 80064c6:	4845      	ldr	r0, [pc, #276]	; (80065dc <__multiply+0x150>)
 80064c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80064cc:	f000 fb1a 	bl	8006b04 <__assert_func>
 80064d0:	f100 0514 	add.w	r5, r0, #20
 80064d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064d8:	462b      	mov	r3, r5
 80064da:	2200      	movs	r2, #0
 80064dc:	4543      	cmp	r3, r8
 80064de:	d321      	bcc.n	8006524 <__multiply+0x98>
 80064e0:	f104 0314 	add.w	r3, r4, #20
 80064e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064e8:	f109 0314 	add.w	r3, r9, #20
 80064ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064f0:	9202      	str	r2, [sp, #8]
 80064f2:	1b3a      	subs	r2, r7, r4
 80064f4:	3a15      	subs	r2, #21
 80064f6:	f022 0203 	bic.w	r2, r2, #3
 80064fa:	3204      	adds	r2, #4
 80064fc:	f104 0115 	add.w	r1, r4, #21
 8006500:	428f      	cmp	r7, r1
 8006502:	bf38      	it	cc
 8006504:	2204      	movcc	r2, #4
 8006506:	9201      	str	r2, [sp, #4]
 8006508:	9a02      	ldr	r2, [sp, #8]
 800650a:	9303      	str	r3, [sp, #12]
 800650c:	429a      	cmp	r2, r3
 800650e:	d80c      	bhi.n	800652a <__multiply+0x9e>
 8006510:	2e00      	cmp	r6, #0
 8006512:	dd03      	ble.n	800651c <__multiply+0x90>
 8006514:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006518:	2b00      	cmp	r3, #0
 800651a:	d05b      	beq.n	80065d4 <__multiply+0x148>
 800651c:	6106      	str	r6, [r0, #16]
 800651e:	b005      	add	sp, #20
 8006520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006524:	f843 2b04 	str.w	r2, [r3], #4
 8006528:	e7d8      	b.n	80064dc <__multiply+0x50>
 800652a:	f8b3 a000 	ldrh.w	sl, [r3]
 800652e:	f1ba 0f00 	cmp.w	sl, #0
 8006532:	d024      	beq.n	800657e <__multiply+0xf2>
 8006534:	f104 0e14 	add.w	lr, r4, #20
 8006538:	46a9      	mov	r9, r5
 800653a:	f04f 0c00 	mov.w	ip, #0
 800653e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006542:	f8d9 1000 	ldr.w	r1, [r9]
 8006546:	fa1f fb82 	uxth.w	fp, r2
 800654a:	b289      	uxth	r1, r1
 800654c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006550:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006554:	f8d9 2000 	ldr.w	r2, [r9]
 8006558:	4461      	add	r1, ip
 800655a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800655e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006562:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006566:	b289      	uxth	r1, r1
 8006568:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800656c:	4577      	cmp	r7, lr
 800656e:	f849 1b04 	str.w	r1, [r9], #4
 8006572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006576:	d8e2      	bhi.n	800653e <__multiply+0xb2>
 8006578:	9a01      	ldr	r2, [sp, #4]
 800657a:	f845 c002 	str.w	ip, [r5, r2]
 800657e:	9a03      	ldr	r2, [sp, #12]
 8006580:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006584:	3304      	adds	r3, #4
 8006586:	f1b9 0f00 	cmp.w	r9, #0
 800658a:	d021      	beq.n	80065d0 <__multiply+0x144>
 800658c:	6829      	ldr	r1, [r5, #0]
 800658e:	f104 0c14 	add.w	ip, r4, #20
 8006592:	46ae      	mov	lr, r5
 8006594:	f04f 0a00 	mov.w	sl, #0
 8006598:	f8bc b000 	ldrh.w	fp, [ip]
 800659c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80065a0:	fb09 220b 	mla	r2, r9, fp, r2
 80065a4:	4452      	add	r2, sl
 80065a6:	b289      	uxth	r1, r1
 80065a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065ac:	f84e 1b04 	str.w	r1, [lr], #4
 80065b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80065b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065b8:	f8be 1000 	ldrh.w	r1, [lr]
 80065bc:	fb09 110a 	mla	r1, r9, sl, r1
 80065c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80065c4:	4567      	cmp	r7, ip
 80065c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065ca:	d8e5      	bhi.n	8006598 <__multiply+0x10c>
 80065cc:	9a01      	ldr	r2, [sp, #4]
 80065ce:	50a9      	str	r1, [r5, r2]
 80065d0:	3504      	adds	r5, #4
 80065d2:	e799      	b.n	8006508 <__multiply+0x7c>
 80065d4:	3e01      	subs	r6, #1
 80065d6:	e79b      	b.n	8006510 <__multiply+0x84>
 80065d8:	08007220 	.word	0x08007220
 80065dc:	08007231 	.word	0x08007231

080065e0 <__pow5mult>:
 80065e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e4:	4615      	mov	r5, r2
 80065e6:	f012 0203 	ands.w	r2, r2, #3
 80065ea:	4606      	mov	r6, r0
 80065ec:	460f      	mov	r7, r1
 80065ee:	d007      	beq.n	8006600 <__pow5mult+0x20>
 80065f0:	4c25      	ldr	r4, [pc, #148]	; (8006688 <__pow5mult+0xa8>)
 80065f2:	3a01      	subs	r2, #1
 80065f4:	2300      	movs	r3, #0
 80065f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065fa:	f7ff fe9d 	bl	8006338 <__multadd>
 80065fe:	4607      	mov	r7, r0
 8006600:	10ad      	asrs	r5, r5, #2
 8006602:	d03d      	beq.n	8006680 <__pow5mult+0xa0>
 8006604:	69f4      	ldr	r4, [r6, #28]
 8006606:	b97c      	cbnz	r4, 8006628 <__pow5mult+0x48>
 8006608:	2010      	movs	r0, #16
 800660a:	f7ff fd7f 	bl	800610c <malloc>
 800660e:	4602      	mov	r2, r0
 8006610:	61f0      	str	r0, [r6, #28]
 8006612:	b928      	cbnz	r0, 8006620 <__pow5mult+0x40>
 8006614:	4b1d      	ldr	r3, [pc, #116]	; (800668c <__pow5mult+0xac>)
 8006616:	481e      	ldr	r0, [pc, #120]	; (8006690 <__pow5mult+0xb0>)
 8006618:	f240 11b3 	movw	r1, #435	; 0x1b3
 800661c:	f000 fa72 	bl	8006b04 <__assert_func>
 8006620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006624:	6004      	str	r4, [r0, #0]
 8006626:	60c4      	str	r4, [r0, #12]
 8006628:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800662c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006630:	b94c      	cbnz	r4, 8006646 <__pow5mult+0x66>
 8006632:	f240 2171 	movw	r1, #625	; 0x271
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff ff12 	bl	8006460 <__i2b>
 800663c:	2300      	movs	r3, #0
 800663e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006642:	4604      	mov	r4, r0
 8006644:	6003      	str	r3, [r0, #0]
 8006646:	f04f 0900 	mov.w	r9, #0
 800664a:	07eb      	lsls	r3, r5, #31
 800664c:	d50a      	bpl.n	8006664 <__pow5mult+0x84>
 800664e:	4639      	mov	r1, r7
 8006650:	4622      	mov	r2, r4
 8006652:	4630      	mov	r0, r6
 8006654:	f7ff ff1a 	bl	800648c <__multiply>
 8006658:	4639      	mov	r1, r7
 800665a:	4680      	mov	r8, r0
 800665c:	4630      	mov	r0, r6
 800665e:	f7ff fe49 	bl	80062f4 <_Bfree>
 8006662:	4647      	mov	r7, r8
 8006664:	106d      	asrs	r5, r5, #1
 8006666:	d00b      	beq.n	8006680 <__pow5mult+0xa0>
 8006668:	6820      	ldr	r0, [r4, #0]
 800666a:	b938      	cbnz	r0, 800667c <__pow5mult+0x9c>
 800666c:	4622      	mov	r2, r4
 800666e:	4621      	mov	r1, r4
 8006670:	4630      	mov	r0, r6
 8006672:	f7ff ff0b 	bl	800648c <__multiply>
 8006676:	6020      	str	r0, [r4, #0]
 8006678:	f8c0 9000 	str.w	r9, [r0]
 800667c:	4604      	mov	r4, r0
 800667e:	e7e4      	b.n	800664a <__pow5mult+0x6a>
 8006680:	4638      	mov	r0, r7
 8006682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006686:	bf00      	nop
 8006688:	08007380 	.word	0x08007380
 800668c:	080071b1 	.word	0x080071b1
 8006690:	08007231 	.word	0x08007231

08006694 <__lshift>:
 8006694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	460c      	mov	r4, r1
 800669a:	6849      	ldr	r1, [r1, #4]
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066a2:	68a3      	ldr	r3, [r4, #8]
 80066a4:	4607      	mov	r7, r0
 80066a6:	4691      	mov	r9, r2
 80066a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066ac:	f108 0601 	add.w	r6, r8, #1
 80066b0:	42b3      	cmp	r3, r6
 80066b2:	db0b      	blt.n	80066cc <__lshift+0x38>
 80066b4:	4638      	mov	r0, r7
 80066b6:	f7ff fddd 	bl	8006274 <_Balloc>
 80066ba:	4605      	mov	r5, r0
 80066bc:	b948      	cbnz	r0, 80066d2 <__lshift+0x3e>
 80066be:	4602      	mov	r2, r0
 80066c0:	4b28      	ldr	r3, [pc, #160]	; (8006764 <__lshift+0xd0>)
 80066c2:	4829      	ldr	r0, [pc, #164]	; (8006768 <__lshift+0xd4>)
 80066c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80066c8:	f000 fa1c 	bl	8006b04 <__assert_func>
 80066cc:	3101      	adds	r1, #1
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	e7ee      	b.n	80066b0 <__lshift+0x1c>
 80066d2:	2300      	movs	r3, #0
 80066d4:	f100 0114 	add.w	r1, r0, #20
 80066d8:	f100 0210 	add.w	r2, r0, #16
 80066dc:	4618      	mov	r0, r3
 80066de:	4553      	cmp	r3, sl
 80066e0:	db33      	blt.n	800674a <__lshift+0xb6>
 80066e2:	6920      	ldr	r0, [r4, #16]
 80066e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066e8:	f104 0314 	add.w	r3, r4, #20
 80066ec:	f019 091f 	ands.w	r9, r9, #31
 80066f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066f8:	d02b      	beq.n	8006752 <__lshift+0xbe>
 80066fa:	f1c9 0e20 	rsb	lr, r9, #32
 80066fe:	468a      	mov	sl, r1
 8006700:	2200      	movs	r2, #0
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	fa00 f009 	lsl.w	r0, r0, r9
 8006708:	4310      	orrs	r0, r2
 800670a:	f84a 0b04 	str.w	r0, [sl], #4
 800670e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006712:	459c      	cmp	ip, r3
 8006714:	fa22 f20e 	lsr.w	r2, r2, lr
 8006718:	d8f3      	bhi.n	8006702 <__lshift+0x6e>
 800671a:	ebac 0304 	sub.w	r3, ip, r4
 800671e:	3b15      	subs	r3, #21
 8006720:	f023 0303 	bic.w	r3, r3, #3
 8006724:	3304      	adds	r3, #4
 8006726:	f104 0015 	add.w	r0, r4, #21
 800672a:	4584      	cmp	ip, r0
 800672c:	bf38      	it	cc
 800672e:	2304      	movcc	r3, #4
 8006730:	50ca      	str	r2, [r1, r3]
 8006732:	b10a      	cbz	r2, 8006738 <__lshift+0xa4>
 8006734:	f108 0602 	add.w	r6, r8, #2
 8006738:	3e01      	subs	r6, #1
 800673a:	4638      	mov	r0, r7
 800673c:	612e      	str	r6, [r5, #16]
 800673e:	4621      	mov	r1, r4
 8006740:	f7ff fdd8 	bl	80062f4 <_Bfree>
 8006744:	4628      	mov	r0, r5
 8006746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674a:	f842 0f04 	str.w	r0, [r2, #4]!
 800674e:	3301      	adds	r3, #1
 8006750:	e7c5      	b.n	80066de <__lshift+0x4a>
 8006752:	3904      	subs	r1, #4
 8006754:	f853 2b04 	ldr.w	r2, [r3], #4
 8006758:	f841 2f04 	str.w	r2, [r1, #4]!
 800675c:	459c      	cmp	ip, r3
 800675e:	d8f9      	bhi.n	8006754 <__lshift+0xc0>
 8006760:	e7ea      	b.n	8006738 <__lshift+0xa4>
 8006762:	bf00      	nop
 8006764:	08007220 	.word	0x08007220
 8006768:	08007231 	.word	0x08007231

0800676c <__mcmp>:
 800676c:	b530      	push	{r4, r5, lr}
 800676e:	6902      	ldr	r2, [r0, #16]
 8006770:	690c      	ldr	r4, [r1, #16]
 8006772:	1b12      	subs	r2, r2, r4
 8006774:	d10e      	bne.n	8006794 <__mcmp+0x28>
 8006776:	f100 0314 	add.w	r3, r0, #20
 800677a:	3114      	adds	r1, #20
 800677c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006780:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006784:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006788:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800678c:	42a5      	cmp	r5, r4
 800678e:	d003      	beq.n	8006798 <__mcmp+0x2c>
 8006790:	d305      	bcc.n	800679e <__mcmp+0x32>
 8006792:	2201      	movs	r2, #1
 8006794:	4610      	mov	r0, r2
 8006796:	bd30      	pop	{r4, r5, pc}
 8006798:	4283      	cmp	r3, r0
 800679a:	d3f3      	bcc.n	8006784 <__mcmp+0x18>
 800679c:	e7fa      	b.n	8006794 <__mcmp+0x28>
 800679e:	f04f 32ff 	mov.w	r2, #4294967295
 80067a2:	e7f7      	b.n	8006794 <__mcmp+0x28>

080067a4 <__mdiff>:
 80067a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	460c      	mov	r4, r1
 80067aa:	4606      	mov	r6, r0
 80067ac:	4611      	mov	r1, r2
 80067ae:	4620      	mov	r0, r4
 80067b0:	4690      	mov	r8, r2
 80067b2:	f7ff ffdb 	bl	800676c <__mcmp>
 80067b6:	1e05      	subs	r5, r0, #0
 80067b8:	d110      	bne.n	80067dc <__mdiff+0x38>
 80067ba:	4629      	mov	r1, r5
 80067bc:	4630      	mov	r0, r6
 80067be:	f7ff fd59 	bl	8006274 <_Balloc>
 80067c2:	b930      	cbnz	r0, 80067d2 <__mdiff+0x2e>
 80067c4:	4b3a      	ldr	r3, [pc, #232]	; (80068b0 <__mdiff+0x10c>)
 80067c6:	4602      	mov	r2, r0
 80067c8:	f240 2137 	movw	r1, #567	; 0x237
 80067cc:	4839      	ldr	r0, [pc, #228]	; (80068b4 <__mdiff+0x110>)
 80067ce:	f000 f999 	bl	8006b04 <__assert_func>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067dc:	bfa4      	itt	ge
 80067de:	4643      	movge	r3, r8
 80067e0:	46a0      	movge	r8, r4
 80067e2:	4630      	mov	r0, r6
 80067e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067e8:	bfa6      	itte	ge
 80067ea:	461c      	movge	r4, r3
 80067ec:	2500      	movge	r5, #0
 80067ee:	2501      	movlt	r5, #1
 80067f0:	f7ff fd40 	bl	8006274 <_Balloc>
 80067f4:	b920      	cbnz	r0, 8006800 <__mdiff+0x5c>
 80067f6:	4b2e      	ldr	r3, [pc, #184]	; (80068b0 <__mdiff+0x10c>)
 80067f8:	4602      	mov	r2, r0
 80067fa:	f240 2145 	movw	r1, #581	; 0x245
 80067fe:	e7e5      	b.n	80067cc <__mdiff+0x28>
 8006800:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006804:	6926      	ldr	r6, [r4, #16]
 8006806:	60c5      	str	r5, [r0, #12]
 8006808:	f104 0914 	add.w	r9, r4, #20
 800680c:	f108 0514 	add.w	r5, r8, #20
 8006810:	f100 0e14 	add.w	lr, r0, #20
 8006814:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006818:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800681c:	f108 0210 	add.w	r2, r8, #16
 8006820:	46f2      	mov	sl, lr
 8006822:	2100      	movs	r1, #0
 8006824:	f859 3b04 	ldr.w	r3, [r9], #4
 8006828:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800682c:	fa11 f88b 	uxtah	r8, r1, fp
 8006830:	b299      	uxth	r1, r3
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	eba8 0801 	sub.w	r8, r8, r1
 8006838:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800683c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006840:	fa1f f888 	uxth.w	r8, r8
 8006844:	1419      	asrs	r1, r3, #16
 8006846:	454e      	cmp	r6, r9
 8006848:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800684c:	f84a 3b04 	str.w	r3, [sl], #4
 8006850:	d8e8      	bhi.n	8006824 <__mdiff+0x80>
 8006852:	1b33      	subs	r3, r6, r4
 8006854:	3b15      	subs	r3, #21
 8006856:	f023 0303 	bic.w	r3, r3, #3
 800685a:	3304      	adds	r3, #4
 800685c:	3415      	adds	r4, #21
 800685e:	42a6      	cmp	r6, r4
 8006860:	bf38      	it	cc
 8006862:	2304      	movcc	r3, #4
 8006864:	441d      	add	r5, r3
 8006866:	4473      	add	r3, lr
 8006868:	469e      	mov	lr, r3
 800686a:	462e      	mov	r6, r5
 800686c:	4566      	cmp	r6, ip
 800686e:	d30e      	bcc.n	800688e <__mdiff+0xea>
 8006870:	f10c 0203 	add.w	r2, ip, #3
 8006874:	1b52      	subs	r2, r2, r5
 8006876:	f022 0203 	bic.w	r2, r2, #3
 800687a:	3d03      	subs	r5, #3
 800687c:	45ac      	cmp	ip, r5
 800687e:	bf38      	it	cc
 8006880:	2200      	movcc	r2, #0
 8006882:	4413      	add	r3, r2
 8006884:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006888:	b17a      	cbz	r2, 80068aa <__mdiff+0x106>
 800688a:	6107      	str	r7, [r0, #16]
 800688c:	e7a4      	b.n	80067d8 <__mdiff+0x34>
 800688e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006892:	fa11 f288 	uxtah	r2, r1, r8
 8006896:	1414      	asrs	r4, r2, #16
 8006898:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800689c:	b292      	uxth	r2, r2
 800689e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80068a2:	f84e 2b04 	str.w	r2, [lr], #4
 80068a6:	1421      	asrs	r1, r4, #16
 80068a8:	e7e0      	b.n	800686c <__mdiff+0xc8>
 80068aa:	3f01      	subs	r7, #1
 80068ac:	e7ea      	b.n	8006884 <__mdiff+0xe0>
 80068ae:	bf00      	nop
 80068b0:	08007220 	.word	0x08007220
 80068b4:	08007231 	.word	0x08007231

080068b8 <__d2b>:
 80068b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068bc:	460f      	mov	r7, r1
 80068be:	2101      	movs	r1, #1
 80068c0:	ec59 8b10 	vmov	r8, r9, d0
 80068c4:	4616      	mov	r6, r2
 80068c6:	f7ff fcd5 	bl	8006274 <_Balloc>
 80068ca:	4604      	mov	r4, r0
 80068cc:	b930      	cbnz	r0, 80068dc <__d2b+0x24>
 80068ce:	4602      	mov	r2, r0
 80068d0:	4b24      	ldr	r3, [pc, #144]	; (8006964 <__d2b+0xac>)
 80068d2:	4825      	ldr	r0, [pc, #148]	; (8006968 <__d2b+0xb0>)
 80068d4:	f240 310f 	movw	r1, #783	; 0x30f
 80068d8:	f000 f914 	bl	8006b04 <__assert_func>
 80068dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068e4:	bb2d      	cbnz	r5, 8006932 <__d2b+0x7a>
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	f1b8 0300 	subs.w	r3, r8, #0
 80068ec:	d026      	beq.n	800693c <__d2b+0x84>
 80068ee:	4668      	mov	r0, sp
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	f7ff fd87 	bl	8006404 <__lo0bits>
 80068f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068fa:	b1e8      	cbz	r0, 8006938 <__d2b+0x80>
 80068fc:	f1c0 0320 	rsb	r3, r0, #32
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	430b      	orrs	r3, r1
 8006906:	40c2      	lsrs	r2, r0
 8006908:	6163      	str	r3, [r4, #20]
 800690a:	9201      	str	r2, [sp, #4]
 800690c:	9b01      	ldr	r3, [sp, #4]
 800690e:	61a3      	str	r3, [r4, #24]
 8006910:	2b00      	cmp	r3, #0
 8006912:	bf14      	ite	ne
 8006914:	2202      	movne	r2, #2
 8006916:	2201      	moveq	r2, #1
 8006918:	6122      	str	r2, [r4, #16]
 800691a:	b1bd      	cbz	r5, 800694c <__d2b+0x94>
 800691c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006920:	4405      	add	r5, r0
 8006922:	603d      	str	r5, [r7, #0]
 8006924:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006928:	6030      	str	r0, [r6, #0]
 800692a:	4620      	mov	r0, r4
 800692c:	b003      	add	sp, #12
 800692e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006936:	e7d6      	b.n	80068e6 <__d2b+0x2e>
 8006938:	6161      	str	r1, [r4, #20]
 800693a:	e7e7      	b.n	800690c <__d2b+0x54>
 800693c:	a801      	add	r0, sp, #4
 800693e:	f7ff fd61 	bl	8006404 <__lo0bits>
 8006942:	9b01      	ldr	r3, [sp, #4]
 8006944:	6163      	str	r3, [r4, #20]
 8006946:	3020      	adds	r0, #32
 8006948:	2201      	movs	r2, #1
 800694a:	e7e5      	b.n	8006918 <__d2b+0x60>
 800694c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006950:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006954:	6038      	str	r0, [r7, #0]
 8006956:	6918      	ldr	r0, [r3, #16]
 8006958:	f7ff fd34 	bl	80063c4 <__hi0bits>
 800695c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006960:	e7e2      	b.n	8006928 <__d2b+0x70>
 8006962:	bf00      	nop
 8006964:	08007220 	.word	0x08007220
 8006968:	08007231 	.word	0x08007231

0800696c <__sflush_r>:
 800696c:	898a      	ldrh	r2, [r1, #12]
 800696e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006972:	4605      	mov	r5, r0
 8006974:	0710      	lsls	r0, r2, #28
 8006976:	460c      	mov	r4, r1
 8006978:	d458      	bmi.n	8006a2c <__sflush_r+0xc0>
 800697a:	684b      	ldr	r3, [r1, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	dc05      	bgt.n	800698c <__sflush_r+0x20>
 8006980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	dc02      	bgt.n	800698c <__sflush_r+0x20>
 8006986:	2000      	movs	r0, #0
 8006988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800698c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800698e:	2e00      	cmp	r6, #0
 8006990:	d0f9      	beq.n	8006986 <__sflush_r+0x1a>
 8006992:	2300      	movs	r3, #0
 8006994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006998:	682f      	ldr	r7, [r5, #0]
 800699a:	6a21      	ldr	r1, [r4, #32]
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	d032      	beq.n	8006a06 <__sflush_r+0x9a>
 80069a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	075a      	lsls	r2, r3, #29
 80069a6:	d505      	bpl.n	80069b4 <__sflush_r+0x48>
 80069a8:	6863      	ldr	r3, [r4, #4]
 80069aa:	1ac0      	subs	r0, r0, r3
 80069ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069ae:	b10b      	cbz	r3, 80069b4 <__sflush_r+0x48>
 80069b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069b2:	1ac0      	subs	r0, r0, r3
 80069b4:	2300      	movs	r3, #0
 80069b6:	4602      	mov	r2, r0
 80069b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ba:	6a21      	ldr	r1, [r4, #32]
 80069bc:	4628      	mov	r0, r5
 80069be:	47b0      	blx	r6
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	d106      	bne.n	80069d4 <__sflush_r+0x68>
 80069c6:	6829      	ldr	r1, [r5, #0]
 80069c8:	291d      	cmp	r1, #29
 80069ca:	d82b      	bhi.n	8006a24 <__sflush_r+0xb8>
 80069cc:	4a29      	ldr	r2, [pc, #164]	; (8006a74 <__sflush_r+0x108>)
 80069ce:	410a      	asrs	r2, r1
 80069d0:	07d6      	lsls	r6, r2, #31
 80069d2:	d427      	bmi.n	8006a24 <__sflush_r+0xb8>
 80069d4:	2200      	movs	r2, #0
 80069d6:	6062      	str	r2, [r4, #4]
 80069d8:	04d9      	lsls	r1, r3, #19
 80069da:	6922      	ldr	r2, [r4, #16]
 80069dc:	6022      	str	r2, [r4, #0]
 80069de:	d504      	bpl.n	80069ea <__sflush_r+0x7e>
 80069e0:	1c42      	adds	r2, r0, #1
 80069e2:	d101      	bne.n	80069e8 <__sflush_r+0x7c>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b903      	cbnz	r3, 80069ea <__sflush_r+0x7e>
 80069e8:	6560      	str	r0, [r4, #84]	; 0x54
 80069ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ec:	602f      	str	r7, [r5, #0]
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d0c9      	beq.n	8006986 <__sflush_r+0x1a>
 80069f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f6:	4299      	cmp	r1, r3
 80069f8:	d002      	beq.n	8006a00 <__sflush_r+0x94>
 80069fa:	4628      	mov	r0, r5
 80069fc:	f7ff fb3a 	bl	8006074 <_free_r>
 8006a00:	2000      	movs	r0, #0
 8006a02:	6360      	str	r0, [r4, #52]	; 0x34
 8006a04:	e7c0      	b.n	8006988 <__sflush_r+0x1c>
 8006a06:	2301      	movs	r3, #1
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b0      	blx	r6
 8006a0c:	1c41      	adds	r1, r0, #1
 8006a0e:	d1c8      	bne.n	80069a2 <__sflush_r+0x36>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0c5      	beq.n	80069a2 <__sflush_r+0x36>
 8006a16:	2b1d      	cmp	r3, #29
 8006a18:	d001      	beq.n	8006a1e <__sflush_r+0xb2>
 8006a1a:	2b16      	cmp	r3, #22
 8006a1c:	d101      	bne.n	8006a22 <__sflush_r+0xb6>
 8006a1e:	602f      	str	r7, [r5, #0]
 8006a20:	e7b1      	b.n	8006986 <__sflush_r+0x1a>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a28:	81a3      	strh	r3, [r4, #12]
 8006a2a:	e7ad      	b.n	8006988 <__sflush_r+0x1c>
 8006a2c:	690f      	ldr	r7, [r1, #16]
 8006a2e:	2f00      	cmp	r7, #0
 8006a30:	d0a9      	beq.n	8006986 <__sflush_r+0x1a>
 8006a32:	0793      	lsls	r3, r2, #30
 8006a34:	680e      	ldr	r6, [r1, #0]
 8006a36:	bf08      	it	eq
 8006a38:	694b      	ldreq	r3, [r1, #20]
 8006a3a:	600f      	str	r7, [r1, #0]
 8006a3c:	bf18      	it	ne
 8006a3e:	2300      	movne	r3, #0
 8006a40:	eba6 0807 	sub.w	r8, r6, r7
 8006a44:	608b      	str	r3, [r1, #8]
 8006a46:	f1b8 0f00 	cmp.w	r8, #0
 8006a4a:	dd9c      	ble.n	8006986 <__sflush_r+0x1a>
 8006a4c:	6a21      	ldr	r1, [r4, #32]
 8006a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a50:	4643      	mov	r3, r8
 8006a52:	463a      	mov	r2, r7
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b0      	blx	r6
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	dc06      	bgt.n	8006a6a <__sflush_r+0xfe>
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a62:	81a3      	strh	r3, [r4, #12]
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295
 8006a68:	e78e      	b.n	8006988 <__sflush_r+0x1c>
 8006a6a:	4407      	add	r7, r0
 8006a6c:	eba8 0800 	sub.w	r8, r8, r0
 8006a70:	e7e9      	b.n	8006a46 <__sflush_r+0xda>
 8006a72:	bf00      	nop
 8006a74:	dfbffffe 	.word	0xdfbffffe

08006a78 <_fflush_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	690b      	ldr	r3, [r1, #16]
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	b913      	cbnz	r3, 8006a88 <_fflush_r+0x10>
 8006a82:	2500      	movs	r5, #0
 8006a84:	4628      	mov	r0, r5
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	b118      	cbz	r0, 8006a92 <_fflush_r+0x1a>
 8006a8a:	6a03      	ldr	r3, [r0, #32]
 8006a8c:	b90b      	cbnz	r3, 8006a92 <_fflush_r+0x1a>
 8006a8e:	f7fe fb7b 	bl	8005188 <__sinit>
 8006a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0f3      	beq.n	8006a82 <_fflush_r+0xa>
 8006a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a9c:	07d0      	lsls	r0, r2, #31
 8006a9e:	d404      	bmi.n	8006aaa <_fflush_r+0x32>
 8006aa0:	0599      	lsls	r1, r3, #22
 8006aa2:	d402      	bmi.n	8006aaa <_fflush_r+0x32>
 8006aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aa6:	f7fe fc66 	bl	8005376 <__retarget_lock_acquire_recursive>
 8006aaa:	4628      	mov	r0, r5
 8006aac:	4621      	mov	r1, r4
 8006aae:	f7ff ff5d 	bl	800696c <__sflush_r>
 8006ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ab4:	07da      	lsls	r2, r3, #31
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	d4e4      	bmi.n	8006a84 <_fflush_r+0xc>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	059b      	lsls	r3, r3, #22
 8006abe:	d4e1      	bmi.n	8006a84 <_fflush_r+0xc>
 8006ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ac2:	f7fe fc59 	bl	8005378 <__retarget_lock_release_recursive>
 8006ac6:	e7dd      	b.n	8006a84 <_fflush_r+0xc>

08006ac8 <_sbrk_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4d06      	ldr	r5, [pc, #24]	; (8006ae4 <_sbrk_r+0x1c>)
 8006acc:	2300      	movs	r3, #0
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	f7fa fb8e 	bl	80011f4 <_sbrk>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_sbrk_r+0x1a>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_sbrk_r+0x1a>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20000410 	.word	0x20000410

08006ae8 <memcpy>:
 8006ae8:	440a      	add	r2, r1
 8006aea:	4291      	cmp	r1, r2
 8006aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006af0:	d100      	bne.n	8006af4 <memcpy+0xc>
 8006af2:	4770      	bx	lr
 8006af4:	b510      	push	{r4, lr}
 8006af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006afe:	4291      	cmp	r1, r2
 8006b00:	d1f9      	bne.n	8006af6 <memcpy+0xe>
 8006b02:	bd10      	pop	{r4, pc}

08006b04 <__assert_func>:
 8006b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b06:	4614      	mov	r4, r2
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <__assert_func+0x2c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4605      	mov	r5, r0
 8006b10:	68d8      	ldr	r0, [r3, #12]
 8006b12:	b14c      	cbz	r4, 8006b28 <__assert_func+0x24>
 8006b14:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <__assert_func+0x30>)
 8006b16:	9100      	str	r1, [sp, #0]
 8006b18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b1c:	4906      	ldr	r1, [pc, #24]	; (8006b38 <__assert_func+0x34>)
 8006b1e:	462b      	mov	r3, r5
 8006b20:	f000 f844 	bl	8006bac <fiprintf>
 8006b24:	f000 f854 	bl	8006bd0 <abort>
 8006b28:	4b04      	ldr	r3, [pc, #16]	; (8006b3c <__assert_func+0x38>)
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	e7f3      	b.n	8006b16 <__assert_func+0x12>
 8006b2e:	bf00      	nop
 8006b30:	20000064 	.word	0x20000064
 8006b34:	08007396 	.word	0x08007396
 8006b38:	080073a3 	.word	0x080073a3
 8006b3c:	080073d1 	.word	0x080073d1

08006b40 <_calloc_r>:
 8006b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b42:	fba1 2402 	umull	r2, r4, r1, r2
 8006b46:	b94c      	cbnz	r4, 8006b5c <_calloc_r+0x1c>
 8006b48:	4611      	mov	r1, r2
 8006b4a:	9201      	str	r2, [sp, #4]
 8006b4c:	f7ff fb06 	bl	800615c <_malloc_r>
 8006b50:	9a01      	ldr	r2, [sp, #4]
 8006b52:	4605      	mov	r5, r0
 8006b54:	b930      	cbnz	r0, 8006b64 <_calloc_r+0x24>
 8006b56:	4628      	mov	r0, r5
 8006b58:	b003      	add	sp, #12
 8006b5a:	bd30      	pop	{r4, r5, pc}
 8006b5c:	220c      	movs	r2, #12
 8006b5e:	6002      	str	r2, [r0, #0]
 8006b60:	2500      	movs	r5, #0
 8006b62:	e7f8      	b.n	8006b56 <_calloc_r+0x16>
 8006b64:	4621      	mov	r1, r4
 8006b66:	f7fe fb88 	bl	800527a <memset>
 8006b6a:	e7f4      	b.n	8006b56 <_calloc_r+0x16>

08006b6c <__ascii_mbtowc>:
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	b901      	cbnz	r1, 8006b72 <__ascii_mbtowc+0x6>
 8006b70:	a901      	add	r1, sp, #4
 8006b72:	b142      	cbz	r2, 8006b86 <__ascii_mbtowc+0x1a>
 8006b74:	b14b      	cbz	r3, 8006b8a <__ascii_mbtowc+0x1e>
 8006b76:	7813      	ldrb	r3, [r2, #0]
 8006b78:	600b      	str	r3, [r1, #0]
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	1e10      	subs	r0, r2, #0
 8006b7e:	bf18      	it	ne
 8006b80:	2001      	movne	r0, #1
 8006b82:	b002      	add	sp, #8
 8006b84:	4770      	bx	lr
 8006b86:	4610      	mov	r0, r2
 8006b88:	e7fb      	b.n	8006b82 <__ascii_mbtowc+0x16>
 8006b8a:	f06f 0001 	mvn.w	r0, #1
 8006b8e:	e7f8      	b.n	8006b82 <__ascii_mbtowc+0x16>

08006b90 <__ascii_wctomb>:
 8006b90:	b149      	cbz	r1, 8006ba6 <__ascii_wctomb+0x16>
 8006b92:	2aff      	cmp	r2, #255	; 0xff
 8006b94:	bf85      	ittet	hi
 8006b96:	238a      	movhi	r3, #138	; 0x8a
 8006b98:	6003      	strhi	r3, [r0, #0]
 8006b9a:	700a      	strbls	r2, [r1, #0]
 8006b9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ba0:	bf98      	it	ls
 8006ba2:	2001      	movls	r0, #1
 8006ba4:	4770      	bx	lr
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	4770      	bx	lr
	...

08006bac <fiprintf>:
 8006bac:	b40e      	push	{r1, r2, r3}
 8006bae:	b503      	push	{r0, r1, lr}
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	ab03      	add	r3, sp, #12
 8006bb4:	4805      	ldr	r0, [pc, #20]	; (8006bcc <fiprintf+0x20>)
 8006bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bba:	6800      	ldr	r0, [r0, #0]
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	f000 f837 	bl	8006c30 <_vfiprintf_r>
 8006bc2:	b002      	add	sp, #8
 8006bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc8:	b003      	add	sp, #12
 8006bca:	4770      	bx	lr
 8006bcc:	20000064 	.word	0x20000064

08006bd0 <abort>:
 8006bd0:	b508      	push	{r3, lr}
 8006bd2:	2006      	movs	r0, #6
 8006bd4:	f000 fa04 	bl	8006fe0 <raise>
 8006bd8:	2001      	movs	r0, #1
 8006bda:	f7fa fa93 	bl	8001104 <_exit>

08006bde <__sfputc_r>:
 8006bde:	6893      	ldr	r3, [r2, #8]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	b410      	push	{r4}
 8006be6:	6093      	str	r3, [r2, #8]
 8006be8:	da08      	bge.n	8006bfc <__sfputc_r+0x1e>
 8006bea:	6994      	ldr	r4, [r2, #24]
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	db01      	blt.n	8006bf4 <__sfputc_r+0x16>
 8006bf0:	290a      	cmp	r1, #10
 8006bf2:	d103      	bne.n	8006bfc <__sfputc_r+0x1e>
 8006bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bf8:	f000 b934 	b.w	8006e64 <__swbuf_r>
 8006bfc:	6813      	ldr	r3, [r2, #0]
 8006bfe:	1c58      	adds	r0, r3, #1
 8006c00:	6010      	str	r0, [r2, #0]
 8006c02:	7019      	strb	r1, [r3, #0]
 8006c04:	4608      	mov	r0, r1
 8006c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <__sfputs_r>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	4614      	mov	r4, r2
 8006c14:	18d5      	adds	r5, r2, r3
 8006c16:	42ac      	cmp	r4, r5
 8006c18:	d101      	bne.n	8006c1e <__sfputs_r+0x12>
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	e007      	b.n	8006c2e <__sfputs_r+0x22>
 8006c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c22:	463a      	mov	r2, r7
 8006c24:	4630      	mov	r0, r6
 8006c26:	f7ff ffda 	bl	8006bde <__sfputc_r>
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	d1f3      	bne.n	8006c16 <__sfputs_r+0xa>
 8006c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c30 <_vfiprintf_r>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	460d      	mov	r5, r1
 8006c36:	b09d      	sub	sp, #116	; 0x74
 8006c38:	4614      	mov	r4, r2
 8006c3a:	4698      	mov	r8, r3
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	b118      	cbz	r0, 8006c48 <_vfiprintf_r+0x18>
 8006c40:	6a03      	ldr	r3, [r0, #32]
 8006c42:	b90b      	cbnz	r3, 8006c48 <_vfiprintf_r+0x18>
 8006c44:	f7fe faa0 	bl	8005188 <__sinit>
 8006c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c4a:	07d9      	lsls	r1, r3, #31
 8006c4c:	d405      	bmi.n	8006c5a <_vfiprintf_r+0x2a>
 8006c4e:	89ab      	ldrh	r3, [r5, #12]
 8006c50:	059a      	lsls	r2, r3, #22
 8006c52:	d402      	bmi.n	8006c5a <_vfiprintf_r+0x2a>
 8006c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c56:	f7fe fb8e 	bl	8005376 <__retarget_lock_acquire_recursive>
 8006c5a:	89ab      	ldrh	r3, [r5, #12]
 8006c5c:	071b      	lsls	r3, r3, #28
 8006c5e:	d501      	bpl.n	8006c64 <_vfiprintf_r+0x34>
 8006c60:	692b      	ldr	r3, [r5, #16]
 8006c62:	b99b      	cbnz	r3, 8006c8c <_vfiprintf_r+0x5c>
 8006c64:	4629      	mov	r1, r5
 8006c66:	4630      	mov	r0, r6
 8006c68:	f000 f93a 	bl	8006ee0 <__swsetup_r>
 8006c6c:	b170      	cbz	r0, 8006c8c <_vfiprintf_r+0x5c>
 8006c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c70:	07dc      	lsls	r4, r3, #31
 8006c72:	d504      	bpl.n	8006c7e <_vfiprintf_r+0x4e>
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	b01d      	add	sp, #116	; 0x74
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	89ab      	ldrh	r3, [r5, #12]
 8006c80:	0598      	lsls	r0, r3, #22
 8006c82:	d4f7      	bmi.n	8006c74 <_vfiprintf_r+0x44>
 8006c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c86:	f7fe fb77 	bl	8005378 <__retarget_lock_release_recursive>
 8006c8a:	e7f3      	b.n	8006c74 <_vfiprintf_r+0x44>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c90:	2320      	movs	r3, #32
 8006c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c9a:	2330      	movs	r3, #48	; 0x30
 8006c9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006e50 <_vfiprintf_r+0x220>
 8006ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ca4:	f04f 0901 	mov.w	r9, #1
 8006ca8:	4623      	mov	r3, r4
 8006caa:	469a      	mov	sl, r3
 8006cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb0:	b10a      	cbz	r2, 8006cb6 <_vfiprintf_r+0x86>
 8006cb2:	2a25      	cmp	r2, #37	; 0x25
 8006cb4:	d1f9      	bne.n	8006caa <_vfiprintf_r+0x7a>
 8006cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8006cba:	d00b      	beq.n	8006cd4 <_vfiprintf_r+0xa4>
 8006cbc:	465b      	mov	r3, fp
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff ffa2 	bl	8006c0c <__sfputs_r>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	f000 80a9 	beq.w	8006e20 <_vfiprintf_r+0x1f0>
 8006cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd0:	445a      	add	r2, fp
 8006cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80a1 	beq.w	8006e20 <_vfiprintf_r+0x1f0>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ce8:	f10a 0a01 	add.w	sl, sl, #1
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cf6:	4654      	mov	r4, sl
 8006cf8:	2205      	movs	r2, #5
 8006cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfe:	4854      	ldr	r0, [pc, #336]	; (8006e50 <_vfiprintf_r+0x220>)
 8006d00:	f7f9 fa6e 	bl	80001e0 <memchr>
 8006d04:	9a04      	ldr	r2, [sp, #16]
 8006d06:	b9d8      	cbnz	r0, 8006d40 <_vfiprintf_r+0x110>
 8006d08:	06d1      	lsls	r1, r2, #27
 8006d0a:	bf44      	itt	mi
 8006d0c:	2320      	movmi	r3, #32
 8006d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d12:	0713      	lsls	r3, r2, #28
 8006d14:	bf44      	itt	mi
 8006d16:	232b      	movmi	r3, #43	; 0x2b
 8006d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d20:	2b2a      	cmp	r3, #42	; 0x2a
 8006d22:	d015      	beq.n	8006d50 <_vfiprintf_r+0x120>
 8006d24:	9a07      	ldr	r2, [sp, #28]
 8006d26:	4654      	mov	r4, sl
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f04f 0c0a 	mov.w	ip, #10
 8006d2e:	4621      	mov	r1, r4
 8006d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d34:	3b30      	subs	r3, #48	; 0x30
 8006d36:	2b09      	cmp	r3, #9
 8006d38:	d94d      	bls.n	8006dd6 <_vfiprintf_r+0x1a6>
 8006d3a:	b1b0      	cbz	r0, 8006d6a <_vfiprintf_r+0x13a>
 8006d3c:	9207      	str	r2, [sp, #28]
 8006d3e:	e014      	b.n	8006d6a <_vfiprintf_r+0x13a>
 8006d40:	eba0 0308 	sub.w	r3, r0, r8
 8006d44:	fa09 f303 	lsl.w	r3, r9, r3
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	46a2      	mov	sl, r4
 8006d4e:	e7d2      	b.n	8006cf6 <_vfiprintf_r+0xc6>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	1d19      	adds	r1, r3, #4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	9103      	str	r1, [sp, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bfbb      	ittet	lt
 8006d5c:	425b      	neglt	r3, r3
 8006d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d62:	9307      	strge	r3, [sp, #28]
 8006d64:	9307      	strlt	r3, [sp, #28]
 8006d66:	bfb8      	it	lt
 8006d68:	9204      	strlt	r2, [sp, #16]
 8006d6a:	7823      	ldrb	r3, [r4, #0]
 8006d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d6e:	d10c      	bne.n	8006d8a <_vfiprintf_r+0x15a>
 8006d70:	7863      	ldrb	r3, [r4, #1]
 8006d72:	2b2a      	cmp	r3, #42	; 0x2a
 8006d74:	d134      	bne.n	8006de0 <_vfiprintf_r+0x1b0>
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	1d1a      	adds	r2, r3, #4
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	9203      	str	r2, [sp, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfb8      	it	lt
 8006d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d86:	3402      	adds	r4, #2
 8006d88:	9305      	str	r3, [sp, #20]
 8006d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006e60 <_vfiprintf_r+0x230>
 8006d8e:	7821      	ldrb	r1, [r4, #0]
 8006d90:	2203      	movs	r2, #3
 8006d92:	4650      	mov	r0, sl
 8006d94:	f7f9 fa24 	bl	80001e0 <memchr>
 8006d98:	b138      	cbz	r0, 8006daa <_vfiprintf_r+0x17a>
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	eba0 000a 	sub.w	r0, r0, sl
 8006da0:	2240      	movs	r2, #64	; 0x40
 8006da2:	4082      	lsls	r2, r0
 8006da4:	4313      	orrs	r3, r2
 8006da6:	3401      	adds	r4, #1
 8006da8:	9304      	str	r3, [sp, #16]
 8006daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dae:	4829      	ldr	r0, [pc, #164]	; (8006e54 <_vfiprintf_r+0x224>)
 8006db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006db4:	2206      	movs	r2, #6
 8006db6:	f7f9 fa13 	bl	80001e0 <memchr>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d03f      	beq.n	8006e3e <_vfiprintf_r+0x20e>
 8006dbe:	4b26      	ldr	r3, [pc, #152]	; (8006e58 <_vfiprintf_r+0x228>)
 8006dc0:	bb1b      	cbnz	r3, 8006e0a <_vfiprintf_r+0x1da>
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	3307      	adds	r3, #7
 8006dc6:	f023 0307 	bic.w	r3, r3, #7
 8006dca:	3308      	adds	r3, #8
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd0:	443b      	add	r3, r7
 8006dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd4:	e768      	b.n	8006ca8 <_vfiprintf_r+0x78>
 8006dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dda:	460c      	mov	r4, r1
 8006ddc:	2001      	movs	r0, #1
 8006dde:	e7a6      	b.n	8006d2e <_vfiprintf_r+0xfe>
 8006de0:	2300      	movs	r3, #0
 8006de2:	3401      	adds	r4, #1
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	4619      	mov	r1, r3
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	4620      	mov	r0, r4
 8006dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df2:	3a30      	subs	r2, #48	; 0x30
 8006df4:	2a09      	cmp	r2, #9
 8006df6:	d903      	bls.n	8006e00 <_vfiprintf_r+0x1d0>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0c6      	beq.n	8006d8a <_vfiprintf_r+0x15a>
 8006dfc:	9105      	str	r1, [sp, #20]
 8006dfe:	e7c4      	b.n	8006d8a <_vfiprintf_r+0x15a>
 8006e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e04:	4604      	mov	r4, r0
 8006e06:	2301      	movs	r3, #1
 8006e08:	e7f0      	b.n	8006dec <_vfiprintf_r+0x1bc>
 8006e0a:	ab03      	add	r3, sp, #12
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <_vfiprintf_r+0x22c>)
 8006e12:	a904      	add	r1, sp, #16
 8006e14:	4630      	mov	r0, r6
 8006e16:	f7fd fd65 	bl	80048e4 <_printf_float>
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	1c78      	adds	r0, r7, #1
 8006e1e:	d1d6      	bne.n	8006dce <_vfiprintf_r+0x19e>
 8006e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e22:	07d9      	lsls	r1, r3, #31
 8006e24:	d405      	bmi.n	8006e32 <_vfiprintf_r+0x202>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	059a      	lsls	r2, r3, #22
 8006e2a:	d402      	bmi.n	8006e32 <_vfiprintf_r+0x202>
 8006e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e2e:	f7fe faa3 	bl	8005378 <__retarget_lock_release_recursive>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	065b      	lsls	r3, r3, #25
 8006e36:	f53f af1d 	bmi.w	8006c74 <_vfiprintf_r+0x44>
 8006e3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e3c:	e71c      	b.n	8006c78 <_vfiprintf_r+0x48>
 8006e3e:	ab03      	add	r3, sp, #12
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	462a      	mov	r2, r5
 8006e44:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <_vfiprintf_r+0x22c>)
 8006e46:	a904      	add	r1, sp, #16
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7fd ffef 	bl	8004e2c <_printf_i>
 8006e4e:	e7e4      	b.n	8006e1a <_vfiprintf_r+0x1ea>
 8006e50:	080074d3 	.word	0x080074d3
 8006e54:	080074dd 	.word	0x080074dd
 8006e58:	080048e5 	.word	0x080048e5
 8006e5c:	08006c0d 	.word	0x08006c0d
 8006e60:	080074d9 	.word	0x080074d9

08006e64 <__swbuf_r>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	460e      	mov	r6, r1
 8006e68:	4614      	mov	r4, r2
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	b118      	cbz	r0, 8006e76 <__swbuf_r+0x12>
 8006e6e:	6a03      	ldr	r3, [r0, #32]
 8006e70:	b90b      	cbnz	r3, 8006e76 <__swbuf_r+0x12>
 8006e72:	f7fe f989 	bl	8005188 <__sinit>
 8006e76:	69a3      	ldr	r3, [r4, #24]
 8006e78:	60a3      	str	r3, [r4, #8]
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	071a      	lsls	r2, r3, #28
 8006e7e:	d525      	bpl.n	8006ecc <__swbuf_r+0x68>
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	b31b      	cbz	r3, 8006ecc <__swbuf_r+0x68>
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	6922      	ldr	r2, [r4, #16]
 8006e88:	1a98      	subs	r0, r3, r2
 8006e8a:	6963      	ldr	r3, [r4, #20]
 8006e8c:	b2f6      	uxtb	r6, r6
 8006e8e:	4283      	cmp	r3, r0
 8006e90:	4637      	mov	r7, r6
 8006e92:	dc04      	bgt.n	8006e9e <__swbuf_r+0x3a>
 8006e94:	4621      	mov	r1, r4
 8006e96:	4628      	mov	r0, r5
 8006e98:	f7ff fdee 	bl	8006a78 <_fflush_r>
 8006e9c:	b9e0      	cbnz	r0, 8006ed8 <__swbuf_r+0x74>
 8006e9e:	68a3      	ldr	r3, [r4, #8]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	60a3      	str	r3, [r4, #8]
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	6022      	str	r2, [r4, #0]
 8006eaa:	701e      	strb	r6, [r3, #0]
 8006eac:	6962      	ldr	r2, [r4, #20]
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d004      	beq.n	8006ebe <__swbuf_r+0x5a>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	07db      	lsls	r3, r3, #31
 8006eb8:	d506      	bpl.n	8006ec8 <__swbuf_r+0x64>
 8006eba:	2e0a      	cmp	r6, #10
 8006ebc:	d104      	bne.n	8006ec8 <__swbuf_r+0x64>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f7ff fdd9 	bl	8006a78 <_fflush_r>
 8006ec6:	b938      	cbnz	r0, 8006ed8 <__swbuf_r+0x74>
 8006ec8:	4638      	mov	r0, r7
 8006eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 f806 	bl	8006ee0 <__swsetup_r>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d0d5      	beq.n	8006e84 <__swbuf_r+0x20>
 8006ed8:	f04f 37ff 	mov.w	r7, #4294967295
 8006edc:	e7f4      	b.n	8006ec8 <__swbuf_r+0x64>
	...

08006ee0 <__swsetup_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4b2a      	ldr	r3, [pc, #168]	; (8006f8c <__swsetup_r+0xac>)
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	6818      	ldr	r0, [r3, #0]
 8006ee8:	460c      	mov	r4, r1
 8006eea:	b118      	cbz	r0, 8006ef4 <__swsetup_r+0x14>
 8006eec:	6a03      	ldr	r3, [r0, #32]
 8006eee:	b90b      	cbnz	r3, 8006ef4 <__swsetup_r+0x14>
 8006ef0:	f7fe f94a 	bl	8005188 <__sinit>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006efa:	0718      	lsls	r0, r3, #28
 8006efc:	d422      	bmi.n	8006f44 <__swsetup_r+0x64>
 8006efe:	06d9      	lsls	r1, r3, #27
 8006f00:	d407      	bmi.n	8006f12 <__swsetup_r+0x32>
 8006f02:	2309      	movs	r3, #9
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	e034      	b.n	8006f7c <__swsetup_r+0x9c>
 8006f12:	0758      	lsls	r0, r3, #29
 8006f14:	d512      	bpl.n	8006f3c <__swsetup_r+0x5c>
 8006f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f18:	b141      	cbz	r1, 8006f2c <__swsetup_r+0x4c>
 8006f1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f1e:	4299      	cmp	r1, r3
 8006f20:	d002      	beq.n	8006f28 <__swsetup_r+0x48>
 8006f22:	4628      	mov	r0, r5
 8006f24:	f7ff f8a6 	bl	8006074 <_free_r>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6363      	str	r3, [r4, #52]	; 0x34
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	2300      	movs	r3, #0
 8006f36:	6063      	str	r3, [r4, #4]
 8006f38:	6923      	ldr	r3, [r4, #16]
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f043 0308 	orr.w	r3, r3, #8
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	b94b      	cbnz	r3, 8006f5c <__swsetup_r+0x7c>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f52:	d003      	beq.n	8006f5c <__swsetup_r+0x7c>
 8006f54:	4621      	mov	r1, r4
 8006f56:	4628      	mov	r0, r5
 8006f58:	f000 f884 	bl	8007064 <__smakebuf_r>
 8006f5c:	89a0      	ldrh	r0, [r4, #12]
 8006f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f62:	f010 0301 	ands.w	r3, r0, #1
 8006f66:	d00a      	beq.n	8006f7e <__swsetup_r+0x9e>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60a3      	str	r3, [r4, #8]
 8006f6c:	6963      	ldr	r3, [r4, #20]
 8006f6e:	425b      	negs	r3, r3
 8006f70:	61a3      	str	r3, [r4, #24]
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	b943      	cbnz	r3, 8006f88 <__swsetup_r+0xa8>
 8006f76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f7a:	d1c4      	bne.n	8006f06 <__swsetup_r+0x26>
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
 8006f7e:	0781      	lsls	r1, r0, #30
 8006f80:	bf58      	it	pl
 8006f82:	6963      	ldrpl	r3, [r4, #20]
 8006f84:	60a3      	str	r3, [r4, #8]
 8006f86:	e7f4      	b.n	8006f72 <__swsetup_r+0x92>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e7f7      	b.n	8006f7c <__swsetup_r+0x9c>
 8006f8c:	20000064 	.word	0x20000064

08006f90 <_raise_r>:
 8006f90:	291f      	cmp	r1, #31
 8006f92:	b538      	push	{r3, r4, r5, lr}
 8006f94:	4604      	mov	r4, r0
 8006f96:	460d      	mov	r5, r1
 8006f98:	d904      	bls.n	8006fa4 <_raise_r+0x14>
 8006f9a:	2316      	movs	r3, #22
 8006f9c:	6003      	str	r3, [r0, #0]
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006fa6:	b112      	cbz	r2, 8006fae <_raise_r+0x1e>
 8006fa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fac:	b94b      	cbnz	r3, 8006fc2 <_raise_r+0x32>
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 f830 	bl	8007014 <_getpid_r>
 8006fb4:	462a      	mov	r2, r5
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	4620      	mov	r0, r4
 8006fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fbe:	f000 b817 	b.w	8006ff0 <_kill_r>
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d00a      	beq.n	8006fdc <_raise_r+0x4c>
 8006fc6:	1c59      	adds	r1, r3, #1
 8006fc8:	d103      	bne.n	8006fd2 <_raise_r+0x42>
 8006fca:	2316      	movs	r3, #22
 8006fcc:	6003      	str	r3, [r0, #0]
 8006fce:	2001      	movs	r0, #1
 8006fd0:	e7e7      	b.n	8006fa2 <_raise_r+0x12>
 8006fd2:	2400      	movs	r4, #0
 8006fd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fd8:	4628      	mov	r0, r5
 8006fda:	4798      	blx	r3
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e7e0      	b.n	8006fa2 <_raise_r+0x12>

08006fe0 <raise>:
 8006fe0:	4b02      	ldr	r3, [pc, #8]	; (8006fec <raise+0xc>)
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	f7ff bfd3 	b.w	8006f90 <_raise_r>
 8006fea:	bf00      	nop
 8006fec:	20000064 	.word	0x20000064

08006ff0 <_kill_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	; (8007010 <_kill_r+0x20>)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	f7fa f871 	bl	80010e4 <_kill>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d102      	bne.n	800700c <_kill_r+0x1c>
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	b103      	cbz	r3, 800700c <_kill_r+0x1c>
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	bf00      	nop
 8007010:	20000410 	.word	0x20000410

08007014 <_getpid_r>:
 8007014:	f7fa b85e 	b.w	80010d4 <_getpid>

08007018 <__swhatbuf_r>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	460c      	mov	r4, r1
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	2900      	cmp	r1, #0
 8007022:	b096      	sub	sp, #88	; 0x58
 8007024:	4615      	mov	r5, r2
 8007026:	461e      	mov	r6, r3
 8007028:	da0d      	bge.n	8007046 <__swhatbuf_r+0x2e>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007030:	f04f 0100 	mov.w	r1, #0
 8007034:	bf0c      	ite	eq
 8007036:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800703a:	2340      	movne	r3, #64	; 0x40
 800703c:	2000      	movs	r0, #0
 800703e:	6031      	str	r1, [r6, #0]
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	b016      	add	sp, #88	; 0x58
 8007044:	bd70      	pop	{r4, r5, r6, pc}
 8007046:	466a      	mov	r2, sp
 8007048:	f000 f848 	bl	80070dc <_fstat_r>
 800704c:	2800      	cmp	r0, #0
 800704e:	dbec      	blt.n	800702a <__swhatbuf_r+0x12>
 8007050:	9901      	ldr	r1, [sp, #4]
 8007052:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007056:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800705a:	4259      	negs	r1, r3
 800705c:	4159      	adcs	r1, r3
 800705e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007062:	e7eb      	b.n	800703c <__swhatbuf_r+0x24>

08007064 <__smakebuf_r>:
 8007064:	898b      	ldrh	r3, [r1, #12]
 8007066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007068:	079d      	lsls	r5, r3, #30
 800706a:	4606      	mov	r6, r0
 800706c:	460c      	mov	r4, r1
 800706e:	d507      	bpl.n	8007080 <__smakebuf_r+0x1c>
 8007070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	2301      	movs	r3, #1
 800707a:	6163      	str	r3, [r4, #20]
 800707c:	b002      	add	sp, #8
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	ab01      	add	r3, sp, #4
 8007082:	466a      	mov	r2, sp
 8007084:	f7ff ffc8 	bl	8007018 <__swhatbuf_r>
 8007088:	9900      	ldr	r1, [sp, #0]
 800708a:	4605      	mov	r5, r0
 800708c:	4630      	mov	r0, r6
 800708e:	f7ff f865 	bl	800615c <_malloc_r>
 8007092:	b948      	cbnz	r0, 80070a8 <__smakebuf_r+0x44>
 8007094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007098:	059a      	lsls	r2, r3, #22
 800709a:	d4ef      	bmi.n	800707c <__smakebuf_r+0x18>
 800709c:	f023 0303 	bic.w	r3, r3, #3
 80070a0:	f043 0302 	orr.w	r3, r3, #2
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	e7e3      	b.n	8007070 <__smakebuf_r+0xc>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	6020      	str	r0, [r4, #0]
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	9b00      	ldr	r3, [sp, #0]
 80070b4:	6163      	str	r3, [r4, #20]
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	6120      	str	r0, [r4, #16]
 80070ba:	b15b      	cbz	r3, 80070d4 <__smakebuf_r+0x70>
 80070bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 f81d 	bl	8007100 <_isatty_r>
 80070c6:	b128      	cbz	r0, 80070d4 <__smakebuf_r+0x70>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	431d      	orrs	r5, r3
 80070d8:	81a5      	strh	r5, [r4, #12]
 80070da:	e7cf      	b.n	800707c <__smakebuf_r+0x18>

080070dc <_fstat_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	; (80070fc <_fstat_r+0x20>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	f7fa f85a 	bl	80011a2 <_fstat>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d102      	bne.n	80070f8 <_fstat_r+0x1c>
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	b103      	cbz	r3, 80070f8 <_fstat_r+0x1c>
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	bf00      	nop
 80070fc:	20000410 	.word	0x20000410

08007100 <_isatty_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d06      	ldr	r5, [pc, #24]	; (800711c <_isatty_r+0x1c>)
 8007104:	2300      	movs	r3, #0
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7fa f859 	bl	80011c2 <_isatty>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_isatty_r+0x1a>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_isatty_r+0x1a>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	20000410 	.word	0x20000410

08007120 <_init>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr

0800712c <_fini>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr
